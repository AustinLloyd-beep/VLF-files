$ Begin Test Regression Automation Information

$ Source code names / locations:
$ ==============================
$ 
$ E:\CVRi1\SD&D\Software\VLF_Software\Source\Projects\KgrVpApp\src\MGR\CKeyEffectData.cc
$ 
$ Automation Example:
$ ===================
$ 
$ start /wait contbrun "E:\CVRi1\SD&D\Software\VLF_Software\Source\Projects\Vlf_Utils\LDRA\UnitTesting\KgrVpApp\src\MGR\KgrVpApp_CKeyEffectDay_setData_checkForRollver_seq1.tcf" /regress /quit
$ 
$ End Test Regression Automation Information

$ Begin LDRA Testbed analysis information incorporated from:
$ C:\LDRA\LDRA_Workarea\tbwrkfls\CKeyEffectData_347.tcf

 # Begin Testbed Set

 SINGLE_FILE = TRUE
 GENERATED_BY = Testbed 9.7.4
 HOSTNAME = winpc2005

    # Begin Source Files

    RelativeFile = .\CKeyEffectData.cc
    File = E:\CVRi1\SD&D\Software\VLF_Software\Source\Projects\KgrVpApp\src\MGR\CKeyEffectData.cc
    UNCFile = \\winpc2005\E\CVRi1\SD&D\Software\VLF_Software\Source\Projects\KgrVpApp\src\MGR\CKeyEffectData.cc

    # End Source Files

    # Begin Sysearch Include File Entries

    SearchPath = E:\CVRi1\SD&D\Software\VLF_Software\Source\Projects\KgrVpAppCommon\Common\
    SearchPath = E:\CVRi1\SD&D\Software\VLF_Software\Source\Projects\KgrVpAppCommon\VPCommon\
    SearchPath = E:\CVRi1\SD&D\Software\VLF_Software\Source\Projects\KgrVpAppCommon\BIT\
    SearchPath = E:\CVRi1\SD&D\Software\VLF_Software\Source\Projects\KgrVpAppCommon\MODE\Parser\
    SearchPath = E:\CVRi1\SD&D\Software\VLF_Software\Source\Projects\KgrVpApp\src\MGR\
    SearchPath = E:\CVRi1\SD&D\Software\VLF_Software\Source\Projects\KgrVpApp\src\BIT\
    SearchPath = E:\CVRi1\SD&D\Software\VLF_Software\Source\Projects\KgrVpBsp\
    SearchPath = E:\CVRi1\SD&D\Software\VLF_Software\Source\Projects\KgrVpApp\src\HwDevice\
    SearchPath = E:\CVRi1\SD&D\Software\VLF_Software\Source\ghs\int1104\VP_App1\
    SearchPath = E:\CVRi1\SD&D\Software\VLF_Software\Source\Projects\KgrVpApp\src\MGR\Messages\
    SearchPath = E:\CVRi1\SD&D\Software\VLF_Software\Source\Projects\KgrVpAppCommon\Common\Messages\
    IgnoreInclude_300 = errno.h
    IgnoreInclude_300 = INTEGRITY.h
    IgnoreInclude_300 = INTEGRITY_types.h
    IgnoreInclude_300 = boottable.h
    IgnoreInclude_300 = bsp.h
    IgnoreInclude_300 = INTEGRITY_enum_error.h
    RelativeInclude = ..\..\ommon\VPCommon\CControlVars.h
    RelativeInclude = ..\..\ommon\Common\TMemStrUtility.h
    RelativeInclude = .\CTimeLoad.h
    RelativeInclude = ..\BIT\CDspBIT.h
    RelativeInclude = ..\HwDevice\FpgaDevice.h
    RelativeInclude = ..\..\..\..\ghs\int1104\VP_App1\KgrVpApp_integrate.h
    RelativeInclude = ..\..\..\KgrVpBsp\FpgaIoDevice.h
    RelativeInclude = ..\..\ommon\Common\Messages\CVCConfigureChannel.h
    RelativeInclude = .\Messages\CVOKeyDispositionStatus.h

    # End Sysearch Include File Entries

    # Begin Sysppvar Preprocessor Macros

    MacroEntry = CHAN_ID 1
    MacroEntry = CHAN_ID 2
    MacroEntry = CHAN_ID 3
    MacroEntry = CHAN_ID 4
    MacroEntry = CHAN_ID 5
    MacroEntry = HARD_CODE_NETWORK_CONFIGURATION <LDRA_QQ_UNDEF_MACRO>
    MacroEntry = __cplusplus <LDRA_QQ_UNDEF_MACRO>

    # End Sysppvar Preprocessor Macros

    # Begin Options

    set_attributes = 1 1 1 1 1 0 0 0 0 1 0 0 1 1 0 0 0 0 0 0 0
    nb_mechanism = build
    nb_start_in_dir = $(SourceDir)
    nb_build_command = gbuild -cleanfirst default.gpj
    nb_compile_command = gbuild default.gpj
    nb_link_command = <Not Applicable>
    nb_ide_command = multi default.gpj
    nb_makefile_command = <Not Applicable>
    nb_makefile_name = <Not Applicable>
    nb_compile_each_file = T
    nb_build_each_file = T
    nb_makefile_in_start_in_dir = T
    nb_proj_nmake_command =  
    nb_proj_nmake_file =  
    nb_proj_msdev_command =  
    nb_proj_msdev_file =  
    nb_projfile_in_start_in_dir = T
    nb_proj_makefile_in_start_in_dir = T
    nb_remove_pch = F
    nb_substitute_source = T
    sub_unused_files = F
    nb_pipe = T
    nb_force_console = 2
    enable_pre_build = 0
    enable_post_build = 0
    make_greenhills_bld = 0
    nb_harness = cmd /c "$(TBeddir)Compiler_spec\Greenhills\Integrity_ppc\ppc_run.bat" $(Exe) history.exh
    nb_executepath = $(SolutionDir)\
    nb_execute_each_file = F
    nb_pipe_exec = F
    exhdir = $(SolutionDir)\
    modinst_exh_stem = $(SourceStem)_$(Modnum)
    using_exhstrip = F
    using_validexh = F
    single_set_exh = F
    compress_exh = T
    threaded_exh = F
    memory_address_exh = F
    compress_exh_method = bitmap_structure
    do178b_instr = T
    tbcapture_instr = F
    array_bounds_check = F
    copy_ref_instr = 0
    archive_exh = T
    force_dynsplit = F
    dyn_scan_option = 6
    dyn_scan_custom_coverage = 5 60 100 100 60 100
    dyn_scan_current_coverage = 5 60 100 100 60 100
    dyn_scan_html = T
    dyn_oview_sort = 0
    dyn_oview_options_changed = 0
    dyn_oview_file_by_file = 0
    dyn_oview_files_table = 0
    syntax_only = F
    include = T
    open_all_includes = F
    shorten = T
    tbset_data_file = tbset.dat
    workdir = $(WorkAreadir)tbwrkfls\
    y2k_text_format = 1
    y2k_column_width = 80
    ddf_text_format = 1
    ddf_column_width = 80
    tbr_level = E:\CVRi1\SD&D\Software\VLF_Software\Source\Projects\KgrVpApp\src\MGR\CKeyEffectData.cc 39
    iprog = inszt_$$o
    iext = $$t
    idir = $(SourceDir)
    exe_dir =
    exe_name = <Not Applicable>
    cinstr_data_file = <Default>
    cppinstr_data_file = <Default>
    cpenfile = <Default>
    cpppenfile = <Default>
    cvalsfile = <Default>
    cppvalsfile = <Default>
    cglbfile = <Default>
    cppglbfile = <Default>
    cppsyscallsfile = C:\LDRA\LDRA_Toolsuite\Compiler_spec\Greenhills\Integrity_ppc\ppc_syscalls.dat
    cstandards_model = NSA Rule Set
    cexternal_standard = None
    c_dialect = GREEN
    cppstandards_model = NSA Rule Set
    cppexternal_standard = None
    cpp_dialect = GREEN
    application_accessed = TBrun
    application_accessed = Testbed
    sysearch = E:\CVRi1\SD&D\Software\VLF_Software\Source\Projects\Vlf_Utils\LDRA\UnitTesting\KgrVpApp\src\MGR\sysearch.dat
    sysppvar = E:\CVRi1\SD&D\Software\VLF_Software\Source\Projects\Vlf_Utils\LDRA\UnitTesting\KgrVpApp\src\MGR\sysppvar.dat
    dynamic_run_number = 1
    data_set_name = KgrVpApp_CKeyEffectData_clear_mKeyEffArrayElement_seq1_harn_tc5
    history = 21
    coverage = 3
    exhwidth = 0
    logging = T
    thisdir = F
    forcedataflow = T
    dosnames = F
    scanondemand = T
    iprog_switch_os_format = F
    iprog_flush_exh = F
    preprocess_iprog = T
    instr_template_io = F
    current_compiler = GreenHills INTEGRITY PowerPC
    initial_compiler = GreenHills INTEGRITY PowerPC

    # End Options

 # End Testbed Set

$ End LDRA Testbed analysis information incorporated from:
$ C:\LDRA\LDRA_Workarea\tbwrkfls\CKeyEffectData_347.tcf

    # Begin Properties

    BOOL defined = AUTO
    LC bool defined = AUTO
    No Expand BOOL = TRUE
    No Expand LC bool = FALSE
    ShLayout = $(TBeddir)Compiler_spec\Greenhills\Integrity_ppc\ppc_cppshlayout.dat
    Expand Source = FALSE
    Expand Tbrunlib = FALSE
    Expand Stubs = FALSE
    Include On Top = FALSE
    Split = TRUE
    Target = C:\LDRA\LDRA_Workarea\Examples\Tlps\GreenHills\GHS_INTEGRITY_PPC_Workspace\GHS_INTEGRITY_PPC_tbrun\tbrun.top
    Target Exh File = $(Exestartdir)$(SourceStem)_$(Modnum).exh
    Supress Stdout = TRUE
    All Members = INLINE
    Enum For Enums = TRUE
    No Constants = FALSE
    Exh Directory = CUSTOM
    Exh Path = C:\LDRA\LDRA_Workarea\Examples\Tlps\GreenHills\GHS_INTEGRITY_PPC_Workspace\GHS_INTEGRITY_PPC_tbrun\
    Param Assignment = REFS
    IBox = Light Grey
    Exceptions Method = Use try / catch (...)
    Exceptions Try = __try
    Exceptions Catch = __except (1)
    Exceptions Code = 
    Exceptions End = 
    Includes UNIX Format = FALSE
    Includes Relative Path = FALSE
    Includes Drive Sub = 
    Includes Relative To = 
    Includes Relative Prefix = 
    D2U Generated Source = FALSE
    U2D Generated Output = FALSE
    Test Case Variable Storage = VERBOSE
    Del Pre Obj = TRUE
    Del Post Obj = TRUE
    Del Executable = TRUE
    Obj Extension = .obj
    Exe Extension = 
    IP Address = 
    Unixdir = 
    Unix Utilsdir = 
    Unix Username = 
    SH Common Build = TRUE
    SH Optimise Source = OPTIMISED
    TBrunlib = $(TBeddir)Cpp\ldra_port_cpptbrunlib.h
    Sequencer No Regression = FALSE
    Unit Test Force Dynamic = FALSE
    Unit Test Accume Exh = TRUE
    K and R = FALSE
    Declare ldra_qq_tbrun_output = TRUE
    SH Driver Style = AUTO
    SH Library Caller = $(Sourcedir)$(Stem)_ldra$(DriverDotext)
    SH Library Procedure = $(Stem)_test
    Timing Enabled = FALSE
    Timing Fails = FALSE
    Timing Variable Name = ldra_qq_duration
    Timing Variable Type = double
    Convert Regression Analysis = WRITE
    Unconvert Regression Analysis = COMPARE
    Dictionary = C:\LDRA\LDRA_Workarea\tbwrkfls\CKeyEffectData_347_tbdict\
    Local Conversions = $(Workdir)CKeyEffectData_347_conv_cpp.dat
    Global Conversions = $(TBeddir)Cpp\ldra_port_cpptbruntyp.dat
    TBrun coloured GUI = TRUE
    TBrun first error displayed = TRUE
    Link error based on msvcnet = FALSE
    Protection Override = BUDDY
    Processor Chip = 
    Tool Dir = 
    Tool Lib Dir = 
    Driver Params First = TRUE
    Template Makefile Enabled = TRUE
    Template Makefile Name = C:\LDRA\LDRA_Workarea\Examples\Tlps\GreenHills\GHS_INTEGRITY_PPC_Workspace\GHS_INTEGRITY_PPC_tbrun\src\tbrun_as0_TEMPLATE.gpj
    Template Makefile Target = C:\LDRA\LDRA_Workarea\Examples\Tlps\GreenHills\GHS_INTEGRITY_PPC_Workspace\GHS_INTEGRITY_PPC_tbrun\src\tbrun_as0.gpj
    SH Debug Mode = FALSE
    SH Terminate Main = FALSE
    GHS Build Command Exe = GBUILD.EXE
    GHS Project Extension = gpj
    Exception Filter = FALSE
    Port Number = 
    Generate VTable = FALSE
    SH Build Style = BUILD
    SH Sub Source = FALSE
    SH Host Program = $(Buildstartdir)src\$(ProgID)_$(Modnum)_$(Stem)_$(SeqName).$(Ext)
    SH Executable Name = C:\LDRA\LDRA_Workarea\Examples\Tlps\GreenHills\GHS_INTEGRITY_PPC_Workspace\GHS_INTEGRITY_PPC_tbrun\tbrun
    SH Build Command = cmd /c gbuild default.gpj
    SH Compile Command = <Not Applicable>
    SH Link Command = <Not Applicable>
    SH Execution Command = cmd /k "$(TBeddir)Compiler_spec\Greenhills\Integrity_ppc\ppc_run.bat" $(Exe) tbrun.top
    SH Pipe Command = AUTOMATIC
    SH Pipe Compile = AUTOMATIC
    SH Pipe Link = AUTOMATIC
    SH Pipe Execution = AUTOMATIC
    SH Output File = $(Seqworkdir)$(SeqName).$(ProgID)op
    SH Dosnames = FALSE
    SH Makefile = 
    SH Build Startin = C:\LDRA\LDRA_Workarea\Examples\Tlps\GreenHills\GHS_INTEGRITY_PPC_Workspace\GHS_INTEGRITY_PPC_tbrun\
    SH Exe Startin = C:\LDRA\LDRA_Workarea\Examples\Tlps\GreenHills\GHS_INTEGRITY_PPC_Workspace\GHS_INTEGRITY_PPC_tbrun\
    SH Enable Pre Build Steps = TRUE
    SH Enable Post Build Steps = TRUE
    SH Generate Greenhills BLD files = FALSE
    SH Greenhills BLD Add Excluded Files = FALSE
    SH Template Project File = 
    SH Generated Project File = 
    SH Generate Compiler Project File = FALSE
    SH Source Lists Add Excluded Files = FALSE
    SH Substitute Unused Source Files = FALSE
    SH Lib Build Style = BUILD
    SH Lib Sub Source = FALSE
    SH Lib Host Program = 
    SH Lib Executable Name = $(Seqworkdir)$(SeqName)_$(ProgFullID)$(ExeExtension)
    SH Lib Build Command = cl /nologo "$(Name)" -o "$(Exe)"
    SH Lib Compile Command = cl /nologo /c "$(Name)"
    SH Lib Link Command = link /NOLOGO *.obj /out:"$(Exe)"
    SH Lib Execution Command = "$(Exe)"
    SH Lib Pipe Command = AUTOMATIC
    SH Lib Pipe Compile = AUTOMATIC
    SH Lib Pipe Link = AUTOMATIC
    SH Lib Pipe Execution = AUTOMATIC
    SH Lib Output File = $(Seqworkdir)$(SeqName).$(ProgID)op
    SH Lib Dosnames = FALSE
    SH Lib Makefile = 
    SH Lib Build Startin = $(Seqworkdir)
    SH Lib Exe Startin = $(Seqworkdir)
    SH Lib Enable Pre Build Steps = TRUE
    SH Lib Enable Post Build Steps = FALSE
    SH Lib Generate Greenhills BLD files = TRUE
    SH Lib Greenhills BLD Add Excluded Files = FALSE
    SH Lib Template Project File = 
    SH Lib Generated Project File = 
    SH Lib Generate Compiler Project File = FALSE
    SH Lib Source Lists Add Excluded Files = FALSE
    SH Lib Substitute Unused Source Files = FALSE
    Sequencer Build Style = BUILD
    Sequencer Sub Source = FALSE
    Sequencer Host Program = $(Buildstartdir)src\$(ProgID)_$(Modnum)_$(Stem)_$(SeqName).$(Ext)
    Sequencer Executable Name = C:\LDRA\LDRA_Workarea\Examples\Tlps\GreenHills\GHS_INTEGRITY_PPC_Workspace\GHS_INTEGRITY_PPC_tbrun\tbrun
    Sequencer Build Command = cmd /c gbuild default.gpj
    Sequencer Compile Command = <Not Applicable>
    Sequencer Link Command = <Not Applicable>
    Sequencer Execution Command = cmd /k "$(TBeddir)Compiler_spec\Greenhills\Integrity_ppc\ppc_run.bat" $(Exe) tbrun.top
    Sequencer Pipe Command = AUTOMATIC
    Sequencer Pipe Compile = AUTOMATIC
    Sequencer Pipe Link = AUTOMATIC
    Sequencer Pipe Execution = AUTOMATIC
    Sequencer Output File = $(Seqworkdir)$(SeqName).$(ProgID)op
    Sequencer Dosnames = FALSE
    Sequencer Makefile = 
    Sequencer Build Startin = $(Seqworkdir)
    Sequencer Exe Startin = $(Seqworkdir)
    Sequencer Enable Pre Build Steps = TRUE
    Sequencer Enable Post Build Steps = TRUE
    Sequencer Generate Greenhills BLD files = FALSE
    Sequencer Greenhills BLD Add Excluded Files = FALSE
    Sequencer Template Project File = 
    Sequencer Generated Project File = 
    Sequencer Generate Compiler Project File = FALSE
    Sequencer Source Lists Add Excluded Files = FALSE
    Sequencer Substitute Unused Source Files = FALSE
    Sequencer Lib Build Style = BUILD
    Sequencer Lib Sub Source = FALSE
    Sequencer Lib Host Program = 
    Sequencer Lib Executable Name = $(Seqworkdir)$(SeqName)_$(ProgFullID)$(ExeExtension)
    Sequencer Lib Build Command = cl /nologo "$(Name)" -o "$(Exe)"
    Sequencer Lib Compile Command = cl /nologo /c "$(Name)"
    Sequencer Lib Link Command = link /NOLOGO *.obj /out:"$(Exe)"
    Sequencer Lib Execution Command = "$(Exe)"
    Sequencer Lib Pipe Command = AUTOMATIC
    Sequencer Lib Pipe Compile = AUTOMATIC
    Sequencer Lib Pipe Link = AUTOMATIC
    Sequencer Lib Pipe Execution = AUTOMATIC
    Sequencer Lib Output File = $(Seqworkdir)$(SeqName).$(ProgID)op
    Sequencer Lib Dosnames = FALSE
    Sequencer Lib Makefile = 
    Sequencer Lib Build Startin = $(Seqworkdir)
    Sequencer Lib Exe Startin = $(Seqworkdir)
    Sequencer Lib Enable Pre Build Steps = TRUE
    Sequencer Lib Enable Post Build Steps = FALSE
    Sequencer Lib Generate Greenhills BLD files = TRUE
    Sequencer Lib Greenhills BLD Add Excluded Files = FALSE
    Sequencer Lib Template Project File = 
    Sequencer Lib Generated Project File = 
    Sequencer Lib Generate Compiler Project File = FALSE
    Sequencer Lib Source Lists Add Excluded Files = FALSE
    Sequencer Lib Substitute Unused Source Files = FALSE
    Harness Build Style = BUILD
    Harness Sub Source = FALSE
    Harness Host Program = $(Buildstartdir)src\$(ProgID)_$(Modnum)_$(Stem)_$(SeqName).$(Ext)
    Harness Executable Name = C:\LDRA\LDRA_Workarea\Examples\Tlps\GreenHills\GHS_INTEGRITY_PPC_Workspace\GHS_INTEGRITY_PPC_tbrun\tbrun
    Harness Build Command = cmd /c gbuild default.gpj
    Harness Compile Command = <Not Applicable>
    Harness Link Command = <Not Applicable>
    Harness Execution Command = cmd /k "$(TBeddir)Compiler_spec\Greenhills\Integrity_ppc\ppc_run.bat" $(Exe) tbrun.top
    Harness Pipe Command = AUTOMATIC
    Harness Pipe Compile = AUTOMATIC
    Harness Pipe Link = AUTOMATIC
    Harness Pipe Execution = AUTOMATIC
    Harness Output File = $(Seqworkdir)$(SeqName).$(ProgID)op
    Harness Dosnames = FALSE
    Harness Makefile = 
    Harness Build Startin = $(Seqworkdir)
    Harness Exe Startin = $(Seqworkdir)
    Harness Enable Pre Build Steps = TRUE
    Harness Enable Post Build Steps = TRUE
    Harness Generate Greenhills BLD files = FALSE
    Harness Greenhills BLD Add Excluded Files = FALSE
    Harness Template Project File = 
    Harness Generated Project File = 
    Harness Generate Compiler Project File = FALSE
    Harness Source Lists Add Excluded Files = FALSE
    Harness Substitute Unused Source Files = FALSE
    Harness Lib Build Style = BUILD
    Harness Lib Sub Source = FALSE
    Harness Lib Host Program = 
    Harness Lib Executable Name = $(Seqworkdir)$(SeqName)_$(ProgFullID)$(ExeExtension)
    Harness Lib Build Command = cl /nologo "$(Name)" -o "$(Exe)"
    Harness Lib Compile Command = cl /nologo /c "$(Name)"
    Harness Lib Link Command = link /NOLOGO *.obj /out:"$(Exe)"
    Harness Lib Execution Command = "$(Exe)"
    Harness Lib Pipe Command = AUTOMATIC
    Harness Lib Pipe Compile = AUTOMATIC
    Harness Lib Pipe Link = AUTOMATIC
    Harness Lib Pipe Execution = AUTOMATIC
    Harness Lib Output File = $(Seqworkdir)$(SeqName).$(ProgID)op
    Harness Lib Dosnames = FALSE
    Harness Lib Makefile = 
    Harness Lib Build Startin = $(Seqworkdir)
    Harness Lib Exe Startin = $(Seqworkdir)
    Harness Lib Enable Pre Build Steps = TRUE
    Harness Lib Enable Post Build Steps = TRUE
    Harness Lib Generate Greenhills BLD files = FALSE
    Harness Lib Greenhills BLD Add Excluded Files = FALSE
    Harness Lib Template Project File = 
    Harness Lib Generated Project File = 
    Harness Lib Generate Compiler Project File = FALSE
    Harness Lib Source Lists Add Excluded Files = FALSE
    Harness Lib Substitute Unused Source Files = FALSE
    Macro Standard 1 = Set TBRUN_MACRO_STANDARD_1 in Testbed.ini
    Macro Standard 2 = Set TBRUN_MACRO_STANDARD_2 in Testbed.ini
    Macro Standard 3 = Set TBRUN_MACRO_STANDARD_3 in Testbed.ini
    Macro Standard 4 = Set TBRUN_MACRO_STANDARD_4 in Testbed.ini
    Macro Standard 5 = Set TBRUN_MACRO_STANDARD_5 in Testbed.ini
    Macro File 1 = Set TBRUN_MACRO_FILE_1 in Testbed.ini
    Macro File 2 = Set TBRUN_MACRO_FILE_2 in Testbed.ini
    Macro File 3 = Set TBRUN_MACRO_FILE_3 in Testbed.ini
    Macro File 4 = Set TBRUN_MACRO_FILE_4 in Testbed.ini
    Macro File 5 = Set TBRUN_MACRO_FILE_5 in Testbed.ini
    Macro Directory 1 = Set TBRUN_MACRO_DIRECTORY_1 in Testbed.ini
    Macro Directory 2 = Set TBRUN_MACRO_DIRECTORY_2 in Testbed.ini
    Macro Directory 3 = Set TBRUN_MACRO_DIRECTORY_3 in Testbed.ini
    Macro Directory 4 = Set TBRUN_MACRO_DIRECTORY_4 in Testbed.ini
    Macro Directory 5 = Set TBRUN_MACRO_DIRECTORY_5 in Testbed.ini

    # End Properties

    # Begin Attributes

      Sequence Name = KgrVpApp_CKeyEffectData_checkForRollover_seq1
      New Seq TCF = E:\\CVRi1\\SD&D\\Software\\VLF_Software\\Source\\Projects\\Vlf_Utils\\LDRA\\UnitTesting\\KgrVpApp\\src\\MGR\\KgrVpApp_CKeyEffectDay_setData_checkForRollver_seq1.tcf
      Initial Compiler = GreenHills INTEGRITY PowerPC
      Language Code = 6
      Version = 9.7.4

    # End Attributes

    # Begin Test Case

      File = E:\CVRi1\SD&D\Software\VLF_Software\Source\Projects\KgrVpApp\src\MGR\CKeyEffectData.cc
      Procedure = CKeyEffectData::Instance
      Procedure Number = 112
      Creation Date = Mar 30 2020 10:30:21
      Description = CKeyEffectData::mInstance=NULL

      # Begin Declarations

static CKeyEffectData ldra_qq_lv_104;

static CChannel chan1 = CChannel(CH_1, CH1_FREQ, Ch1CmdConnection, FpgaRegChan1Address,(FpgaSetFreqPFuncType)&FpgaDevice::SetFreqChan1InHz, (FpgaGETSampleAddrPFuncType)&FpgaDevice::GetOutputSample1Address);

static CChannel chan2 = CChannel(CH_2, CH2_FREQ, Ch2CmdConnection, FpgaRegChan2Address,(FpgaSetFreqPFuncType)&FpgaDevice::SetFreqChan2InHz, (FpgaGETSampleAddrPFuncType)&FpgaDevice::GetOutputSample2Address);

static CChannel chan3 = CChannel(CH_3, CH3_FREQ, Ch3CmdConnection, FpgaRegChan3Address,(FpgaSetFreqPFuncType)&FpgaDevice::SetFreqChan3InHz, (FpgaGETSampleAddrPFuncType)&FpgaDevice::GetOutputSample3Address);

static CChannel chan4 = CChannel(CH_4, CH4_FREQ, Ch4CmdConnection, FpgaRegChan4Address,(FpgaSetFreqPFuncType)&FpgaDevice::SetFreqChan4InHz,  (FpgaGETSampleAddrPFuncType)&FpgaDevice::GetOutputSample4Address);

static CChannel chan5 = CChannel(CH_5, CH5_FREQ, Ch5CmdConnection, FpgaRegChan5Address,(FpgaSetFreqPFuncType)&FpgaDevice::SetFreqChan5InHz, (FpgaGETSampleAddrPFuncType)&FpgaDevice::GetOutputSample5Address);

CVlf::Instance()->chan[CH_1] = &chan1;
CVlf::Instance()->chan[CH_2] = &chan2;
CVlf::Instance()->chan[CH_3] = &chan3;
CVlf::Instance()->chan[CH_4] = &chan4;
CVlf::Instance()->chan[CH_5] = &chan5;
static CMode15 m15_c1 = CMode15(); 
static CMode15 m15_c2 = CMode15(); 
static CMode15 m15_c3 = CMode15(); 
static CMode15 m15_c4 = CMode15(); 
static CMode15 m15_c5 = CMode15(); 

CVlf::Instance()->chan[CH_1]->mMode15 = &m15_c1;
CVlf::Instance()->chan[CH_2]->mMode15 = &m15_c2;
CVlf::Instance()->chan[CH_3]->mMode15 = &m15_c3;
CVlf::Instance()->chan[CH_4]->mMode15 = &m15_c4;
CVlf::Instance()->chan[CH_5]->mMode15 = &m15_c5;

static CMode9 m9_c1 = CMode9(); 
static CMode9 m9_c2 = CMode9(); 
static CMode9 m9_c3 = CMode9(); 
static CMode9 m9_c4 = CMode9(); 
static CMode9 m9_c5 = CMode9(); 

CVlf::Instance()->chan[CH_1]->mMode9 = &m9_c1;
CVlf::Instance()->chan[CH_2]->mMode9 = &m9_c2;
CVlf::Instance()->chan[CH_3]->mMode9 = &m9_c3;
CVlf::Instance()->chan[CH_4]->mMode9 = &m9_c4;
CVlf::Instance()->chan[CH_5]->mMode9 = &m9_c5;

static CModeHidar mHi_c1 = CModeHidar(); 
static CModeHidar mHi_c2 = CModeHidar(); 
static CModeHidar mHi_c3 = CModeHidar(); 
static CModeHidar mHi_c4 = CModeHidar(); 
static CModeHidar mHi_c5 = CModeHidar(); 

CVlf::Instance()->chan[CH_1]->mModeHidar = &mHi_c1;
CVlf::Instance()->chan[CH_2]->mModeHidar = &mHi_c2;
CVlf::Instance()->chan[CH_3]->mModeHidar = &mHi_c3;
CVlf::Instance()->chan[CH_4]->mModeHidar = &mHi_c4;
CVlf::Instance()->chan[CH_5]->mModeHidar = &mHi_c5;

static CMode23 m23_c1 = CMode23(); 
static CMode23 m23_c2 = CMode23(); 
static CMode23 m23_c3 = CMode23(); 
static CMode23 m23_c4 = CMode23(); 
static CMode23 m23_c5 = CMode23(); 

CVlf::Instance()->chan[CH_1]->mMode23 = &m23_c1;
CVlf::Instance()->chan[CH_2]->mMode23 = &m23_c2;
CVlf::Instance()->chan[CH_3]->mMode23 = &m23_c3;
CVlf::Instance()->chan[CH_4]->mMode23 = &m23_c4;
CVlf::Instance()->chan[CH_5]->mMode23 = &m23_c5;
      # End Declarations

        # Begin Variable

          Name = CKeyEffectData::mInstance
          Decl_type = CKeyEffectData*
          Usage = G
          Value = NULL

        # End Variable

        # Begin Variable

          Name = %
          Decl_type = CKeyEffectData *
          Usage = O
          TBrun Analysis = Suspended

        # End Variable

        # Begin Variable

          Name = CKeyEffectData::mInstance
          Decl_type = CKeyEffectData*
          Usage = H
          TBrun Analysis = Suspended

        # End Variable

      # Begin TC Stub

        Procedure = check4Null
  Overloading = Prototype

  # Begin Overloading
void *
char *
int
  # End Overloading

        # Begin TC Stub Return Value

          Name = %
          Type = bool
          Value = true

        # End TC Stub Return Value

      # Begin TC Stub TC Hit Count

        Setting = 3
        Specified = 1
      # End TC Stub TC Hit Count

      # End TC Stub

      # Begin TC Stub

        Procedure = CKeyEffectData::CKeyEffectData
  Overloading = Prototype

  # Begin Overloading
  # End Overloading

      # Begin TC Stub TC Hit Count

        Setting = 3
        Specified = 1
      # End TC Stub TC Hit Count

      # End TC Stub

      # Begin TC Stub

        Procedure = CMessage::CMessage
  Overloading = Prototype

  # Begin Overloading
  # End Overloading

      # Begin TC Stub TC Hit Count

        Setting = 3
        Specified = 4
      # End TC Stub TC Hit Count

      # End TC Stub

      # Begin TC Stub

        Procedure = CVCConfigureChannel::CVCConfigureChannel
  Overloading = Prototype

  # Begin Overloading
  # End Overloading

      # Begin TC Stub TC Hit Count

        Setting = 3
        Specified = 1
      # End TC Stub TC Hit Count

      # End TC Stub

      # Begin TC Stub

        Procedure = CVCRunupChannel::CVCRunupChannel
  Overloading = Prototype

  # Begin Overloading
  # End Overloading

      # Begin TC Stub TC Hit Count

        Setting = 3
        Specified = 1
      # End TC Stub TC Hit Count

      # End TC Stub

      # Begin TC Stub

        Procedure = CVCZeroizeCryptoChannel::CVCZeroizeCryptoChannel
  Overloading = Prototype

  # Begin Overloading
  # End Overloading

      # Begin TC Stub TC Hit Count

        Setting = 3
        Specified = 1
      # End TC Stub TC Hit Count

      # End TC Stub

      # Begin TC Stub

        Procedure = CVOKeyDispositionStatus::CVOKeyDispositionStatus
  Overloading = Prototype

  # Begin Overloading
  # End Overloading

      # Begin TC Stub TC Hit Count

        Setting = 3
        Specified = 1
      # End TC Stub TC Hit Count

      # End TC Stub

    # End Test Case

    # Begin Test Case

      File = E:\CVRi1\SD&D\Software\VLF_Software\Source\Projects\KgrVpApp\src\MGR\CKeyEffectData.cc
      Procedure = CKeyEffectData::Instance
      Procedure Number = 112
      Creation Date = Mar 30 2020 10:30:21
      Description = CKeyEffectData::mInstance!=NULL

      # Begin Declarations

static CKeyEffectData ldra_qq_lv_104;

static CChannel chan1 = CChannel(CH_1, CH1_FREQ, Ch1CmdConnection, FpgaRegChan1Address,(FpgaSetFreqPFuncType)&FpgaDevice::SetFreqChan1InHz, (FpgaGETSampleAddrPFuncType)&FpgaDevice::GetOutputSample1Address);

static CChannel chan2 = CChannel(CH_2, CH2_FREQ, Ch2CmdConnection, FpgaRegChan2Address,(FpgaSetFreqPFuncType)&FpgaDevice::SetFreqChan2InHz, (FpgaGETSampleAddrPFuncType)&FpgaDevice::GetOutputSample2Address);

static CChannel chan3 = CChannel(CH_3, CH3_FREQ, Ch3CmdConnection, FpgaRegChan3Address,(FpgaSetFreqPFuncType)&FpgaDevice::SetFreqChan3InHz, (FpgaGETSampleAddrPFuncType)&FpgaDevice::GetOutputSample3Address);

static CChannel chan4 = CChannel(CH_4, CH4_FREQ, Ch4CmdConnection, FpgaRegChan4Address,(FpgaSetFreqPFuncType)&FpgaDevice::SetFreqChan4InHz,  (FpgaGETSampleAddrPFuncType)&FpgaDevice::GetOutputSample4Address);

static CChannel chan5 = CChannel(CH_5, CH5_FREQ, Ch5CmdConnection, FpgaRegChan5Address,(FpgaSetFreqPFuncType)&FpgaDevice::SetFreqChan5InHz, (FpgaGETSampleAddrPFuncType)&FpgaDevice::GetOutputSample5Address);

CVlf::Instance()->chan[CH_1] = &chan1;
CVlf::Instance()->chan[CH_2] = &chan2;
CVlf::Instance()->chan[CH_3] = &chan3;
CVlf::Instance()->chan[CH_4] = &chan4;
CVlf::Instance()->chan[CH_5] = &chan5;
static CMode15 m15_c1 = CMode15(); 
static CMode15 m15_c2 = CMode15(); 
static CMode15 m15_c3 = CMode15(); 
static CMode15 m15_c4 = CMode15(); 
static CMode15 m15_c5 = CMode15(); 

CVlf::Instance()->chan[CH_1]->mMode15 = &m15_c1;
CVlf::Instance()->chan[CH_2]->mMode15 = &m15_c2;
CVlf::Instance()->chan[CH_3]->mMode15 = &m15_c3;
CVlf::Instance()->chan[CH_4]->mMode15 = &m15_c4;
CVlf::Instance()->chan[CH_5]->mMode15 = &m15_c5;

static CMode9 m9_c1 = CMode9(); 
static CMode9 m9_c2 = CMode9(); 
static CMode9 m9_c3 = CMode9(); 
static CMode9 m9_c4 = CMode9(); 
static CMode9 m9_c5 = CMode9(); 

CVlf::Instance()->chan[CH_1]->mMode9 = &m9_c1;
CVlf::Instance()->chan[CH_2]->mMode9 = &m9_c2;
CVlf::Instance()->chan[CH_3]->mMode9 = &m9_c3;
CVlf::Instance()->chan[CH_4]->mMode9 = &m9_c4;
CVlf::Instance()->chan[CH_5]->mMode9 = &m9_c5;

static CModeHidar mHi_c1 = CModeHidar(); 
static CModeHidar mHi_c2 = CModeHidar(); 
static CModeHidar mHi_c3 = CModeHidar(); 
static CModeHidar mHi_c4 = CModeHidar(); 
static CModeHidar mHi_c5 = CModeHidar(); 

CVlf::Instance()->chan[CH_1]->mModeHidar = &mHi_c1;
CVlf::Instance()->chan[CH_2]->mModeHidar = &mHi_c2;
CVlf::Instance()->chan[CH_3]->mModeHidar = &mHi_c3;
CVlf::Instance()->chan[CH_4]->mModeHidar = &mHi_c4;
CVlf::Instance()->chan[CH_5]->mModeHidar = &mHi_c5;

static CMode23 m23_c1 = CMode23(); 
static CMode23 m23_c2 = CMode23(); 
static CMode23 m23_c3 = CMode23(); 
static CMode23 m23_c4 = CMode23(); 
static CMode23 m23_c5 = CMode23(); 

CVlf::Instance()->chan[CH_1]->mMode23 = &m23_c1;
CVlf::Instance()->chan[CH_2]->mMode23 = &m23_c2;
CVlf::Instance()->chan[CH_3]->mMode23 = &m23_c3;
CVlf::Instance()->chan[CH_4]->mMode23 = &m23_c4;
CVlf::Instance()->chan[CH_5]->mMode23 = &m23_c5;
      # End Declarations

        # Begin Variable

          Name = CKeyEffectData::mInstance
          Decl_type = CKeyEffectData*
          Usage = G
          Value = &ldra_qq_lv_104

        # End Variable

        # Begin Variable

          Name = %
          Decl_type = CKeyEffectData *
          Usage = O
          TBrun Analysis = Suspended

        # End Variable

        # Begin Variable

          Name = CKeyEffectData::mInstance
          Decl_type = CKeyEffectData*
          Usage = H
          TBrun Analysis = Suspended

        # End Variable

      # Begin TC Stub

        Procedure = check4Null
  Overloading = Prototype

  # Begin Overloading
void *
char *
int
  # End Overloading

        # Begin TC Stub Return Value

          Name = %
          Type = bool
          Value = true

        # End TC Stub Return Value

      # End TC Stub

    # End Test Case

    # Begin Test Case

      File = E:\CVRi1\SD&D\Software\VLF_Software\Source\Projects\KgrVpApp\src\MGR\CKeyEffectData.cc
      Procedure = CKeyEffectData::setData
      Procedure Number = 120
      Member Of = 2
      Creation Date = Mar 30 2020 10:31:10
      Description = check4Null=T

      # Begin Declarations

static Write_Key_Effectivity_Data_Msg_Type ldra_qq_lv_105;

static Date_Type s_date;

static Key_Effectivity_Data_Type s_key_eff; 

char str[20] = "Short_Title_String";
char* p_str = &str[0]; 

// of type char[MAX_SHORT_TITLE_LENGTH]
Short_Title_Type short_title;
strcpy(short_title, "Hello"); 
//Short_Title_Type* ptr = &short_title;    

s_date.Year = 2000;     //4-digits
s_date.Month = 1;       //1-12
s_date.Day = 1;         //1-31

s_key_eff.keyBankLoc = 1;
s_key_eff.keyBankSegLoc = 1;
s_key_eff.keyValid = 0; //0=false, 1=true
s_key_eff.reserved = 0;
s_key_eff.keyEffectDate = s_date;
s_key_eff.keyShortTitle[0] = NULL;

ldra_qq_lv_105.numKeys = 0;             // unsgined, 8 bit, 0-100, # of TEKs loaded in the msg
ldra_qq_lv_105.lastMsg = 0;             // unsigned, 8 bit, 0/1 flag, last msg in series if key msgs
ldra_qq_lv_105.reserved = 0;            // unsgined, 16 bit, 0 
ldra_qq_lv_105.KeyEffectData[1] = s_key_eff;
      # End Declarations

      # Begin Global Declarations
/*
 * Test case global declaration code will be placed here
 * Variables declared in this section are at global scope
 */
      # End Global Declarations

        # Begin Variable

          Name = mData
          Decl_type = Write_Key_Effectivity_Data_Msg_Type*
          Usage = Z
          Value = &ldra_qq_lv_105

        # End Variable

        # Begin Variable

          Name = mTEKRollover[0]
          Decl_type = bool
          Usage = M
          Value = true

        # End Variable

        # Begin Variable

          Name = mTEKRollover[1]
          Decl_type = bool
          Usage = M
          Value = true

        # End Variable

        # Begin Variable

          Name = mTEKRollover[2]
          Decl_type = bool
          Usage = M
          Value = true

        # End Variable

        # Begin Variable

          Name = mTEKRollover[3]
          Decl_type = bool
          Usage = M
          Value = true

        # End Variable

        # Begin Variable

          Name = mTEKRollover[4]
          Decl_type = bool
          Usage = M
          Value = true

        # End Variable

        # Begin Variable

          Name = mTEKRollover[0]
          Decl_type = bool
          Usage = N
          Value = true

        # End Variable

        # Begin Variable

          Name = mTEKRollover[1]
          Decl_type = bool
          Usage = N
          Value = true

        # End Variable

        # Begin Variable

          Name = mTEKRollover[2]
          Decl_type = bool
          Usage = N
          Value = true

        # End Variable

        # Begin Variable

          Name = mTEKRollover[3]
          Decl_type = bool
          Usage = N
          Value = true

        # End Variable

        # Begin Variable

          Name = mTEKRollover[4]
          Decl_type = bool
          Usage = N
          Value = true

        # End Variable

        # Begin Removed Variable

          Name = mData->KeyEffectData
          Decl_type = Key_Effectivity_Data_Type
          Usage = Z
          Frozen = T

        # End Removed Variable

        # Begin Removed Variable

          Name = mSearchKeyEffectArray [5].keyBankSegLoc
          Decl_type = unsigned
          Usage = M
          Packed = T

        # End Removed Variable

        # Begin Removed Variable

          Name = mSearchKeyEffectArray [5].keyBankLoc
          Decl_type = unsigned
          Usage = M
          Packed = T

        # End Removed Variable

        # Begin Removed Variable

          Name = mSearchKeyEffectArray [5]
          Decl_type = Key_Bank_Info_Type
          Usage = M
          Packed = T

        # End Removed Variable

        # Begin Removed Variable

          Name = mKeyEffArray [7] [100].keyShortTitle [24]
          Decl_type = char
          Usage = M
          Packed = T

        # End Removed Variable

        # Begin Removed Variable

          Name = mKeyEffArray [7] [100].keyPresent
          Decl_type = unsigned
          Usage = M
          Packed = T

        # End Removed Variable

        # Begin Removed Variable

          Name = mKeyEffArray.keyEffectDate
          Decl_type = Date_Type[7][100]
          Usage = M
          Frozen = T

        # End Removed Variable

        # Begin Removed Variable

          Name = mKeyEffArray [7] [100].valid
          Decl_type = unsigned
          Usage = M
          Packed = T

        # End Removed Variable

        # Begin Removed Variable

          Name = mKeyEffArray
          Decl_type = CKeyEffectData::Key_Table_Data_Type[7][100]
          Usage = M
          Frozen = T

        # End Removed Variable

        # Begin Removed Variable

          Name = CKeyEffectData::mInstance
          Decl_type = CKeyEffectData*
          Usage = G

        # End Removed Variable

        # Begin Removed Variable

          Name = mKeyEffArray [7] [100].keyPresent
          Decl_type = unsigned
          Usage = N
          Packed = T

        # End Removed Variable

        # Begin Removed Variable

          Name = mKeyEffArray [7] [100].keyEffectDay
          Decl_type = unsigned
          Usage = N
          Packed = T

        # End Removed Variable

        # Begin Removed Variable

          Name = mKeyEffArray [7] [100].keyEffectDate.Day
          Decl_type = unsigned
          Usage = N
          Packed = T

        # End Removed Variable

        # Begin Removed Variable

          Name = mKeyEffArray [7] [100].keyEffectDate.Month
          Decl_type = unsigned
          Usage = N
          Packed = T

        # End Removed Variable

        # Begin Removed Variable

          Name = mKeyEffArray [7] [100].keyEffectDate.Year
          Decl_type = unsigned
          Usage = N
          Packed = T

        # End Removed Variable

        # Begin Removed Variable

          Name = mKeyEffArray.keyEffectDate
          Decl_type = Date_Type[7][100]
          Usage = N
          Frozen = T

        # End Removed Variable

        # Begin Removed Variable

          Name = mKeyEffArray [7] [100].valid
          Decl_type = unsigned
          Usage = N
          Packed = T

        # End Removed Variable

        # Begin Removed Variable

          Name = CKeyEffectData::mInstance
          Decl_type = CKeyEffectData*
          Usage = H

        # End Removed Variable

      # Begin TC Stub

        Procedure = check4Null
  Overloading = Prototype

  # Begin Overloading
void *
char *
int
  # End Overloading

        # Begin TC Stub Return Value

          Name = %
          Type = bool
          Value = true

        # End TC Stub Return Value

      # Begin TC Stub TC Hit Count

        Setting = 3
        Specified = 1
      # End TC Stub TC Hit Count

      # End TC Stub

      # Begin TC Stub

        Procedure = CKeyEffectData::rolloverEffectivity
  Overloading = Prototype

  # Begin Overloading
unsigned int
  # End Overloading

      # Begin TC Stub TC Hit Count

        Setting = 1
        Specified = 1
      # End TC Stub TC Hit Count

      # End TC Stub

      # Begin TC Stub

        Procedure = CKeyEffectData::getDayOfYear
  Overloading = Prototype

  # Begin Overloading
Date_Type
  # End Overloading

        # Begin TC Stub Return Value

          Name = %
          Type = UINT2
          Value = 65535

        # End TC Stub Return Value

      # End TC Stub

      # Begin TC Stub

        Procedure = CKeyEffectData::checkForRollover
  Overloading = Prototype

  # Begin Overloading
Write_Key_Effectivity_Data_Msg_Type *
  # End Overloading

      # Begin TC Stub TC Hit Count

        Setting = 1
        Specified = 1
      # End TC Stub TC Hit Count

      # End TC Stub

      # Begin TC Stub

        Procedure = CKeyEffectData::buildFilledBankMap
  Overloading = Prototype

  # Begin Overloading
  # End Overloading

      # Begin TC Stub TC Hit Count

        Setting = 1
        Specified = 1
      # End TC Stub TC Hit Count

      # End TC Stub

    # End Test Case

    # Begin Test Case

      File = E:\CVRi1\SD&D\Software\VLF_Software\Source\Projects\KgrVpApp\src\MGR\CKeyEffectData.cc
      Procedure = CKeyEffectData::setData
      Procedure Number = 120
      Member Of = 2
      Creation Date = Mar 30 2020 10:31:10
      Description = check4Null=F, numKeys=0,lastMsg=0, mTekRollover=T (in=out)

      # Begin Declarations

static Write_Key_Effectivity_Data_Msg_Type ldra_qq_lv_105;

static Date_Type s_date;

static Key_Effectivity_Data_Type s_key_eff; 

char str[20] = "Short_Title_String";
char* p_str = &str[0]; 

// of type char[MAX_SHORT_TITLE_LENGTH]
Short_Title_Type short_title;
strcpy(short_title, "Hello"); 
//Short_Title_Type* ptr = &short_title;    

s_date.Year = 2000;     //4-digits
s_date.Month = 1;       //1-12
s_date.Day = 1;         //1-31

s_key_eff.keyBankLoc = 1;
s_key_eff.keyBankSegLoc = 1;
s_key_eff.keyValid = 0; //0=false, 1=true
s_key_eff.reserved = 0;
s_key_eff.keyEffectDate = s_date;
s_key_eff.keyShortTitle[0] = NULL;

ldra_qq_lv_105.numKeys = 0;             // unsgined, 8 bit, 0-100, # of TEKs loaded in the msg
ldra_qq_lv_105.lastMsg = 0;             // unsigned, 8 bit, 0/1 flag, last msg in series if key msgs
ldra_qq_lv_105.reserved = 0;            // unsgined, 16 bit, 0 
ldra_qq_lv_105.KeyEffectData[1] = s_key_eff;
      # End Declarations

      # Begin Global Declarations
/*
 * Test case global declaration code will be placed here
 * Variables declared in this section are at global scope
 */
      # End Global Declarations

        # Begin Variable

          Name = mData
          Decl_type = Write_Key_Effectivity_Data_Msg_Type*
          Usage = Z
          Value = &ldra_qq_lv_105

        # End Variable

        # Begin Variable

          Name = mTEKRollover[0]
          Decl_type = bool
          Usage = M
          Value = true

        # End Variable

        # Begin Variable

          Name = mTEKRollover[1]
          Decl_type = bool
          Usage = M
          Value = true

        # End Variable

        # Begin Variable

          Name = mTEKRollover[2]
          Decl_type = bool
          Usage = M
          Value = true

        # End Variable

        # Begin Variable

          Name = mTEKRollover[3]
          Decl_type = bool
          Usage = M
          Value = true

        # End Variable

        # Begin Variable

          Name = mTEKRollover[4]
          Decl_type = bool
          Usage = M
          Value = true

        # End Variable

        # Begin Variable

          Name = mTEKRollover[0]
          Decl_type = bool
          Usage = N
          Value = true

        # End Variable

        # Begin Variable

          Name = mTEKRollover[1]
          Decl_type = bool
          Usage = N
          Value = true

        # End Variable

        # Begin Variable

          Name = mTEKRollover[2]
          Decl_type = bool
          Usage = N
          Value = true

        # End Variable

        # Begin Variable

          Name = mTEKRollover[3]
          Decl_type = bool
          Usage = N
          Value = true

        # End Variable

        # Begin Variable

          Name = mTEKRollover[4]
          Decl_type = bool
          Usage = N
          Value = true

        # End Variable

        # Begin Removed Variable

          Name = mData->KeyEffectData
          Decl_type = Key_Effectivity_Data_Type
          Usage = Z
          Frozen = T

        # End Removed Variable

        # Begin Removed Variable

          Name = mSearchKeyEffectArray [5].keyBankSegLoc
          Decl_type = unsigned
          Usage = M
          Packed = T

        # End Removed Variable

        # Begin Removed Variable

          Name = mSearchKeyEffectArray [5].keyBankLoc
          Decl_type = unsigned
          Usage = M
          Packed = T

        # End Removed Variable

        # Begin Removed Variable

          Name = mSearchKeyEffectArray [5]
          Decl_type = Key_Bank_Info_Type
          Usage = M
          Packed = T

        # End Removed Variable

        # Begin Removed Variable

          Name = mKeyEffArray [7] [100].keyShortTitle [24]
          Decl_type = char
          Usage = M
          Packed = T

        # End Removed Variable

        # Begin Removed Variable

          Name = mKeyEffArray [7] [100].keyPresent
          Decl_type = unsigned
          Usage = M
          Packed = T

        # End Removed Variable

        # Begin Removed Variable

          Name = mKeyEffArray.keyEffectDate
          Decl_type = Date_Type[7][100]
          Usage = M
          Frozen = T

        # End Removed Variable

        # Begin Removed Variable

          Name = mKeyEffArray [7] [100].valid
          Decl_type = unsigned
          Usage = M
          Packed = T

        # End Removed Variable

        # Begin Removed Variable

          Name = mKeyEffArray
          Decl_type = CKeyEffectData::Key_Table_Data_Type[7][100]
          Usage = M
          Frozen = T

        # End Removed Variable

        # Begin Removed Variable

          Name = CKeyEffectData::mInstance
          Decl_type = CKeyEffectData*
          Usage = G

        # End Removed Variable

        # Begin Removed Variable

          Name = mKeyEffArray [7] [100].keyPresent
          Decl_type = unsigned
          Usage = N
          Packed = T

        # End Removed Variable

        # Begin Removed Variable

          Name = mKeyEffArray [7] [100].keyEffectDay
          Decl_type = unsigned
          Usage = N
          Packed = T

        # End Removed Variable

        # Begin Removed Variable

          Name = mKeyEffArray [7] [100].keyEffectDate.Day
          Decl_type = unsigned
          Usage = N
          Packed = T

        # End Removed Variable

        # Begin Removed Variable

          Name = mKeyEffArray [7] [100].keyEffectDate.Month
          Decl_type = unsigned
          Usage = N
          Packed = T

        # End Removed Variable

        # Begin Removed Variable

          Name = mKeyEffArray [7] [100].keyEffectDate.Year
          Decl_type = unsigned
          Usage = N
          Packed = T

        # End Removed Variable

        # Begin Removed Variable

          Name = mKeyEffArray.keyEffectDate
          Decl_type = Date_Type[7][100]
          Usage = N
          Frozen = T

        # End Removed Variable

        # Begin Removed Variable

          Name = mKeyEffArray [7] [100].valid
          Decl_type = unsigned
          Usage = N
          Packed = T

        # End Removed Variable

        # Begin Removed Variable

          Name = CKeyEffectData::mInstance
          Decl_type = CKeyEffectData*
          Usage = H

        # End Removed Variable

      # Begin TC Stub

        Procedure = check4Null
  Overloading = Prototype

  # Begin Overloading
void *
char *
int
  # End Overloading

        # Begin TC Stub Return Value

          Name = %
          Type = bool
          Value = false

        # End TC Stub Return Value

      # Begin TC Stub TC Hit Count

        Setting = 3
        Specified = 1
      # End TC Stub TC Hit Count

      # End TC Stub

      # Begin TC Stub

        Procedure = CKeyEffectData::triggerMainKeyRolloverTask
  Overloading = Prototype

  # Begin Overloading
  # End Overloading

      # Begin TC Stub TC Hit Count

        Setting = 1
        Specified = 1
      # End TC Stub TC Hit Count

      # End TC Stub

      # Begin TC Stub

        Procedure = CKeyEffectData::rolloverEffectivity
  Overloading = Prototype

  # Begin Overloading
unsigned int
  # End Overloading

      # Begin TC Stub TC Hit Count

        Setting = 3
        Specified = 5
      # End TC Stub TC Hit Count

      # End TC Stub

      # Begin TC Stub

        Procedure = CKeyEffectData::getDayOfYear
  Overloading = Prototype

  # Begin Overloading
Date_Type
  # End Overloading

        # Begin TC Stub Return Value

          Name = %
          Type = UINT2
          Value = 65535

        # End TC Stub Return Value

      # End TC Stub

      # Begin TC Stub

        Procedure = CKeyEffectData::checkForRollover
  Overloading = Prototype

  # Begin Overloading
Write_Key_Effectivity_Data_Msg_Type *
  # End Overloading

      # Begin TC Stub TC Hit Count

        Setting = 3
        Specified = 1
      # End TC Stub TC Hit Count

      # End TC Stub

      # Begin TC Stub

        Procedure = CKeyEffectData::buildFilledBankMap
  Overloading = Prototype

  # Begin Overloading
  # End Overloading

      # Begin TC Stub TC Hit Count

        Setting = 3
        Specified = 1
      # End TC Stub TC Hit Count

      # End TC Stub

    # End Test Case

    # Begin Test Case

      File = E:\CVRi1\SD&D\Software\VLF_Software\Source\Projects\KgrVpApp\src\MGR\CKeyEffectData.cc
      Procedure = CKeyEffectData::setData
      Procedure Number = 120
      Member Of = 2
      Creation Date = Mar 30 2020 10:31:10
      Description = check4Null=F, numKeys=0,lastMsg=0, mTekRollover=F (in=out)

      # Begin Declarations

static Write_Key_Effectivity_Data_Msg_Type ldra_qq_lv_105;

static Date_Type s_date;

static Key_Effectivity_Data_Type s_key_eff; 

char str[20] = "Short_Title_String";
char* p_str = &str[0]; 

// of type char[MAX_SHORT_TITLE_LENGTH]
Short_Title_Type short_title;
strcpy(short_title, "Hello"); 
//Short_Title_Type* ptr = &short_title;    

s_date.Year = 2000;     //4-digits
s_date.Month = 1;       //1-12
s_date.Day = 1;         //1-31

s_key_eff.keyBankLoc = 1;
s_key_eff.keyBankSegLoc = 1;
s_key_eff.keyValid = 0; //0=false, 1=true
s_key_eff.reserved = 0;
s_key_eff.keyEffectDate = s_date;
s_key_eff.keyShortTitle[0] = NULL;

ldra_qq_lv_105.numKeys = 0;             // unsgined, 8 bit, 0-100, # of TEKs loaded in the msg
ldra_qq_lv_105.lastMsg = 0;             // unsigned, 8 bit, 0/1 flag, last msg in series if key msgs
ldra_qq_lv_105.reserved = 0;            // unsgined, 16 bit, 0 
ldra_qq_lv_105.KeyEffectData[1] = s_key_eff;
      # End Declarations

      # Begin Global Declarations
/*
 * Test case global declaration code will be placed here
 * Variables declared in this section are at global scope
 */
      # End Global Declarations

        # Begin Variable

          Name = mData
          Decl_type = Write_Key_Effectivity_Data_Msg_Type*
          Usage = Z
          Value = &ldra_qq_lv_105

        # End Variable

        # Begin Variable

          Name = mTEKRollover[0]
          Decl_type = bool
          Usage = M
          Value = false

        # End Variable

        # Begin Variable

          Name = mTEKRollover[1]
          Decl_type = bool
          Usage = M
          Value = false

        # End Variable

        # Begin Variable

          Name = mTEKRollover[2]
          Decl_type = bool
          Usage = M
          Value = false

        # End Variable

        # Begin Variable

          Name = mTEKRollover[3]
          Decl_type = bool
          Usage = M
          Value = false

        # End Variable

        # Begin Variable

          Name = mTEKRollover[4]
          Decl_type = bool
          Usage = M
          Value = false

        # End Variable

        # Begin Variable

          Name = mTEKRollover[0]
          Decl_type = bool
          Usage = N
          Value = false

        # End Variable

        # Begin Variable

          Name = mTEKRollover[1]
          Decl_type = bool
          Usage = N
          Value = false

        # End Variable

        # Begin Variable

          Name = mTEKRollover[2]
          Decl_type = bool
          Usage = N
          Value = false

        # End Variable

        # Begin Variable

          Name = mTEKRollover[3]
          Decl_type = bool
          Usage = N
          Value = false

        # End Variable

        # Begin Variable

          Name = mTEKRollover[4]
          Decl_type = bool
          Usage = N
          Value = false

        # End Variable

        # Begin Removed Variable

          Name = mData->KeyEffectData
          Decl_type = Key_Effectivity_Data_Type
          Usage = Z
          Frozen = T

        # End Removed Variable

        # Begin Removed Variable

          Name = mSearchKeyEffectArray [5].keyBankSegLoc
          Decl_type = unsigned
          Usage = M
          Packed = T

        # End Removed Variable

        # Begin Removed Variable

          Name = mSearchKeyEffectArray [5].keyBankLoc
          Decl_type = unsigned
          Usage = M
          Packed = T

        # End Removed Variable

        # Begin Removed Variable

          Name = mSearchKeyEffectArray [5]
          Decl_type = Key_Bank_Info_Type
          Usage = M
          Packed = T

        # End Removed Variable

        # Begin Removed Variable

          Name = mKeyEffArray [7] [100].keyShortTitle [24]
          Decl_type = char
          Usage = M
          Packed = T

        # End Removed Variable

        # Begin Removed Variable

          Name = mKeyEffArray [7] [100].keyPresent
          Decl_type = unsigned
          Usage = M
          Packed = T

        # End Removed Variable

        # Begin Removed Variable

          Name = mKeyEffArray.keyEffectDate
          Decl_type = Date_Type[7][100]
          Usage = M
          Frozen = T

        # End Removed Variable

        # Begin Removed Variable

          Name = mKeyEffArray [7] [100].valid
          Decl_type = unsigned
          Usage = M
          Packed = T

        # End Removed Variable

        # Begin Removed Variable

          Name = mKeyEffArray
          Decl_type = CKeyEffectData::Key_Table_Data_Type[7][100]
          Usage = M
          Frozen = T

        # End Removed Variable

        # Begin Removed Variable

          Name = CKeyEffectData::mInstance
          Decl_type = CKeyEffectData*
          Usage = G

        # End Removed Variable

        # Begin Removed Variable

          Name = mKeyEffArray [7] [100].keyPresent
          Decl_type = unsigned
          Usage = N
          Packed = T

        # End Removed Variable

        # Begin Removed Variable

          Name = mKeyEffArray [7] [100].keyEffectDay
          Decl_type = unsigned
          Usage = N
          Packed = T

        # End Removed Variable

        # Begin Removed Variable

          Name = mKeyEffArray [7] [100].keyEffectDate.Day
          Decl_type = unsigned
          Usage = N
          Packed = T

        # End Removed Variable

        # Begin Removed Variable

          Name = mKeyEffArray [7] [100].keyEffectDate.Month
          Decl_type = unsigned
          Usage = N
          Packed = T

        # End Removed Variable

        # Begin Removed Variable

          Name = mKeyEffArray [7] [100].keyEffectDate.Year
          Decl_type = unsigned
          Usage = N
          Packed = T

        # End Removed Variable

        # Begin Removed Variable

          Name = mKeyEffArray.keyEffectDate
          Decl_type = Date_Type[7][100]
          Usage = N
          Frozen = T

        # End Removed Variable

        # Begin Removed Variable

          Name = mKeyEffArray [7] [100].valid
          Decl_type = unsigned
          Usage = N
          Packed = T

        # End Removed Variable

        # Begin Removed Variable

          Name = CKeyEffectData::mInstance
          Decl_type = CKeyEffectData*
          Usage = H

        # End Removed Variable

      # Begin TC Stub

        Procedure = check4Null
  Overloading = Prototype

  # Begin Overloading
void *
char *
int
  # End Overloading

        # Begin TC Stub Return Value

          Name = %
          Type = bool
          Value = false

        # End TC Stub Return Value

      # Begin TC Stub TC Hit Count

        Setting = 3
        Specified = 1
      # End TC Stub TC Hit Count

      # End TC Stub

      # Begin TC Stub

        Procedure = CKeyEffectData::triggerMainKeyRolloverTask
  Overloading = Prototype

  # Begin Overloading
  # End Overloading

      # Begin TC Stub TC Hit Count

        Setting = 1
        Specified = 1
      # End TC Stub TC Hit Count

      # End TC Stub

      # Begin TC Stub

        Procedure = CKeyEffectData::rolloverEffectivity
  Overloading = Prototype

  # Begin Overloading
unsigned int
  # End Overloading

      # Begin TC Stub TC Hit Count

        Setting = 1
        Specified = 5
      # End TC Stub TC Hit Count

      # End TC Stub

      # Begin TC Stub

        Procedure = CKeyEffectData::getDayOfYear
  Overloading = Prototype

  # Begin Overloading
Date_Type
  # End Overloading

        # Begin TC Stub Return Value

          Name = %
          Type = UINT2
          Value = 65535

        # End TC Stub Return Value

      # End TC Stub

      # Begin TC Stub

        Procedure = CKeyEffectData::checkForRollover
  Overloading = Prototype

  # Begin Overloading
Write_Key_Effectivity_Data_Msg_Type *
  # End Overloading

      # Begin TC Stub TC Hit Count

        Setting = 3
        Specified = 1
      # End TC Stub TC Hit Count

      # End TC Stub

      # Begin TC Stub

        Procedure = CKeyEffectData::buildFilledBankMap
  Overloading = Prototype

  # Begin Overloading
  # End Overloading

      # Begin TC Stub TC Hit Count

        Setting = 3
        Specified = 1
      # End TC Stub TC Hit Count

      # End TC Stub

    # End Test Case

    # Begin Test Case

      File = E:\CVRi1\SD&D\Software\VLF_Software\Source\Projects\KgrVpApp\src\MGR\CKeyEffectData.cc
      Procedure = CKeyEffectData::setData
      Procedure Number = 120
      Member Of = 2
      Creation Date = Mar 30 2020 10:31:10
      Description = check4Null=F, numKeys=0,lastMsg=1

      # Begin Declarations

static Write_Key_Effectivity_Data_Msg_Type ldra_qq_lv_105;

static Date_Type s_date;

static Key_Effectivity_Data_Type s_key_eff; 

char str[20] = "Short_Title_String";
char* p_str = &str[0]; 

// of type char[MAX_SHORT_TITLE_LENGTH]
Short_Title_Type short_title;
strcpy(short_title, "Hello"); 
//Short_Title_Type* ptr = &short_title;    

s_date.Year = 2000;     //4-digits
s_date.Month = 1;       //1-12
s_date.Day = 1;         //1-31

s_key_eff.keyBankLoc = 1;
s_key_eff.keyBankSegLoc = 1;
s_key_eff.keyValid = 0; //0=false, 1=true
s_key_eff.reserved = 0;
s_key_eff.keyEffectDate = s_date;
s_key_eff.keyShortTitle[0] = NULL;

ldra_qq_lv_105.numKeys = 0;             // unsgined, 8 bit, 0-100, # of TEKs loaded in the msg
ldra_qq_lv_105.lastMsg = 1;             // unsigned, 8 bit, 0/1 flag, last msg in series if key msgs
ldra_qq_lv_105.reserved = 0;            // unsgined, 16 bit, 0 
ldra_qq_lv_105.KeyEffectData[1] = s_key_eff;
      # End Declarations

      # Begin Global Declarations
/*
 * Test case global declaration code will be placed here
 * Variables declared in this section are at global scope
 */
      # End Global Declarations

        # Begin Variable

          Name = mData
          Decl_type = Write_Key_Effectivity_Data_Msg_Type*
          Usage = Z
          Value = &ldra_qq_lv_105

        # End Variable

        # Begin Variable

          Name = mTEKRollover[0]
          Decl_type = bool
          Usage = M
          Value = true

        # End Variable

        # Begin Variable

          Name = mTEKRollover[1]
          Decl_type = bool
          Usage = M
          Value = true

        # End Variable

        # Begin Variable

          Name = mTEKRollover[2]
          Decl_type = bool
          Usage = M
          Value = true

        # End Variable

        # Begin Variable

          Name = mTEKRollover[3]
          Decl_type = bool
          Usage = M
          Value = true

        # End Variable

        # Begin Variable

          Name = mTEKRollover[4]
          Decl_type = bool
          Usage = M
          Value = true

        # End Variable

        # Begin Variable

          Name = mTEKRollover[0]
          Decl_type = bool
          Usage = N
          Value = true

        # End Variable

        # Begin Variable

          Name = mTEKRollover[1]
          Decl_type = bool
          Usage = N
          Value = true

        # End Variable

        # Begin Variable

          Name = mTEKRollover[2]
          Decl_type = bool
          Usage = N
          Value = true

        # End Variable

        # Begin Variable

          Name = mTEKRollover[3]
          Decl_type = bool
          Usage = N
          Value = true

        # End Variable

        # Begin Variable

          Name = mTEKRollover[4]
          Decl_type = bool
          Usage = N
          Value = true

        # End Variable

        # Begin Removed Variable

          Name = mData->KeyEffectData
          Decl_type = Key_Effectivity_Data_Type
          Usage = Z
          Frozen = T

        # End Removed Variable

        # Begin Removed Variable

          Name = mSearchKeyEffectArray [5].keyBankSegLoc
          Decl_type = unsigned
          Usage = M
          Packed = T

        # End Removed Variable

        # Begin Removed Variable

          Name = mSearchKeyEffectArray [5].keyBankLoc
          Decl_type = unsigned
          Usage = M
          Packed = T

        # End Removed Variable

        # Begin Removed Variable

          Name = mSearchKeyEffectArray [5]
          Decl_type = Key_Bank_Info_Type
          Usage = M
          Packed = T

        # End Removed Variable

        # Begin Removed Variable

          Name = mKeyEffArray [7] [100].keyShortTitle [24]
          Decl_type = char
          Usage = M
          Packed = T

        # End Removed Variable

        # Begin Removed Variable

          Name = mKeyEffArray [7] [100].keyPresent
          Decl_type = unsigned
          Usage = M
          Packed = T

        # End Removed Variable

        # Begin Removed Variable

          Name = mKeyEffArray.keyEffectDate
          Decl_type = Date_Type[7][100]
          Usage = M
          Frozen = T

        # End Removed Variable

        # Begin Removed Variable

          Name = mKeyEffArray [7] [100].valid
          Decl_type = unsigned
          Usage = M
          Packed = T

        # End Removed Variable

        # Begin Removed Variable

          Name = mKeyEffArray
          Decl_type = CKeyEffectData::Key_Table_Data_Type[7][100]
          Usage = M
          Frozen = T

        # End Removed Variable

        # Begin Removed Variable

          Name = CKeyEffectData::mInstance
          Decl_type = CKeyEffectData*
          Usage = G

        # End Removed Variable

        # Begin Removed Variable

          Name = mKeyEffArray [7] [100].keyPresent
          Decl_type = unsigned
          Usage = N
          Packed = T

        # End Removed Variable

        # Begin Removed Variable

          Name = mKeyEffArray [7] [100].keyEffectDay
          Decl_type = unsigned
          Usage = N
          Packed = T

        # End Removed Variable

        # Begin Removed Variable

          Name = mKeyEffArray [7] [100].keyEffectDate.Day
          Decl_type = unsigned
          Usage = N
          Packed = T

        # End Removed Variable

        # Begin Removed Variable

          Name = mKeyEffArray [7] [100].keyEffectDate.Month
          Decl_type = unsigned
          Usage = N
          Packed = T

        # End Removed Variable

        # Begin Removed Variable

          Name = mKeyEffArray [7] [100].keyEffectDate.Year
          Decl_type = unsigned
          Usage = N
          Packed = T

        # End Removed Variable

        # Begin Removed Variable

          Name = mKeyEffArray.keyEffectDate
          Decl_type = Date_Type[7][100]
          Usage = N
          Frozen = T

        # End Removed Variable

        # Begin Removed Variable

          Name = mKeyEffArray [7] [100].valid
          Decl_type = unsigned
          Usage = N
          Packed = T

        # End Removed Variable

        # Begin Removed Variable

          Name = CKeyEffectData::mInstance
          Decl_type = CKeyEffectData*
          Usage = H

        # End Removed Variable

      # Begin TC Stub

        Procedure = check4Null
  Overloading = Prototype

  # Begin Overloading
void *
char *
int
  # End Overloading

        # Begin TC Stub Return Value

          Name = %
          Type = bool
          Value = false

        # End TC Stub Return Value

      # Begin TC Stub TC Hit Count

        Setting = 3
        Specified = 1
      # End TC Stub TC Hit Count

      # End TC Stub

      # Begin TC Stub

        Procedure = CKeyEffectData::triggerMainKeyRolloverTask
  Overloading = Prototype

  # Begin Overloading
  # End Overloading

      # Begin TC Stub TC Hit Count

        Setting = 3
        Specified = 1
      # End TC Stub TC Hit Count

      # End TC Stub

      # Begin TC Stub

        Procedure = CKeyEffectData::rolloverEffectivity
  Overloading = Prototype

  # Begin Overloading
unsigned int
  # End Overloading

      # Begin TC Stub TC Hit Count

        Setting = 3
        Specified = 5
      # End TC Stub TC Hit Count

      # End TC Stub

      # Begin TC Stub

        Procedure = CKeyEffectData::getDayOfYear
  Overloading = Prototype

  # Begin Overloading
Date_Type
  # End Overloading

        # Begin TC Stub Return Value

          Name = %
          Type = UINT2
          Value = 65535

        # End TC Stub Return Value

      # End TC Stub

      # Begin TC Stub

        Procedure = CKeyEffectData::checkForRollover
  Overloading = Prototype

  # Begin Overloading
Write_Key_Effectivity_Data_Msg_Type *
  # End Overloading

      # Begin TC Stub TC Hit Count

        Setting = 3
        Specified = 1
      # End TC Stub TC Hit Count

      # End TC Stub

      # Begin TC Stub

        Procedure = CKeyEffectData::buildFilledBankMap
  Overloading = Prototype

  # Begin Overloading
  # End Overloading

      # Begin TC Stub TC Hit Count

        Setting = 3
        Specified = 1
      # End TC Stub TC Hit Count

      # End TC Stub

    # End Test Case

    # Begin Test Case

      File = E:\CVRi1\SD&D\Software\VLF_Software\Source\Projects\KgrVpApp\src\MGR\CKeyEffectData.cc
      Procedure = CKeyEffectData::setData
      Procedure Number = 120
      Member Of = 2
      Creation Date = Mar 30 2020 10:31:10
      Description = check4Null=F, numKeys=0,lastMsg=255

      # Begin Declarations

static Write_Key_Effectivity_Data_Msg_Type ldra_qq_lv_105;

static Date_Type s_date;

static Key_Effectivity_Data_Type s_key_eff; 

char str[20] = "Short_Title_String";
char* p_str = &str[0]; 

// of type char[MAX_SHORT_TITLE_LENGTH]
Short_Title_Type short_title;
strcpy(short_title, "Hello"); 
//Short_Title_Type* ptr = &short_title;    

s_date.Year = 2000;     //4-digits
s_date.Month = 1;       //1-12
s_date.Day = 1;         //1-31

s_key_eff.keyBankLoc = 1;
s_key_eff.keyBankSegLoc = 1;
s_key_eff.keyValid = 0; //0=false, 1=true
s_key_eff.reserved = 0;
s_key_eff.keyEffectDate = s_date;
s_key_eff.keyShortTitle[0] = NULL;

ldra_qq_lv_105.numKeys = 0;             // unsgined, 8 bit, 0-100, # of TEKs loaded in the msg
ldra_qq_lv_105.lastMsg = 255;             // unsigned, 8 bit, 0/1 flag, last msg in series if key msgs
ldra_qq_lv_105.reserved = 0;            // unsgined, 16 bit, 0 
ldra_qq_lv_105.KeyEffectData[1] = s_key_eff;
      # End Declarations

      # Begin Global Declarations
/*
 * Test case global declaration code will be placed here
 * Variables declared in this section are at global scope
 */
      # End Global Declarations

        # Begin Variable

          Name = mData
          Decl_type = Write_Key_Effectivity_Data_Msg_Type*
          Usage = Z
          Value = &ldra_qq_lv_105

        # End Variable

        # Begin Variable

          Name = mTEKRollover[0]
          Decl_type = bool
          Usage = M
          Value = true

        # End Variable

        # Begin Variable

          Name = mTEKRollover[1]
          Decl_type = bool
          Usage = M
          Value = true

        # End Variable

        # Begin Variable

          Name = mTEKRollover[2]
          Decl_type = bool
          Usage = M
          Value = true

        # End Variable

        # Begin Variable

          Name = mTEKRollover[3]
          Decl_type = bool
          Usage = M
          Value = true

        # End Variable

        # Begin Variable

          Name = mTEKRollover[4]
          Decl_type = bool
          Usage = M
          Value = true

        # End Variable

        # Begin Variable

          Name = mTEKRollover[0]
          Decl_type = bool
          Usage = N
          Value = true

        # End Variable

        # Begin Variable

          Name = mTEKRollover[1]
          Decl_type = bool
          Usage = N
          Value = true

        # End Variable

        # Begin Variable

          Name = mTEKRollover[2]
          Decl_type = bool
          Usage = N
          Value = true

        # End Variable

        # Begin Variable

          Name = mTEKRollover[3]
          Decl_type = bool
          Usage = N
          Value = true

        # End Variable

        # Begin Variable

          Name = mTEKRollover[4]
          Decl_type = bool
          Usage = N
          Value = true

        # End Variable

        # Begin Removed Variable

          Name = mData->KeyEffectData
          Decl_type = Key_Effectivity_Data_Type
          Usage = Z
          Frozen = T

        # End Removed Variable

        # Begin Removed Variable

          Name = mSearchKeyEffectArray [5].keyBankSegLoc
          Decl_type = unsigned
          Usage = M
          Packed = T

        # End Removed Variable

        # Begin Removed Variable

          Name = mSearchKeyEffectArray [5].keyBankLoc
          Decl_type = unsigned
          Usage = M
          Packed = T

        # End Removed Variable

        # Begin Removed Variable

          Name = mSearchKeyEffectArray [5]
          Decl_type = Key_Bank_Info_Type
          Usage = M
          Packed = T

        # End Removed Variable

        # Begin Removed Variable

          Name = mKeyEffArray [7] [100].keyShortTitle [24]
          Decl_type = char
          Usage = M
          Packed = T

        # End Removed Variable

        # Begin Removed Variable

          Name = mKeyEffArray [7] [100].keyPresent
          Decl_type = unsigned
          Usage = M
          Packed = T

        # End Removed Variable

        # Begin Removed Variable

          Name = mKeyEffArray.keyEffectDate
          Decl_type = Date_Type[7][100]
          Usage = M
          Frozen = T

        # End Removed Variable

        # Begin Removed Variable

          Name = mKeyEffArray [7] [100].valid
          Decl_type = unsigned
          Usage = M
          Packed = T

        # End Removed Variable

        # Begin Removed Variable

          Name = mKeyEffArray
          Decl_type = CKeyEffectData::Key_Table_Data_Type[7][100]
          Usage = M
          Frozen = T

        # End Removed Variable

        # Begin Removed Variable

          Name = CKeyEffectData::mInstance
          Decl_type = CKeyEffectData*
          Usage = G

        # End Removed Variable

        # Begin Removed Variable

          Name = mKeyEffArray [7] [100].keyPresent
          Decl_type = unsigned
          Usage = N
          Packed = T

        # End Removed Variable

        # Begin Removed Variable

          Name = mKeyEffArray [7] [100].keyEffectDay
          Decl_type = unsigned
          Usage = N
          Packed = T

        # End Removed Variable

        # Begin Removed Variable

          Name = mKeyEffArray [7] [100].keyEffectDate.Day
          Decl_type = unsigned
          Usage = N
          Packed = T

        # End Removed Variable

        # Begin Removed Variable

          Name = mKeyEffArray [7] [100].keyEffectDate.Month
          Decl_type = unsigned
          Usage = N
          Packed = T

        # End Removed Variable

        # Begin Removed Variable

          Name = mKeyEffArray [7] [100].keyEffectDate.Year
          Decl_type = unsigned
          Usage = N
          Packed = T

        # End Removed Variable

        # Begin Removed Variable

          Name = mKeyEffArray.keyEffectDate
          Decl_type = Date_Type[7][100]
          Usage = N
          Frozen = T

        # End Removed Variable

        # Begin Removed Variable

          Name = mKeyEffArray [7] [100].valid
          Decl_type = unsigned
          Usage = N
          Packed = T

        # End Removed Variable

        # Begin Removed Variable

          Name = CKeyEffectData::mInstance
          Decl_type = CKeyEffectData*
          Usage = H

        # End Removed Variable

      # Begin TC Stub

        Procedure = check4Null
  Overloading = Prototype

  # Begin Overloading
void *
char *
int
  # End Overloading

        # Begin TC Stub Return Value

          Name = %
          Type = bool
          Value = false

        # End TC Stub Return Value

      # Begin TC Stub TC Hit Count

        Setting = 3
        Specified = 1
      # End TC Stub TC Hit Count

      # End TC Stub

      # Begin TC Stub

        Procedure = CKeyEffectData::triggerMainKeyRolloverTask
  Overloading = Prototype

  # Begin Overloading
  # End Overloading

      # Begin TC Stub TC Hit Count

        Setting = 3
        Specified = 1
      # End TC Stub TC Hit Count

      # End TC Stub

      # Begin TC Stub

        Procedure = CKeyEffectData::rolloverEffectivity
  Overloading = Prototype

  # Begin Overloading
unsigned int
  # End Overloading

      # Begin TC Stub TC Hit Count

        Setting = 3
        Specified = 5
      # End TC Stub TC Hit Count

      # End TC Stub

      # Begin TC Stub

        Procedure = CKeyEffectData::getDayOfYear
  Overloading = Prototype

  # Begin Overloading
Date_Type
  # End Overloading

        # Begin TC Stub Return Value

          Name = %
          Type = UINT2
          Value = 65535

        # End TC Stub Return Value

      # End TC Stub

      # Begin TC Stub

        Procedure = CKeyEffectData::checkForRollover
  Overloading = Prototype

  # Begin Overloading
Write_Key_Effectivity_Data_Msg_Type *
  # End Overloading

      # Begin TC Stub TC Hit Count

        Setting = 3
        Specified = 1
      # End TC Stub TC Hit Count

      # End TC Stub

      # Begin TC Stub

        Procedure = CKeyEffectData::buildFilledBankMap
  Overloading = Prototype

  # Begin Overloading
  # End Overloading

      # Begin TC Stub TC Hit Count

        Setting = 3
        Specified = 1
      # End TC Stub TC Hit Count

      # End TC Stub

    # End Test Case

    # Begin Test Case

      File = E:\CVRi1\SD&D\Software\VLF_Software\Source\Projects\KgrVpApp\src\MGR\CKeyEffectData.cc
      Procedure = CKeyEffectData::setData
      Procedure Number = 120
      Member Of = 2
      Creation Date = Mar 30 2020 10:31:10
      Description = check4Null=F, numKeys=1,lastMsg=0, key-0 valid

      # Begin Declarations

static Write_Key_Effectivity_Data_Msg_Type ldra_qq_lv_105;
static Date_Type s_date;
static Key_Effectivity_Data_Type s_key_eff; 

// of type char[MAX_SHORT_TITLE_LENGTH]
Short_Title_Type short_title;
strcpy(short_title, "Hello"); 
//Short_Title_Type* ptr = &short_title;    

s_date.Year = 2000;     //4-digits
s_date.Month = 1;       //1-12
s_date.Day = 1;         //1-31

s_key_eff.keyBankLoc = 1;
s_key_eff.keyBankSegLoc = 1;
s_key_eff.keyValid = 1; //0=false, 1=true
s_key_eff.reserved = 0;
s_key_eff.keyEffectDate = s_date;
s_key_eff.keyShortTitle[0] = NULL;

ldra_qq_lv_105.numKeys = 1;             // unsgined, 8 bit, 0-100, # of TEKs loaded in the msg
ldra_qq_lv_105.lastMsg = 0;             // unsigned, 8 bit, 0/1 flag, last msg in series if key msgs
ldra_qq_lv_105.reserved = 0;            // unsgined, 16 bit, 0 
ldra_qq_lv_105.KeyEffectData[0] = s_key_eff;
      # End Declarations

      # Begin Global Declarations
/*
 * Test case global declaration code will be placed here
 * Variables declared in this section are at global scope
 */
      # End Global Declarations

        # Begin Variable

          Name = mData
          Decl_type = Write_Key_Effectivity_Data_Msg_Type*
          Usage = Z
          Value = &ldra_qq_lv_105

        # End Variable

        # Begin Variable

          Name = mTEKRollover[0]
          Decl_type = bool
          Usage = M
          Value = true

        # End Variable

        # Begin Variable

          Name = mTEKRollover[1]
          Decl_type = bool
          Usage = M
          Value = true

        # End Variable

        # Begin Variable

          Name = mTEKRollover[2]
          Decl_type = bool
          Usage = M
          Value = true

        # End Variable

        # Begin Variable

          Name = mTEKRollover[3]
          Decl_type = bool
          Usage = M
          Value = true

        # End Variable

        # Begin Variable

          Name = mTEKRollover[4]
          Decl_type = bool
          Usage = M
          Value = true

        # End Variable

        # Begin Variable

          Name = mTEKRollover[0]
          Decl_type = bool
          Usage = N
          Value = true

        # End Variable

        # Begin Variable

          Name = mTEKRollover[1]
          Decl_type = bool
          Usage = N
          Value = true

        # End Variable

        # Begin Variable

          Name = mTEKRollover[2]
          Decl_type = bool
          Usage = N
          Value = true

        # End Variable

        # Begin Variable

          Name = mTEKRollover[3]
          Decl_type = bool
          Usage = N
          Value = true

        # End Variable

        # Begin Variable

          Name = mTEKRollover[4]
          Decl_type = bool
          Usage = N
          Value = true

        # End Variable

        # Begin Variable

          Name = mKeyEffArray[0][0].valid
          Decl_type = unsigned
          Usage = N
          Value = 1

        # End Variable

        # Begin Variable

          Name = mKeyEffArray[0][0].keyEffectDate.Year
          Decl_type = unsigned
          Usage = N
          Value = 2000

        # End Variable

        # Begin Variable

          Name = mKeyEffArray[0][0].keyEffectDate.Month
          Decl_type = unsigned
          Usage = N
          Value = 1

        # End Variable

        # Begin Variable

          Name = mKeyEffArray[0][0].keyEffectDate.Day
          Decl_type = unsigned
          Usage = N
          Value = 1

        # End Variable

        # Begin Variable

          Name = mKeyEffArray[0][0].keyEffectDay
          Decl_type = unsigned
          Usage = N
          Value = 1

        # End Variable

        # Begin Variable

          Name = mKeyEffArray[0][0].keyShortTitle[0]
          Decl_type = char
          Usage = N
          Value = NULL

        # End Variable

        # Begin Removed Variable

          Name = mKeyEffArray[0][0].keyEffectData
          Decl_type = Date_Type
          Usage = N
          Value = *** Suspended ***

        # End Removed Variable

        # Begin Removed Variable

          Name = ldra_qq_lv_105->KeyEffectData[0].keyBankSegLoc
          Decl_type = unsigned
          Usage = O
          Value = 1

        # End Removed Variable

        # Begin Removed Variable

          Name = ldra_qq_lv_105->KeyEffectData[0].keyBankLoc
          Decl_type = unsigned
          Usage = O
          Value = 1

        # End Removed Variable

        # Begin Removed Variable

          Name = mData->KeyEffectData
          Decl_type = Key_Effectivity_Data_Type
          Usage = Z
          Frozen = T

        # End Removed Variable

        # Begin Removed Variable

          Name = mSearchKeyEffectArray [5].keyBankSegLoc
          Decl_type = unsigned
          Usage = M
          Packed = T

        # End Removed Variable

        # Begin Removed Variable

          Name = mSearchKeyEffectArray [5].keyBankLoc
          Decl_type = unsigned
          Usage = M
          Packed = T

        # End Removed Variable

        # Begin Removed Variable

          Name = mSearchKeyEffectArray [5]
          Decl_type = Key_Bank_Info_Type
          Usage = M
          Packed = T

        # End Removed Variable

        # Begin Removed Variable

          Name = mKeyEffArray [7] [100].keyShortTitle [24]
          Decl_type = char
          Usage = M
          Packed = T

        # End Removed Variable

        # Begin Removed Variable

          Name = mKeyEffArray [7] [100].keyPresent
          Decl_type = unsigned
          Usage = M
          Packed = T

        # End Removed Variable

        # Begin Removed Variable

          Name = mKeyEffArray.keyEffectDate
          Decl_type = Date_Type[7][100]
          Usage = M
          Frozen = T

        # End Removed Variable

        # Begin Removed Variable

          Name = mKeyEffArray [7] [100].valid
          Decl_type = unsigned
          Usage = M
          Packed = T

        # End Removed Variable

        # Begin Removed Variable

          Name = mKeyEffArray
          Decl_type = CKeyEffectData::Key_Table_Data_Type[7][100]
          Usage = M
          Frozen = T

        # End Removed Variable

        # Begin Removed Variable

          Name = CKeyEffectData::mInstance
          Decl_type = CKeyEffectData*
          Usage = G

        # End Removed Variable

        # Begin Removed Variable

          Name = mKeyEffArray [7] [100].keyPresent
          Decl_type = unsigned
          Usage = N
          Packed = T

        # End Removed Variable

        # Begin Removed Variable

          Name = mKeyEffArray [7] [100].keyEffectDay
          Decl_type = unsigned
          Usage = N
          Packed = T

        # End Removed Variable

        # Begin Removed Variable

          Name = mKeyEffArray [7] [100].keyEffectDate.Day
          Decl_type = unsigned
          Usage = N
          Packed = T

        # End Removed Variable

        # Begin Removed Variable

          Name = mKeyEffArray [7] [100].keyEffectDate.Month
          Decl_type = unsigned
          Usage = N
          Packed = T

        # End Removed Variable

        # Begin Removed Variable

          Name = mKeyEffArray [7] [100].keyEffectDate.Year
          Decl_type = unsigned
          Usage = N
          Packed = T

        # End Removed Variable

        # Begin Removed Variable

          Name = mKeyEffArray.keyEffectDate
          Decl_type = Date_Type[7][100]
          Usage = N
          Frozen = T

        # End Removed Variable

        # Begin Removed Variable

          Name = mKeyEffArray [7] [100].valid
          Decl_type = unsigned
          Usage = N
          Packed = T

        # End Removed Variable

        # Begin Removed Variable

          Name = CKeyEffectData::mInstance
          Decl_type = CKeyEffectData*
          Usage = H

        # End Removed Variable

      # Begin TC Stub

        Procedure = check4Null
  Overloading = Prototype

  # Begin Overloading
void *
char *
int
  # End Overloading

        # Begin TC Stub Return Value

          Name = %
          Type = bool
          Value = false

        # End TC Stub Return Value

      # Begin TC Stub TC Hit Count

        Setting = 3
        Specified = 1
      # End TC Stub TC Hit Count

      # End TC Stub

      # Begin TC Stub

        Procedure = CKeyEffectData::triggerMainKeyRolloverTask
  Overloading = Prototype

  # Begin Overloading
  # End Overloading

      # Begin TC Stub TC Hit Count

        Setting = 1
        Specified = 1
      # End TC Stub TC Hit Count

      # End TC Stub

      # Begin TC Stub

        Procedure = CKeyEffectData::rolloverEffectivity
  Overloading = Prototype

  # Begin Overloading
unsigned int
  # End Overloading

      # Begin TC Stub TC Hit Count

        Setting = 3
        Specified = 5
      # End TC Stub TC Hit Count

      # End TC Stub

      # Begin TC Stub

        Procedure = CKeyEffectData::getDayOfYear
  Overloading = Prototype

  # Begin Overloading
Date_Type
  # End Overloading

        # Begin TC Stub Return Value

          Name = %
          Type = UINT2
          Value = 1

        # End TC Stub Return Value

      # End TC Stub

      # Begin TC Stub

        Procedure = CKeyEffectData::checkForRollover
  Overloading = Prototype

  # Begin Overloading
Write_Key_Effectivity_Data_Msg_Type *
  # End Overloading

      # Begin TC Stub TC Hit Count

        Setting = 3
        Specified = 1
      # End TC Stub TC Hit Count

      # End TC Stub

      # Begin TC Stub

        Procedure = CKeyEffectData::buildFilledBankMap
  Overloading = Prototype

  # Begin Overloading
  # End Overloading

      # Begin TC Stub TC Hit Count

        Setting = 3
        Specified = 1
      # End TC Stub TC Hit Count

      # End TC Stub

    # End Test Case

    # Begin Test Case

      File = E:\CVRi1\SD&D\Software\VLF_Software\Source\Projects\KgrVpApp\src\MGR\CKeyEffectData.cc
      Procedure = CKeyEffectData::setData
      Procedure Number = 120
      Member Of = 2
      Creation Date = Mar 30 2020 10:31:10
      Description = check4Null=F, numKeys=2,lastMsg=0, key-0 invalid, key-1 valid

      # Begin Declarations

static Write_Key_Effectivity_Data_Msg_Type ldra_qq_lv_105;
static Date_Type s_date[2];
static Key_Effectivity_Data_Type s_key_eff[2]; 

s_date[0].Year = 2000;     //4-digits
s_date[0].Month = 1;       //1-12
s_date[0].Day = 1;         //1-31
s_date[1].Year = 2001;     //4-digits
s_date[1].Month = 2;       //1-12
s_date[1].Day = 3;         //1-31

s_key_eff[0].keyBankLoc = 1;
s_key_eff[0].keyBankSegLoc = 1;
s_key_eff[0].keyValid = 0; //0=false, 1=true
s_key_eff[0].reserved = 0;
s_key_eff[0].keyEffectDate = s_date[0];
s_key_eff[0].keyShortTitle[0] = NULL;
s_key_eff[1].keyBankLoc = 1;
s_key_eff[1].keyBankSegLoc = 1;
s_key_eff[1].keyValid = 1; //0=false, 1=true
s_key_eff[1].reserved = 0;
s_key_eff[1].keyEffectDate = s_date[1];
s_key_eff[1].keyShortTitle[1] = NULL;

ldra_qq_lv_105.numKeys = 2;             // unsgined, 8 bit, 0-100, # of TEKs loaded in the msg
ldra_qq_lv_105.lastMsg = 0;             // unsigned, 8 bit, 0/1 flag, last msg in series if key msgs
ldra_qq_lv_105.reserved = 0;            // unsgined, 16 bit, 0 
ldra_qq_lv_105.KeyEffectData[0] = s_key_eff[0];
ldra_qq_lv_105.KeyEffectData[1] = s_key_eff[1];
      # End Declarations

      # Begin Global Declarations
/*
 * Test case global declaration code will be placed here
 * Variables declared in this section are at global scope
 */
      # End Global Declarations

        # Begin Variable

          Name = mData
          Decl_type = Write_Key_Effectivity_Data_Msg_Type*
          Usage = Z
          Value = &ldra_qq_lv_105

        # End Variable

        # Begin Variable

          Name = mTEKRollover[0]
          Decl_type = bool
          Usage = M
          Value = true

        # End Variable

        # Begin Variable

          Name = mTEKRollover[1]
          Decl_type = bool
          Usage = M
          Value = true

        # End Variable

        # Begin Variable

          Name = mTEKRollover[2]
          Decl_type = bool
          Usage = M
          Value = true

        # End Variable

        # Begin Variable

          Name = mTEKRollover[3]
          Decl_type = bool
          Usage = M
          Value = true

        # End Variable

        # Begin Variable

          Name = mTEKRollover[4]
          Decl_type = bool
          Usage = M
          Value = true

        # End Variable

        # Begin Variable

          Name = mTEKRollover[0]
          Decl_type = bool
          Usage = N
          Value = true

        # End Variable

        # Begin Variable

          Name = mTEKRollover[1]
          Decl_type = bool
          Usage = N
          Value = true

        # End Variable

        # Begin Variable

          Name = mTEKRollover[2]
          Decl_type = bool
          Usage = N
          Value = true

        # End Variable

        # Begin Variable

          Name = mTEKRollover[3]
          Decl_type = bool
          Usage = N
          Value = true

        # End Variable

        # Begin Variable

          Name = mTEKRollover[4]
          Decl_type = bool
          Usage = N
          Value = true

        # End Variable

        # Begin Variable

          Name = mKeyEffArray[0][0].valid
          Decl_type = unsigned
          Usage = N
          Value = 1

        # End Variable

        # Begin Variable

          Name = mKeyEffArray[0][0].keyEffectDate.Year
          Decl_type = unsigned
          Usage = N
          Value = 2001

        # End Variable

        # Begin Variable

          Name = mKeyEffArray[0][0].keyEffectDate.Month
          Decl_type = unsigned
          Usage = N
          Value = 2

        # End Variable

        # Begin Variable

          Name = mKeyEffArray[0][0].keyEffectDate.Day
          Decl_type = unsigned
          Usage = N
          Value = 3

        # End Variable

        # Begin Variable

          Name = mKeyEffArray[0][0].keyEffectDay
          Decl_type = unsigned
          Usage = N
          Value = 34

        # End Variable

        # Begin Variable

          Name = mKeyEffArray[0][0].keyShortTitle[0]
          Decl_type = char
          Usage = N
          Value = NULL

        # End Variable

        # Begin Removed Variable

          Name = mKeyEffArray[0][0].keyEffectData
          Decl_type = Date_Type
          Usage = N
          Value = *** Suspended ***

        # End Removed Variable

        # Begin Removed Variable

          Name = ldra_qq_lv_105->KeyEffectData[0].keyBankSegLoc
          Decl_type = unsigned
          Usage = O
          Value = 1

        # End Removed Variable

        # Begin Removed Variable

          Name = ldra_qq_lv_105->KeyEffectData[0].keyBankLoc
          Decl_type = unsigned
          Usage = O
          Value = 1

        # End Removed Variable

        # Begin Removed Variable

          Name = mData->KeyEffectData
          Decl_type = Key_Effectivity_Data_Type
          Usage = Z
          Frozen = T

        # End Removed Variable

        # Begin Removed Variable

          Name = mSearchKeyEffectArray [5].keyBankSegLoc
          Decl_type = unsigned
          Usage = M
          Packed = T

        # End Removed Variable

        # Begin Removed Variable

          Name = mSearchKeyEffectArray [5].keyBankLoc
          Decl_type = unsigned
          Usage = M
          Packed = T

        # End Removed Variable

        # Begin Removed Variable

          Name = mSearchKeyEffectArray [5]
          Decl_type = Key_Bank_Info_Type
          Usage = M
          Packed = T

        # End Removed Variable

        # Begin Removed Variable

          Name = mKeyEffArray [7] [100].keyShortTitle [24]
          Decl_type = char
          Usage = M
          Packed = T

        # End Removed Variable

        # Begin Removed Variable

          Name = mKeyEffArray [7] [100].keyPresent
          Decl_type = unsigned
          Usage = M
          Packed = T

        # End Removed Variable

        # Begin Removed Variable

          Name = mKeyEffArray.keyEffectDate
          Decl_type = Date_Type[7][100]
          Usage = M
          Frozen = T

        # End Removed Variable

        # Begin Removed Variable

          Name = mKeyEffArray [7] [100].valid
          Decl_type = unsigned
          Usage = M
          Packed = T

        # End Removed Variable

        # Begin Removed Variable

          Name = mKeyEffArray
          Decl_type = CKeyEffectData::Key_Table_Data_Type[7][100]
          Usage = M
          Frozen = T

        # End Removed Variable

        # Begin Removed Variable

          Name = CKeyEffectData::mInstance
          Decl_type = CKeyEffectData*
          Usage = G

        # End Removed Variable

        # Begin Removed Variable

          Name = mKeyEffArray [7] [100].keyPresent
          Decl_type = unsigned
          Usage = N
          Packed = T

        # End Removed Variable

        # Begin Removed Variable

          Name = mKeyEffArray [7] [100].keyEffectDay
          Decl_type = unsigned
          Usage = N
          Packed = T

        # End Removed Variable

        # Begin Removed Variable

          Name = mKeyEffArray [7] [100].keyEffectDate.Day
          Decl_type = unsigned
          Usage = N
          Packed = T

        # End Removed Variable

        # Begin Removed Variable

          Name = mKeyEffArray [7] [100].keyEffectDate.Month
          Decl_type = unsigned
          Usage = N
          Packed = T

        # End Removed Variable

        # Begin Removed Variable

          Name = mKeyEffArray [7] [100].keyEffectDate.Year
          Decl_type = unsigned
          Usage = N
          Packed = T

        # End Removed Variable

        # Begin Removed Variable

          Name = mKeyEffArray.keyEffectDate
          Decl_type = Date_Type[7][100]
          Usage = N
          Frozen = T

        # End Removed Variable

        # Begin Removed Variable

          Name = mKeyEffArray [7] [100].valid
          Decl_type = unsigned
          Usage = N
          Packed = T

        # End Removed Variable

        # Begin Removed Variable

          Name = CKeyEffectData::mInstance
          Decl_type = CKeyEffectData*
          Usage = H

        # End Removed Variable

      # Begin TC Stub

        Procedure = check4Null
  Overloading = Prototype

  # Begin Overloading
void *
char *
int
  # End Overloading

        # Begin TC Stub Return Value

          Name = %
          Type = bool
          Value = false

        # End TC Stub Return Value

      # Begin TC Stub TC Hit Count

        Setting = 3
        Specified = 1
      # End TC Stub TC Hit Count

      # End TC Stub

      # Begin TC Stub

        Procedure = CKeyEffectData::triggerMainKeyRolloverTask
  Overloading = Prototype

  # Begin Overloading
  # End Overloading

      # Begin TC Stub TC Hit Count

        Setting = 1
        Specified = 1
      # End TC Stub TC Hit Count

      # End TC Stub

      # Begin TC Stub

        Procedure = CKeyEffectData::rolloverEffectivity
  Overloading = Prototype

  # Begin Overloading
unsigned int
  # End Overloading

      # Begin TC Stub TC Hit Count

        Setting = 3
        Specified = 5
      # End TC Stub TC Hit Count

      # End TC Stub

      # Begin TC Stub

        Procedure = CKeyEffectData::getDayOfYear
  Overloading = Prototype

  # Begin Overloading
Date_Type
  # End Overloading

        # Begin TC Stub Return Value

          Name = %
          Type = UINT2
          Value = 34

        # End TC Stub Return Value

      # End TC Stub

      # Begin TC Stub

        Procedure = CKeyEffectData::checkForRollover
  Overloading = Prototype

  # Begin Overloading
Write_Key_Effectivity_Data_Msg_Type *
  # End Overloading

      # Begin TC Stub TC Hit Count

        Setting = 3
        Specified = 1
      # End TC Stub TC Hit Count

      # End TC Stub

      # Begin TC Stub

        Procedure = CKeyEffectData::buildFilledBankMap
  Overloading = Prototype

  # Begin Overloading
  # End Overloading

      # Begin TC Stub TC Hit Count

        Setting = 3
        Specified = 1
      # End TC Stub TC Hit Count

      # End TC Stub

    # End Test Case

    # Begin Test Case

      File = E:\CVRi1\SD&D\Software\VLF_Software\Source\Projects\KgrVpApp\src\MGR\CKeyEffectData.cc
      Procedure = CKeyEffectData::setData
      Procedure Number = 120
      Member Of = 2
      Creation Date = Mar 30 2020 10:31:10
      Description = check4Null=F, numKeys=100,lastMsg=0, key-0 thru key-99 valid

      # Begin Declarations

static const unsigned short NUM_KEYS = 100;
static Write_Key_Effectivity_Data_Msg_Type ldra_qq_lv_105;
static Date_Type s_date;
static Key_Effectivity_Data_Type s_key_eff[NUM_KEYS]; 

s_date.Year = 2020;     //4-digits
s_date.Month = 3;       //1-12
s_date.Day = 31;         //1-31

for ( int idx = 0; idx < NUM_KEYS; idx++ )
{
  s_key_eff[idx].keyBankLoc = MEDLEY_BANK1;
  s_key_eff[idx].keyBankSegLoc = idx+1;
  s_key_eff[idx].keyValid = 1; //0=false, 1=true
  s_key_eff[idx].reserved = 0;
  s_key_eff[idx].keyEffectDate = s_date;
  s_key_eff[idx].keyShortTitle[0] = NULL;
}

ldra_qq_lv_105.numKeys = NUM_KEYS;      // unsgined, 8 bit, 0-100, # of TEKs loaded in the msg
ldra_qq_lv_105.lastMsg = 0;             // unsigned, 8 bit, 0/1 flag, last msg in series if key msgs
ldra_qq_lv_105.reserved = 0;            // unsigned, 16 bit, 0 

for ( int idx = 0; idx < NUM_KEYS; idx++ )
{
  ldra_qq_lv_105.KeyEffectData[idx] = s_key_eff[idx];
}
      # End Declarations

      # Begin Global Declarations
/*
 * Test case global declaration code will be placed here
 * Variables declared in this section are at global scope
 */
      # End Global Declarations

        # Begin Variable

          Name = mData
          Decl_type = Write_Key_Effectivity_Data_Msg_Type*
          Usage = Z
          Value = &ldra_qq_lv_105

        # End Variable

        # Begin Variable

          Name = mTEKRollover[0]
          Decl_type = bool
          Usage = M
          Value = true

        # End Variable

        # Begin Variable

          Name = mTEKRollover[1]
          Decl_type = bool
          Usage = M
          Value = true

        # End Variable

        # Begin Variable

          Name = mTEKRollover[2]
          Decl_type = bool
          Usage = M
          Value = true

        # End Variable

        # Begin Variable

          Name = mTEKRollover[3]
          Decl_type = bool
          Usage = M
          Value = true

        # End Variable

        # Begin Variable

          Name = mTEKRollover[4]
          Decl_type = bool
          Usage = M
          Value = true

        # End Variable

        # Begin Variable

          Name = mTEKRollover[0]
          Decl_type = bool
          Usage = N
          Value = true

        # End Variable

        # Begin Variable

          Name = mTEKRollover[1]
          Decl_type = bool
          Usage = N
          Value = true

        # End Variable

        # Begin Variable

          Name = mTEKRollover[2]
          Decl_type = bool
          Usage = N
          Value = true

        # End Variable

        # Begin Variable

          Name = mTEKRollover[3]
          Decl_type = bool
          Usage = N
          Value = true

        # End Variable

        # Begin Variable

          Name = mTEKRollover[4]
          Decl_type = bool
          Usage = N
          Value = true

        # End Variable

        # Begin Variable

          Name = mKeyEffArray[3][0].valid
          Decl_type = unsigned
          Usage = N
          Value = 1

        # End Variable

        # Begin Variable

          Name = mKeyEffArray[3][0].keyEffectDate.Year
          Decl_type = unsigned
          Usage = N
          Value = 2020

        # End Variable

        # Begin Variable

          Name = mKeyEffArray[3][0].keyEffectDate.Month
          Decl_type = unsigned
          Usage = N
          Value = 3

        # End Variable

        # Begin Variable

          Name = mKeyEffArray[3][0].keyEffectDate.Day
          Decl_type = unsigned
          Usage = N
          Value = 31

        # End Variable

        # Begin Variable

          Name = mKeyEffArray[3][0].keyEffectDay
          Decl_type = unsigned
          Usage = N
          Value = 91

        # End Variable

        # Begin Variable

          Name = mKeyEffArray[3][0].keyShortTitle[0]
          Decl_type = char
          Usage = N
          Value = NULL

        # End Variable

        # Begin Variable

          Name = mKeyEffArray[3][99].valid
          Decl_type = unsigned
          Usage = N
          Value = 1

        # End Variable

        # Begin Variable

          Name = mKeyEffArray[3][99].keyEffectDate.Year
          Decl_type = unsigned
          Usage = N
          Value = 2020

        # End Variable

        # Begin Variable

          Name = mKeyEffArray[3][99].keyEffectDate.Month
          Decl_type = unsigned
          Usage = N
          Value = 3

        # End Variable

        # Begin Variable

          Name = mKeyEffArray[3][99].keyEffectDate.Day
          Decl_type = unsigned
          Usage = N
          Value = 31

        # End Variable

        # Begin Variable

          Name = mKeyEffArray[3][99].keyShortTitle[0]
          Decl_type = char
          Usage = N
          Value = NULL

        # End Variable

        # Begin Removed Variable

          Name = mKeyEffArray[0][0].keyEffectData
          Decl_type = Date_Type
          Usage = N
          Value = *** Suspended ***

        # End Removed Variable

        # Begin Removed Variable

          Name = ldra_qq_lv_105->KeyEffectData[0].keyBankSegLoc
          Decl_type = unsigned
          Usage = O
          Value = 1

        # End Removed Variable

        # Begin Removed Variable

          Name = ldra_qq_lv_105->KeyEffectData[0].keyBankLoc
          Decl_type = unsigned
          Usage = O
          Value = 1

        # End Removed Variable

        # Begin Removed Variable

          Name = mData->KeyEffectData
          Decl_type = Key_Effectivity_Data_Type
          Usage = Z
          Frozen = T

        # End Removed Variable

        # Begin Removed Variable

          Name = mSearchKeyEffectArray [5].keyBankSegLoc
          Decl_type = unsigned
          Usage = M
          Packed = T

        # End Removed Variable

        # Begin Removed Variable

          Name = mSearchKeyEffectArray [5].keyBankLoc
          Decl_type = unsigned
          Usage = M
          Packed = T

        # End Removed Variable

        # Begin Removed Variable

          Name = mSearchKeyEffectArray [5]
          Decl_type = Key_Bank_Info_Type
          Usage = M
          Packed = T

        # End Removed Variable

        # Begin Removed Variable

          Name = mKeyEffArray [7] [100].keyShortTitle [24]
          Decl_type = char
          Usage = M
          Packed = T

        # End Removed Variable

        # Begin Removed Variable

          Name = mKeyEffArray [7] [100].keyPresent
          Decl_type = unsigned
          Usage = M
          Packed = T

        # End Removed Variable

        # Begin Removed Variable

          Name = mKeyEffArray.keyEffectDate
          Decl_type = Date_Type[7][100]
          Usage = M
          Frozen = T

        # End Removed Variable

        # Begin Removed Variable

          Name = mKeyEffArray [7] [100].valid
          Decl_type = unsigned
          Usage = M
          Packed = T

        # End Removed Variable

        # Begin Removed Variable

          Name = mKeyEffArray
          Decl_type = CKeyEffectData::Key_Table_Data_Type[7][100]
          Usage = M
          Frozen = T

        # End Removed Variable

        # Begin Removed Variable

          Name = CKeyEffectData::mInstance
          Decl_type = CKeyEffectData*
          Usage = G

        # End Removed Variable

        # Begin Removed Variable

          Name = mKeyEffArray [7] [100].keyPresent
          Decl_type = unsigned
          Usage = N
          Packed = T

        # End Removed Variable

        # Begin Removed Variable

          Name = mKeyEffArray [7] [100].keyEffectDay
          Decl_type = unsigned
          Usage = N
          Packed = T

        # End Removed Variable

        # Begin Removed Variable

          Name = mKeyEffArray [7] [100].keyEffectDate.Day
          Decl_type = unsigned
          Usage = N
          Packed = T

        # End Removed Variable

        # Begin Removed Variable

          Name = mKeyEffArray [7] [100].keyEffectDate.Month
          Decl_type = unsigned
          Usage = N
          Packed = T

        # End Removed Variable

        # Begin Removed Variable

          Name = mKeyEffArray [7] [100].keyEffectDate.Year
          Decl_type = unsigned
          Usage = N
          Packed = T

        # End Removed Variable

        # Begin Removed Variable

          Name = mKeyEffArray.keyEffectDate
          Decl_type = Date_Type[7][100]
          Usage = N
          Frozen = T

        # End Removed Variable

        # Begin Removed Variable

          Name = mKeyEffArray [7] [100].valid
          Decl_type = unsigned
          Usage = N
          Packed = T

        # End Removed Variable

        # Begin Removed Variable

          Name = CKeyEffectData::mInstance
          Decl_type = CKeyEffectData*
          Usage = H

        # End Removed Variable

      # Begin TC Stub

        Procedure = check4Null
  Overloading = Prototype

  # Begin Overloading
void *
char *
int
  # End Overloading

        # Begin TC Stub Return Value

          Name = %
          Type = bool
          Value = false

        # End TC Stub Return Value

      # Begin TC Stub TC Hit Count

        Setting = 3
        Specified = 1
      # End TC Stub TC Hit Count

      # End TC Stub

      # Begin TC Stub

        Procedure = CKeyEffectData::triggerMainKeyRolloverTask
  Overloading = Prototype

  # Begin Overloading
  # End Overloading

      # Begin TC Stub TC Hit Count

        Setting = 1
        Specified = 1
      # End TC Stub TC Hit Count

      # End TC Stub

      # Begin TC Stub

        Procedure = CKeyEffectData::rolloverEffectivity
  Overloading = Prototype

  # Begin Overloading
unsigned int
  # End Overloading

      # Begin TC Stub TC Hit Count

        Setting = 3
        Specified = 5
      # End TC Stub TC Hit Count

      # End TC Stub

      # Begin TC Stub

        Procedure = CKeyEffectData::getDayOfYear
  Overloading = Prototype

  # Begin Overloading
Date_Type
  # End Overloading

        # Begin TC Stub Return Value

          Name = %
          Type = UINT2
          Value = 91

        # End TC Stub Return Value

      # End TC Stub

      # Begin TC Stub

        Procedure = CKeyEffectData::checkForRollover
  Overloading = Prototype

  # Begin Overloading
Write_Key_Effectivity_Data_Msg_Type *
  # End Overloading

      # Begin TC Stub TC Hit Count

        Setting = 3
        Specified = 1
      # End TC Stub TC Hit Count

      # End TC Stub

      # Begin TC Stub

        Procedure = CKeyEffectData::buildFilledBankMap
  Overloading = Prototype

  # Begin Overloading
  # End Overloading

      # Begin TC Stub TC Hit Count

        Setting = 3
        Specified = 1
      # End TC Stub TC Hit Count

      # End TC Stub

    # End Test Case

    # Begin Test Case

      File = E:\CVRi1\SD&D\Software\VLF_Software\Source\Projects\KgrVpApp\src\MGR\CKeyEffectData.cc
      Procedure = CKeyEffectData::setData
      Procedure Number = 120
      Member Of = 2
      Creation Date = Mar 30 2020 10:31:10
      Description = check4Null=F, numKeys=100,lastMsg=0, keys alternating invalid & valid, keyPresent=0

      # Begin Declarations

static const unsigned short NUM_KEYS = 100;
static Write_Key_Effectivity_Data_Msg_Type ldra_qq_lv_105;
static Date_Type s_date;
static Key_Effectivity_Data_Type s_key_eff[NUM_KEYS]; 

Short_Title_Type stitle = "Short";

s_date.Year = 2020;     //4-digits
s_date.Month = 1;       //1-12
s_date.Day = 2;         //1-31

s_key_eff[0].keyValid = 1;

for ( int idx = 0; idx < NUM_KEYS; idx++ )
{
  s_key_eff[idx].keyBankLoc = MEDLEY_BANK1;
  s_key_eff[idx].keyBankSegLoc = idx+1;
  if ( idx % 2 == 0 )
  {
    s_key_eff[idx].keyValid = 0; //0=false, 1=true
  }
  else
  { 
    s_key_eff[idx].keyValid = 1; //0=false, 1=true
  }
  s_key_eff[idx].reserved = 0;
  s_key_eff[idx].keyEffectDate = s_date;
  memcpy(s_key_eff[idx].keyShortTitle, stitle, sizeof(stitle));  

}

ldra_qq_lv_105.numKeys = NUM_KEYS;      // unsgined, 8 bit, 0-100, # of TEKs loaded in the msg
ldra_qq_lv_105.lastMsg = 0;             // unsigned, 8 bit, 0/1 flag, last msg in series if key msgs
ldra_qq_lv_105.reserved = 0;            // unsigned, 16 bit, 0 

for ( int idx = 0; idx < NUM_KEYS; idx++ )
{
  ldra_qq_lv_105.KeyEffectData[idx] = s_key_eff[idx];
  ldra_qq_lv_105.KeyEffectData[idx] = s_key_eff[idx];
}

// clear array
memset(CKeyEffectData::mInstance->mKeyEffArray, 0, sizeof(CKeyEffectData::mInstance->mKeyEffArray));
      # End Declarations

      # Begin Global Declarations
/*
 * Test case global declaration code will be placed here
 * Variables declared in this section are at global scope
 */
      # End Global Declarations

        # Begin Variable

          Name = mData
          Decl_type = Write_Key_Effectivity_Data_Msg_Type*
          Usage = Z
          Value = &ldra_qq_lv_105

        # End Variable

        # Begin Variable

          Name = mTEKRollover[0]
          Decl_type = bool
          Usage = M
          Value = true

        # End Variable

        # Begin Variable

          Name = mTEKRollover[1]
          Decl_type = bool
          Usage = M
          Value = true

        # End Variable

        # Begin Variable

          Name = mTEKRollover[2]
          Decl_type = bool
          Usage = M
          Value = true

        # End Variable

        # Begin Variable

          Name = mTEKRollover[3]
          Decl_type = bool
          Usage = M
          Value = true

        # End Variable

        # Begin Variable

          Name = mTEKRollover[4]
          Decl_type = bool
          Usage = M
          Value = true

        # End Variable

        # Begin Variable

          Name = mTEKRollover[0]
          Decl_type = bool
          Usage = N
          Value = true

        # End Variable

        # Begin Variable

          Name = mTEKRollover[1]
          Decl_type = bool
          Usage = N
          Value = true

        # End Variable

        # Begin Variable

          Name = mTEKRollover[2]
          Decl_type = bool
          Usage = N
          Value = true

        # End Variable

        # Begin Variable

          Name = mTEKRollover[3]
          Decl_type = bool
          Usage = N
          Value = true

        # End Variable

        # Begin Variable

          Name = mTEKRollover[4]
          Decl_type = bool
          Usage = N
          Value = true

        # End Variable

        # Begin Variable

          Name = mKeyEffArray[3][0].valid
          Decl_type = unsigned
          Usage = N
          Value = 0

        # End Variable

        # Begin Variable

          Name = mKeyEffArray[3][0].keyEffectDate.Year
          Decl_type = unsigned
          Usage = N
          Value = 0

        # End Variable

        # Begin Variable

          Name = mKeyEffArray[3][0].keyEffectDate.Month
          Decl_type = unsigned
          Usage = N
          Value = 0

        # End Variable

        # Begin Variable

          Name = mKeyEffArray[3][0].keyEffectDate.Day
          Decl_type = unsigned
          Usage = N
          Value = 0

        # End Variable

        # Begin Variable

          Name = mKeyEffArray[3][0].keyEffectDay
          Decl_type = unsigned
          Usage = N
          Value = 0

        # End Variable

        # Begin Variable

          Name = mKeyEffArray[3][0].keyShortTitle[0]
          Decl_type = char
          Usage = N
          Value = NULL

        # End Variable

        # Begin Variable

          Name = mKeyEffArray[3][1].valid
          Decl_type = unsigned
          Usage = N
          Value = 1

        # End Variable

        # Begin Variable

          Name = mKeyEffArray[3][1].keyEffectDate.Year
          Decl_type = unsigned
          Usage = N
          Value = 2020

        # End Variable

        # Begin Variable

          Name = mKeyEffArray[3][1].keyEffectDate.Month
          Decl_type = unsigned
          Usage = N
          Value = 1

        # End Variable

        # Begin Variable

          Name = mKeyEffArray[3][1].keyEffectDate.Day
          Decl_type = unsigned
          Usage = N
          Value = 2

        # End Variable

        # Begin Variable

          Name = mKeyEffArray[3][1].keyShortTitle[0]
          Decl_type = char
          Usage = N
          Value = 'S'

        # End Variable

        # Begin Variable

          Name = mKeyEffArray[3][1].keyEffectDay
          Decl_type = unsigned
          Usage = N
          Value = 2

        # End Variable

        # Begin Variable

          Name = mKeyEffArray[3][1].keyShortTitle[1]
          Decl_type = char
          Usage = N
          Value = 'h'

        # End Variable

        # Begin Variable

          Name = mKeyEffArray[3][98].valid
          Decl_type = unsigned
          Usage = N
          Value = 0

        # End Variable

        # Begin Variable

          Name = mKeyEffArray[3][98].keyEffectDate.Year
          Decl_type = unsigned
          Usage = N
          Value = 0

        # End Variable

        # Begin Variable

          Name = mKeyEffArray[3][98].keyEffectDate.Month
          Decl_type = unsigned
          Usage = N
          Value = 0

        # End Variable

        # Begin Variable

          Name = mKeyEffArray[3][98].keyEffectDate.Day
          Decl_type = unsigned
          Usage = N
          Value = 0

        # End Variable

        # Begin Variable

          Name = mKeyEffArray[3][98].keyEffectDay
          Decl_type = unsigned
          Usage = N
          Value = 0

        # End Variable

        # Begin Variable

          Name = mKeyEffArray[3][98].keyShortTitle[0]
          Decl_type = char
          Usage = N
          Value = 0

        # End Variable

        # Begin Variable

          Name = mKeyEffArray[3][99].valid
          Decl_type = unsigned
          Usage = N
          Value = 1

        # End Variable

        # Begin Variable

          Name = mKeyEffArray[3][99].keyEffectDate.Year
          Decl_type = unsigned
          Usage = N
          Value = 2020

        # End Variable

        # Begin Variable

          Name = mKeyEffArray[3][99].keyEffectDate.Month
          Decl_type = unsigned
          Usage = N
          Value = 1

        # End Variable

        # Begin Variable

          Name = mKeyEffArray[3][99].keyEffectDate.Day
          Decl_type = unsigned
          Usage = N
          Value = 2

        # End Variable

        # Begin Variable

          Name = mKeyEffArray[3][99].keyShortTitle[0]
          Decl_type = char
          Usage = N
          Value = 'S'

        # End Variable

        # Begin Variable

          Name = mKeyEffArray[3][99].keyEffectDay
          Decl_type = unsigned
          Usage = N
          Value = 2

        # End Variable

        # Begin Variable

          Name = mKeyEffArray[3][99].keyShortTitle[1]
          Decl_type = char
          Usage = N
          Value = 'h'

        # End Variable

        # Begin Removed Variable

          Name = mKeyEffArray[0][0].keyEffectData
          Decl_type = Date_Type
          Usage = N
          Value = *** Suspended ***

        # End Removed Variable

        # Begin Removed Variable

          Name = ldra_qq_lv_105->KeyEffectData[0].keyBankSegLoc
          Decl_type = unsigned
          Usage = O
          Value = 1

        # End Removed Variable

        # Begin Removed Variable

          Name = ldra_qq_lv_105->KeyEffectData[0].keyBankLoc
          Decl_type = unsigned
          Usage = O
          Value = 1

        # End Removed Variable

        # Begin Removed Variable

          Name = mData->KeyEffectData
          Decl_type = Key_Effectivity_Data_Type
          Usage = Z
          Frozen = T

        # End Removed Variable

        # Begin Removed Variable

          Name = mSearchKeyEffectArray [5].keyBankSegLoc
          Decl_type = unsigned
          Usage = M
          Packed = T

        # End Removed Variable

        # Begin Removed Variable

          Name = mSearchKeyEffectArray [5].keyBankLoc
          Decl_type = unsigned
          Usage = M
          Packed = T

        # End Removed Variable

        # Begin Removed Variable

          Name = mSearchKeyEffectArray [5]
          Decl_type = Key_Bank_Info_Type
          Usage = M
          Packed = T

        # End Removed Variable

        # Begin Removed Variable

          Name = mKeyEffArray [7] [100].keyShortTitle [24]
          Decl_type = char
          Usage = M
          Packed = T

        # End Removed Variable

        # Begin Removed Variable

          Name = mKeyEffArray [7] [100].keyPresent
          Decl_type = unsigned
          Usage = M
          Packed = T

        # End Removed Variable

        # Begin Removed Variable

          Name = mKeyEffArray.keyEffectDate
          Decl_type = Date_Type[7][100]
          Usage = M
          Frozen = T

        # End Removed Variable

        # Begin Removed Variable

          Name = mKeyEffArray [7] [100].valid
          Decl_type = unsigned
          Usage = M
          Packed = T

        # End Removed Variable

        # Begin Removed Variable

          Name = mKeyEffArray
          Decl_type = CKeyEffectData::Key_Table_Data_Type[7][100]
          Usage = M
          Frozen = T

        # End Removed Variable

        # Begin Removed Variable

          Name = CKeyEffectData::mInstance
          Decl_type = CKeyEffectData*
          Usage = G

        # End Removed Variable

        # Begin Removed Variable

          Name = mKeyEffArray [7] [100].keyPresent
          Decl_type = unsigned
          Usage = N
          Packed = T

        # End Removed Variable

        # Begin Removed Variable

          Name = mKeyEffArray [7] [100].keyEffectDay
          Decl_type = unsigned
          Usage = N
          Packed = T

        # End Removed Variable

        # Begin Removed Variable

          Name = mKeyEffArray [7] [100].keyEffectDate.Day
          Decl_type = unsigned
          Usage = N
          Packed = T

        # End Removed Variable

        # Begin Removed Variable

          Name = mKeyEffArray [7] [100].keyEffectDate.Month
          Decl_type = unsigned
          Usage = N
          Packed = T

        # End Removed Variable

        # Begin Removed Variable

          Name = mKeyEffArray [7] [100].keyEffectDate.Year
          Decl_type = unsigned
          Usage = N
          Packed = T

        # End Removed Variable

        # Begin Removed Variable

          Name = mKeyEffArray.keyEffectDate
          Decl_type = Date_Type[7][100]
          Usage = N
          Frozen = T

        # End Removed Variable

        # Begin Removed Variable

          Name = mKeyEffArray [7] [100].valid
          Decl_type = unsigned
          Usage = N
          Packed = T

        # End Removed Variable

        # Begin Removed Variable

          Name = CKeyEffectData::mInstance
          Decl_type = CKeyEffectData*
          Usage = H

        # End Removed Variable

      # Begin TC Stub

        Procedure = check4Null
  Overloading = Prototype

  # Begin Overloading
void *
char *
int
  # End Overloading

        # Begin TC Stub Return Value

          Name = %
          Type = bool
          Value = false

        # End TC Stub Return Value

      # Begin TC Stub TC Hit Count

        Setting = 3
        Specified = 1
      # End TC Stub TC Hit Count

      # End TC Stub

      # Begin TC Stub

        Procedure = CKeyEffectData::triggerMainKeyRolloverTask
  Overloading = Prototype

  # Begin Overloading
  # End Overloading

      # Begin TC Stub TC Hit Count

        Setting = 1
        Specified = 1
      # End TC Stub TC Hit Count

      # End TC Stub

      # Begin TC Stub

        Procedure = CKeyEffectData::rolloverEffectivity
  Overloading = Prototype

  # Begin Overloading
unsigned int
  # End Overloading

      # Begin TC Stub TC Hit Count

        Setting = 3
        Specified = 5
      # End TC Stub TC Hit Count

      # End TC Stub

      # Begin TC Stub

        Procedure = CKeyEffectData::getDayOfYear
  Overloading = Prototype

  # Begin Overloading
Date_Type
  # End Overloading

        # Begin TC Stub Return Value

          Name = %
          Type = UINT2
          Value = 2

        # End TC Stub Return Value

      # Begin TC Stub TC Hit Count

        Setting = 3
        Specified = 50
      # End TC Stub TC Hit Count

      # End TC Stub

      # Begin TC Stub

        Procedure = CKeyEffectData::clear_mKeyEffArrayElement
  Overloading = Prototype

  # Begin Overloading
unsigned int
unsigned int
  # End Overloading

      # Begin TC Stub TC Hit Count

        Setting = 3
        Specified = 50
      # End TC Stub TC Hit Count

      # End TC Stub

      # Begin TC Stub

        Procedure = CKeyEffectData::checkForRollover
  Overloading = Prototype

  # Begin Overloading
Write_Key_Effectivity_Data_Msg_Type *
  # End Overloading

      # Begin TC Stub TC Hit Count

        Setting = 3
        Specified = 1
      # End TC Stub TC Hit Count

      # End TC Stub

      # Begin TC Stub

        Procedure = CKeyEffectData::buildFilledBankMap
  Overloading = Prototype

  # Begin Overloading
  # End Overloading

      # Begin TC Stub TC Hit Count

        Setting = 3
        Specified = 1
      # End TC Stub TC Hit Count

      # End TC Stub

    # End Test Case

    # Begin Test Case

      File = E:\CVRi1\SD&D\Software\VLF_Software\Source\Projects\KgrVpApp\src\MGR\CKeyEffectData.cc
      Procedure = CKeyEffectData::setData
      Procedure Number = 120
      Member Of = 2
      Creation Date = Mar 30 2020 10:31:10
      Description = check4Null=F, numKeys=100,lastMsg=0, keys alternating invalid & valid, keyPresent=1

      # Begin Declarations

static const unsigned short NUM_KEYS = 100;
static Write_Key_Effectivity_Data_Msg_Type ldra_qq_lv_105;
static Date_Type s_date;
static Key_Effectivity_Data_Type s_key_eff[NUM_KEYS]; 

Short_Title_Type stitle = "Short";

s_date.Year = 2020;     //4-digits
s_date.Month = 1;       //1-12
s_date.Day = 2;         //1-31

for ( int idx = 0; idx < NUM_KEYS; idx++ )
{
  s_key_eff[idx].keyBankLoc = MEDLEY_BANK1;
  s_key_eff[idx].keyBankSegLoc = idx+1;
  if ( idx % 2 == 0 )
  {
    s_key_eff[idx].keyValid = 0; //0=false, 1=true
  }
  else
  { 
    s_key_eff[idx].keyValid = 1; //0=false, 1=true
  }
  s_key_eff[idx].reserved = 0;
  s_key_eff[idx].keyEffectDate = s_date;
  //memcpy(s_key_eff[idx].keyShortTitle, stitle, sizeof(Short_Title_Type));  
}

ldra_qq_lv_105.numKeys = NUM_KEYS;      // unsgined, 8 bit, 0-100, # of TEKs loaded in the msg
ldra_qq_lv_105.lastMsg = 0;             // unsigned, 8 bit, 0/1 flag, last msg in series if key msgs
ldra_qq_lv_105.reserved = 0;            // unsigned, 16 bit, 0 

for ( int idx = 0; idx < NUM_KEYS; idx++ )
{
  ldra_qq_lv_105.KeyEffectData[idx] = s_key_eff[idx];
  strcpy(&ldra_qq_lv_105.KeyEffectData[idx].keyShortTitle[0], stitle);  
}

// clear array prior to start of test
memset(CKeyEffectData::mInstance->mKeyEffArray, 0, sizeof(CKeyEffectData::mInstance->mKeyEffArray));

// set keyPresent to true so invalid keys will be marked invalid in the table 
for ( int idx = 0; idx < NUM_KEYS; idx++ )
{
  CKeyEffectData::mInstance->mKeyEffArray[3][idx].keyPresent = 1; 
  CKeyEffectData::mInstance->mKeyEffArray[3][idx].valid = 1; 
}
      # End Declarations

      # Begin Global Declarations
/*
 * Test case global declaration code will be placed here
 * Variables declared in this section are at global scope
 */
      # End Global Declarations

        # Begin Variable

          Name = mData
          Decl_type = Write_Key_Effectivity_Data_Msg_Type*
          Usage = Z
          Value = &ldra_qq_lv_105

        # End Variable

        # Begin Variable

          Name = mTEKRollover[0]
          Decl_type = bool
          Usage = M
          Value = true

        # End Variable

        # Begin Variable

          Name = mTEKRollover[1]
          Decl_type = bool
          Usage = M
          Value = true

        # End Variable

        # Begin Variable

          Name = mTEKRollover[2]
          Decl_type = bool
          Usage = M
          Value = true

        # End Variable

        # Begin Variable

          Name = mTEKRollover[3]
          Decl_type = bool
          Usage = M
          Value = true

        # End Variable

        # Begin Variable

          Name = mTEKRollover[4]
          Decl_type = bool
          Usage = M
          Value = true

        # End Variable

        # Begin Variable

          Name = mTEKRollover[0]
          Decl_type = bool
          Usage = N
          Value = true

        # End Variable

        # Begin Variable

          Name = mTEKRollover[1]
          Decl_type = bool
          Usage = N
          Value = true

        # End Variable

        # Begin Variable

          Name = mTEKRollover[2]
          Decl_type = bool
          Usage = N
          Value = true

        # End Variable

        # Begin Variable

          Name = mTEKRollover[3]
          Decl_type = bool
          Usage = N
          Value = true

        # End Variable

        # Begin Variable

          Name = mTEKRollover[4]
          Decl_type = bool
          Usage = N
          Value = true

        # End Variable

        # Begin Variable

          Name = mKeyEffArray[3][0].valid
          Decl_type = unsigned
          Usage = N
          Value = 0

        # End Variable

        # Begin Variable

          Name = mKeyEffArray[3][0].keyEffectDate.Year
          Decl_type = unsigned
          Usage = N
          Value = 0

        # End Variable

        # Begin Variable

          Name = mKeyEffArray[3][0].keyEffectDate.Month
          Decl_type = unsigned
          Usage = N
          Value = 0

        # End Variable

        # Begin Variable

          Name = mKeyEffArray[3][0].keyEffectDate.Day
          Decl_type = unsigned
          Usage = N
          Value = 0

        # End Variable

        # Begin Variable

          Name = mKeyEffArray[3][0].keyEffectDay
          Decl_type = unsigned
          Usage = N
          Value = 0

        # End Variable

        # Begin Variable

          Name = mKeyEffArray[3][0].keyShortTitle[0]
          Decl_type = char
          Usage = N
          Value = NULL

        # End Variable

        # Begin Variable

          Name = mKeyEffArray[3][1].valid
          Decl_type = unsigned
          Usage = N
          Value = 1

        # End Variable

        # Begin Variable

          Name = mKeyEffArray[3][1].keyEffectDate.Year
          Decl_type = unsigned
          Usage = N
          Value = 2020

        # End Variable

        # Begin Variable

          Name = mKeyEffArray[3][1].keyEffectDate.Month
          Decl_type = unsigned
          Usage = N
          Value = 1

        # End Variable

        # Begin Variable

          Name = mKeyEffArray[3][1].keyEffectDate.Day
          Decl_type = unsigned
          Usage = N
          Value = 2

        # End Variable

        # Begin Variable

          Name = mKeyEffArray[3][1].keyShortTitle[0]
          Decl_type = char
          Usage = N
          Value = 'S'

        # End Variable

        # Begin Variable

          Name = mKeyEffArray[3][1].keyEffectDay
          Decl_type = unsigned
          Usage = N
          Value = 2

        # End Variable

        # Begin Variable

          Name = mKeyEffArray[3][1].keyShortTitle[1]
          Decl_type = char
          Usage = N
          Value = 'h'

        # End Variable

        # Begin Variable

          Name = mKeyEffArray[3][98].valid
          Decl_type = unsigned
          Usage = N
          Value = 0

        # End Variable

        # Begin Variable

          Name = mKeyEffArray[3][98].keyEffectDate.Year
          Decl_type = unsigned
          Usage = N
          Value = 0

        # End Variable

        # Begin Variable

          Name = mKeyEffArray[3][98].keyEffectDate.Month
          Decl_type = unsigned
          Usage = N
          Value = 0

        # End Variable

        # Begin Variable

          Name = mKeyEffArray[3][98].keyEffectDate.Day
          Decl_type = unsigned
          Usage = N
          Value = 0

        # End Variable

        # Begin Variable

          Name = mKeyEffArray[3][98].keyEffectDay
          Decl_type = unsigned
          Usage = N
          Value = 0

        # End Variable

        # Begin Variable

          Name = mKeyEffArray[3][98].keyShortTitle[0]
          Decl_type = char
          Usage = N
          Value = 0

        # End Variable

        # Begin Variable

          Name = mKeyEffArray[3][99].valid
          Decl_type = unsigned
          Usage = N
          Value = 1

        # End Variable

        # Begin Variable

          Name = mKeyEffArray[3][99].keyEffectDate.Year
          Decl_type = unsigned
          Usage = N
          Value = 2020

        # End Variable

        # Begin Variable

          Name = mKeyEffArray[3][99].keyEffectDate.Month
          Decl_type = unsigned
          Usage = N
          Value = 1

        # End Variable

        # Begin Variable

          Name = mKeyEffArray[3][99].keyEffectDate.Day
          Decl_type = unsigned
          Usage = N
          Value = 2

        # End Variable

        # Begin Variable

          Name = mKeyEffArray[3][99].keyShortTitle[0]
          Decl_type = char
          Usage = N
          Value = 'S'

        # End Variable

        # Begin Variable

          Name = mKeyEffArray[3][99].keyEffectDay
          Decl_type = unsigned
          Usage = N
          Value = 2

        # End Variable

        # Begin Variable

          Name = mKeyEffArray[3][99].keyShortTitle[1]
          Decl_type = char
          Usage = N
          Value = 'h'

        # End Variable

        # Begin Removed Variable

          Name = mKeyEffArray[0][0].keyEffectData
          Decl_type = Date_Type
          Usage = N
          Value = *** Suspended ***

        # End Removed Variable

        # Begin Removed Variable

          Name = ldra_qq_lv_105->KeyEffectData[0].keyBankSegLoc
          Decl_type = unsigned
          Usage = O
          Value = 1

        # End Removed Variable

        # Begin Removed Variable

          Name = ldra_qq_lv_105->KeyEffectData[0].keyBankLoc
          Decl_type = unsigned
          Usage = O
          Value = 1

        # End Removed Variable

        # Begin Removed Variable

          Name = mData->KeyEffectData
          Decl_type = Key_Effectivity_Data_Type
          Usage = Z
          Frozen = T

        # End Removed Variable

        # Begin Removed Variable

          Name = mSearchKeyEffectArray [5].keyBankSegLoc
          Decl_type = unsigned
          Usage = M
          Packed = T

        # End Removed Variable

        # Begin Removed Variable

          Name = mSearchKeyEffectArray [5].keyBankLoc
          Decl_type = unsigned
          Usage = M
          Packed = T

        # End Removed Variable

        # Begin Removed Variable

          Name = mSearchKeyEffectArray [5]
          Decl_type = Key_Bank_Info_Type
          Usage = M
          Packed = T

        # End Removed Variable

        # Begin Removed Variable

          Name = mKeyEffArray [7] [100].keyShortTitle [24]
          Decl_type = char
          Usage = M
          Packed = T

        # End Removed Variable

        # Begin Removed Variable

          Name = mKeyEffArray [7] [100].keyPresent
          Decl_type = unsigned
          Usage = M
          Packed = T

        # End Removed Variable

        # Begin Removed Variable

          Name = mKeyEffArray.keyEffectDate
          Decl_type = Date_Type[7][100]
          Usage = M
          Frozen = T

        # End Removed Variable

        # Begin Removed Variable

          Name = mKeyEffArray [7] [100].valid
          Decl_type = unsigned
          Usage = M
          Packed = T

        # End Removed Variable

        # Begin Removed Variable

          Name = mKeyEffArray
          Decl_type = CKeyEffectData::Key_Table_Data_Type[7][100]
          Usage = M
          Frozen = T

        # End Removed Variable

        # Begin Removed Variable

          Name = CKeyEffectData::mInstance
          Decl_type = CKeyEffectData*
          Usage = G

        # End Removed Variable

        # Begin Removed Variable

          Name = mKeyEffArray [7] [100].keyPresent
          Decl_type = unsigned
          Usage = N
          Packed = T

        # End Removed Variable

        # Begin Removed Variable

          Name = mKeyEffArray [7] [100].keyEffectDay
          Decl_type = unsigned
          Usage = N
          Packed = T

        # End Removed Variable

        # Begin Removed Variable

          Name = mKeyEffArray [7] [100].keyEffectDate.Day
          Decl_type = unsigned
          Usage = N
          Packed = T

        # End Removed Variable

        # Begin Removed Variable

          Name = mKeyEffArray [7] [100].keyEffectDate.Month
          Decl_type = unsigned
          Usage = N
          Packed = T

        # End Removed Variable

        # Begin Removed Variable

          Name = mKeyEffArray [7] [100].keyEffectDate.Year
          Decl_type = unsigned
          Usage = N
          Packed = T

        # End Removed Variable

        # Begin Removed Variable

          Name = mKeyEffArray.keyEffectDate
          Decl_type = Date_Type[7][100]
          Usage = N
          Frozen = T

        # End Removed Variable

        # Begin Removed Variable

          Name = mKeyEffArray [7] [100].valid
          Decl_type = unsigned
          Usage = N
          Packed = T

        # End Removed Variable

        # Begin Removed Variable

          Name = CKeyEffectData::mInstance
          Decl_type = CKeyEffectData*
          Usage = H

        # End Removed Variable

      # Begin TC Stub

        Procedure = check4Null
  Overloading = Prototype

  # Begin Overloading
void *
char *
int
  # End Overloading

        # Begin TC Stub Return Value

          Name = %
          Type = bool
          Value = false

        # End TC Stub Return Value

      # Begin TC Stub TC Hit Count

        Setting = 3
        Specified = 1
      # End TC Stub TC Hit Count

      # End TC Stub

      # Begin TC Stub

        Procedure = CKeyEffectData::triggerMainKeyRolloverTask
  Overloading = Prototype

  # Begin Overloading
  # End Overloading

      # Begin TC Stub TC Hit Count

        Setting = 1
        Specified = 1
      # End TC Stub TC Hit Count

      # End TC Stub

      # Begin TC Stub

        Procedure = CKeyEffectData::rolloverEffectivity
  Overloading = Prototype

  # Begin Overloading
unsigned int
  # End Overloading

      # Begin TC Stub TC Hit Count

        Setting = 3
        Specified = 5
      # End TC Stub TC Hit Count

      # End TC Stub

      # Begin TC Stub

        Procedure = CKeyEffectData::getDayOfYear
  Overloading = Prototype

  # Begin Overloading
Date_Type
  # End Overloading

        # Begin TC Stub Return Value

          Name = %
          Type = UINT2
          Value = 2

        # End TC Stub Return Value

      # Begin TC Stub TC Hit Count

        Setting = 3
        Specified = 50
      # End TC Stub TC Hit Count

      # End TC Stub

      # Begin TC Stub

        Procedure = CKeyEffectData::checkForRollover
  Overloading = Prototype

  # Begin Overloading
Write_Key_Effectivity_Data_Msg_Type *
  # End Overloading

      # Begin TC Stub TC Hit Count

        Setting = 3
        Specified = 1
      # End TC Stub TC Hit Count

      # End TC Stub

      # Begin TC Stub

        Procedure = CKeyEffectData::buildFilledBankMap
  Overloading = Prototype

  # Begin Overloading
  # End Overloading

      # Begin TC Stub TC Hit Count

        Setting = 3
        Specified = 1
      # End TC Stub TC Hit Count

      # End TC Stub

    # End Test Case

    # Begin Test Case

      File = E:\CVRi1\SD&D\Software\VLF_Software\Source\Projects\KgrVpApp\src\MGR\CKeyEffectData.cc
      Procedure = CKeyEffectData::checkForRollover
      Procedure Number = 117
      Member Of = 1
      Creation Date = Apr 09 2020 10:40:40
      Description = for all chans all spec.mode mCommPlans=false

      # Begin Declarations
// Configure input parameter (Write_Key_Effectivity_Data_Msg_Type* mData)

static const unsigned short NUM_KEYS = 100;
static Write_Key_Effectivity_Data_Msg_Type ldra_qq_lv_91;
static Date_Type s_date;
static Key_Effectivity_Data_Type s_key_eff[NUM_KEYS]; 

s_date.Year = 2020;     //4-digits
s_date.Month = 3;       //1-12
s_date.Day = 31;        //1-31

for ( int idx = 0; idx < NUM_KEYS; idx++ )
{
  s_key_eff[idx].keyBankLoc = MEDLEY_BANK1; 
  s_key_eff[idx].keyBankSegLoc = idx+1;
  s_key_eff[idx].keyValid = 1; //0=false, 1=true
  s_key_eff[idx].reserved = 0;
  s_key_eff[idx].keyEffectDate = s_date;
  s_key_eff[idx].keyShortTitle[0] = NULL;
}

ldra_qq_lv_91.numKeys = NUM_KEYS; // unsgined, 8 bit, 0-100, # of TEKs 
ldra_qq_lv_91.lastMsg = 0;        // unsigned, 8 bit, 0/1 flag
ldra_qq_lv_91.reserved = 0;       // unsigned, 16 bit, 0 

for ( int idx = 0; idx < NUM_KEYS; idx++ )
{
  ldra_qq_lv_91.KeyEffectData[idx] = s_key_eff[idx];
}

for ( int idx = 0; idx < MAX_VLF_CHANNEL; idx++ )
{
   CKeyEffectData::mInstance->mSearchKeyEffectArray[idx].keyBankLoc = MEDLEY_BANK2;  // keybanks not equal
   CKeyEffectData::mInstance->mSearchKeyEffectArray[idx].keyBankSegLoc = 0; 
   CKeyEffectData::mInstance->mSearchKeyEffectArray[idx].reserved = 0;
}

// Configure relevant channel values 
for ( int idx = 0; idx < MAX_VLF_CHANNEL; idx++ )
{
   CVlf::Instance()->chan[idx]->mCommPlan.mode9 = false;
   CVlf::Instance()->chan[idx]->mCommPlan.modeHIDAR = false;
   CVlf::Instance()->chan[idx]->mCommPlan.mode23 = false;
   // normal mode: 
   CVlf::Instance()->chan[idx]->mCommPlan.mode15 = false;
}

// Configure mTEKRollover 
for ( int idx = 0; idx < MAX_VLF_CHANNEL; idx++ )
{
   CKeyEffectData::mInstance->mTEKRollover[idx] = false; 
}
      # End Declarations

        # Begin Variable

          Name = mData
          Decl_type = Write_Key_Effectivity_Data_Msg_Type*
          Usage = Z
          Value = &ldra_qq_lv_91

        # End Variable

        # Begin Variable

          Name = mTEKRollover[0]
          Decl_type = bool
          Usage = N
          Value = false

        # End Variable

        # Begin Variable

          Name = mTEKRollover[1]
          Decl_type = bool
          Usage = N
          Value = false

        # End Variable

        # Begin Variable

          Name = mTEKRollover[2]
          Decl_type = bool
          Usage = N
          Value = false

        # End Variable

        # Begin Variable

          Name = mTEKRollover[3]
          Decl_type = bool
          Usage = N
          Value = false

        # End Variable

        # Begin Variable

          Name = mTEKRollover[4]
          Decl_type = bool
          Usage = N
          Value = false

        # End Variable

        # Begin Removed Variable

          Name = mSearchKeyEffectArray[0].keyBankLoc
          Decl_type = unsigned
          Usage = M
          Value = 0x00000001

        # End Removed Variable

        # Begin Removed Variable

          Name = mSearchKeyEffectArray[0].keyBankLoc
          Decl_type = unsigned
          Usage = M
          Value = 0x00000001

        # End Removed Variable

        # Begin Removed Variable

          Name = mSearchKeyEffectArray[0].keyBankSegLoc
          Decl_type = unsigned
          Usage = M
          Value = 0x00000001

        # End Removed Variable

        # Begin Removed Variable

          Name = mSearchKeyEffectArray[0].keyBankSegLoc
          Decl_type = unsigned
          Usage = M
          Value = 0x00000001

        # End Removed Variable

        # Begin Removed Variable

          Name = mSearchKeyEffectArray[0].reserved
          Decl_type = unsigned
          Usage = M
          Value = 0x00000001

        # End Removed Variable

        # Begin Removed Variable

          Name = mSearchKeyEffectArray[1].keyBankLoc
          Decl_type = unsigned
          Usage = M
          Value = 0x00000001

        # End Removed Variable

        # Begin Removed Variable

          Name = mSearchKeyEffectArray[1].keyBankLoc
          Decl_type = unsigned
          Usage = M
          Value = 0x00000001

        # End Removed Variable

        # Begin Removed Variable

          Name = mSearchKeyEffectArray[1].keyBankSegLoc
          Decl_type = unsigned
          Usage = M
          Value = 0x00000001

        # End Removed Variable

        # Begin Removed Variable

          Name = mSearchKeyEffectArray[1].keyBankSegLoc
          Decl_type = unsigned
          Usage = M
          Value = 0x00000001

        # End Removed Variable

        # Begin Removed Variable

          Name = mSearchKeyEffectArray[1].reserved
          Decl_type = unsigned
          Usage = M
          Value = 0x00000001

        # End Removed Variable

        # Begin Removed Variable

          Name = mSearchKeyEffectArray[2].keyBankLoc
          Decl_type = unsigned
          Usage = M
          Value = 0x00000001

        # End Removed Variable

        # Begin Removed Variable

          Name = mSearchKeyEffectArray[2].keyBankLoc
          Decl_type = unsigned
          Usage = M
          Value = 0x00000001

        # End Removed Variable

        # Begin Removed Variable

          Name = mSearchKeyEffectArray[2].keyBankSegLoc
          Decl_type = unsigned
          Usage = M
          Value = 0x00000001

        # End Removed Variable

        # Begin Removed Variable

          Name = mSearchKeyEffectArray[2].keyBankSegLoc
          Decl_type = unsigned
          Usage = M
          Value = 0x00000001

        # End Removed Variable

        # Begin Removed Variable

          Name = mSearchKeyEffectArray[2].reserved
          Decl_type = unsigned
          Usage = M
          Value = 0x00000001

        # End Removed Variable

        # Begin Removed Variable

          Name = mSearchKeyEffectArray[3].keyBankLoc
          Decl_type = unsigned
          Usage = M
          Value = 0x00000001

        # End Removed Variable

        # Begin Removed Variable

          Name = mSearchKeyEffectArray[3].keyBankLoc
          Decl_type = unsigned
          Usage = M
          Value = 0x00000001

        # End Removed Variable

        # Begin Removed Variable

          Name = mSearchKeyEffectArray[3].keyBankSegLoc
          Decl_type = unsigned
          Usage = M
          Value = 0x00000001

        # End Removed Variable

        # Begin Removed Variable

          Name = mSearchKeyEffectArray[3].keyBankSegLoc
          Decl_type = unsigned
          Usage = M
          Value = 0x00000001

        # End Removed Variable

        # Begin Removed Variable

          Name = mSearchKeyEffectArray[3].reserved
          Decl_type = unsigned
          Usage = M
          Value = 0x00000001

        # End Removed Variable

        # Begin Removed Variable

          Name = mSearchKeyEffectArray[4].keyBankLoc
          Decl_type = unsigned
          Usage = M
          Value = 0x00000001

        # End Removed Variable

        # Begin Removed Variable

          Name = mSearchKeyEffectArray[4].keyBankLoc
          Decl_type = unsigned
          Usage = M
          Value = 0x00000001

        # End Removed Variable

        # Begin Removed Variable

          Name = mSearchKeyEffectArray[4].keyBankSegLoc
          Decl_type = unsigned
          Usage = M
          Value = 0x00000001

        # End Removed Variable

        # Begin Removed Variable

          Name = mSearchKeyEffectArray[4].keyBankSegLoc
          Decl_type = unsigned
          Usage = M
          Value = 0x00000001

        # End Removed Variable

        # Begin Removed Variable

          Name = mSearchKeyEffectArray[4].reserved
          Decl_type = unsigned
          Usage = M
          Value = 0x00000001

        # End Removed Variable

        # Begin Removed Variable

          Name = mData->KeyEffectData
          Decl_type = Key_Effectivity_Data_Type
          Usage = Z
          Frozen = T

        # End Removed Variable

        # Begin Removed Variable

          Name = mSearchKeyEffectArray[0]
          Decl_type = Key_Bank_Info_Type
          Usage = M

        # End Removed Variable

        # Begin Removed Variable

          Name = mSearchKeyEffectArray[1]
          Decl_type = Key_Bank_Info_Type
          Usage = M

        # End Removed Variable

        # Begin Removed Variable

          Name = mSearchKeyEffectArray[2]
          Decl_type = Key_Bank_Info_Type
          Usage = M

        # End Removed Variable

        # Begin Removed Variable

          Name = mSearchKeyEffectArray[3]
          Decl_type = Key_Bank_Info_Type
          Usage = M

        # End Removed Variable

        # Begin Removed Variable

          Name = mSearchKeyEffectArray[4]
          Decl_type = Key_Bank_Info_Type
          Usage = M

        # End Removed Variable

      # Begin TC Stub

        Procedure = CKeyEffectData::getDayOfYear
  Overloading = Prototype

  # Begin Overloading
Date_Type
  # End Overloading

        # Begin TC Stub Return Value

          Name = %
          Type = UINT2
          Value = 65535

        # End TC Stub Return Value

      # End TC Stub

    # End Test Case

    # Begin Test Case

      File = E:\CVRi1\SD&D\Software\VLF_Software\Source\Projects\KgrVpApp\src\MGR\CKeyEffectData.cc
      Procedure = CKeyEffectData::checkForRollover
      Procedure Number = 117
      Member Of = 1
      Creation Date = Apr 09 2020 10:40:40
      Description = chan 4 m9 mCommPlan=true, no rollover (all cond. false)

      # Begin Declarations
// Configure input parameter (Write_Key_Effectivity_Data_Msg_Type* mData)

static const unsigned short NUM_KEYS = 100;
static Write_Key_Effectivity_Data_Msg_Type ldra_qq_lv_91;
static Date_Type s_date;
static Key_Effectivity_Data_Type s_key_eff[NUM_KEYS]; 

s_date.Year = 2020;     //4-digits
s_date.Month = 1;       //1-12
s_date.Day = 1;         //1-31

for ( int idx = 0; idx < 100; idx++ )
{
  s_key_eff[idx].keyBankLoc = NO_BANK; 
  s_key_eff[idx].keyBankSegLoc = 0;
  s_key_eff[idx].keyValid = 1;      //0=false, 1=true
  s_key_eff[idx].reserved = 0;
  s_key_eff[idx].keyEffectDate = s_date;
  s_key_eff[idx].keyShortTitle[0] = NULL;
}

ldra_qq_lv_91.numKeys = NUM_KEYS; // unsgined, 8 bit, 0-100, # of TEKs 
ldra_qq_lv_91.lastMsg = 0;        // unsigned, 8 bit, 0/1 flag
ldra_qq_lv_91.reserved = 0;       // unsigned, 16 bit, 0 

for ( int idx = 0; idx < NUM_KEYS; idx++ )
{
  ldra_qq_lv_91.KeyEffectData[idx] = s_key_eff[idx];
}
      # End Declarations

      # Begin Global Declarations
/*
 * Test case global declaration code will be placed here
 * Variables declared in this section are at global scope
 */
      # End Global Declarations

        # Begin Variable

          Name = mData
          Decl_type = Write_Key_Effectivity_Data_Msg_Type*
          Usage = Z
          Value = &ldra_qq_lv_91

        # End Variable

        # Begin Variable

          Name = mTEKRollover[0]
          Decl_type = bool
          Usage = N
          Value = false

        # End Variable

        # Begin Variable

          Name = mTEKRollover[1]
          Decl_type = bool
          Usage = N
          Value = false

        # End Variable

        # Begin Variable

          Name = mTEKRollover[2]
          Decl_type = bool
          Usage = N
          Value = false

        # End Variable

        # Begin Variable

          Name = mTEKRollover[3]
          Decl_type = bool
          Usage = N
          Value = false

        # End Variable

        # Begin Variable

          Name = mTEKRollover[4]
          Decl_type = bool
          Usage = N
          Value = false

        # End Variable

        # Begin Variable

          Name = mTEKRollover[0]
          Decl_type = bool
          Usage = M
          Value = false

        # End Variable

        # Begin Variable

          Name = mTEKRollover[1]
          Decl_type = bool
          Usage = M
          Value = false

        # End Variable

        # Begin Variable

          Name = mTEKRollover[2]
          Decl_type = bool
          Usage = M
          Value = false

        # End Variable

        # Begin Variable

          Name = mTEKRollover[3]
          Decl_type = bool
          Usage = M
          Value = false

        # End Variable

        # Begin Variable

          Name = mTEKRollover[4]
          Decl_type = bool
          Usage = M
          Value = false

        # End Variable

        # Begin Variable

          Name = mSearchKeyEffectArray[0].keyBankLoc
          Decl_type = unsigned
          Usage = M
          Value = RESERVED_BANK1

        # End Variable

        # Begin Variable

          Name = mSearchKeyEffectArray[0].keyBankSegLoc
          Decl_type = unsigned
          Usage = M
          Value = 1

        # End Variable

        # Begin Variable

          Name = mSearchKeyEffectArray[1].keyBankLoc
          Decl_type = unsigned
          Usage = M
          Value = RESERVED_BANK1

        # End Variable

        # Begin Variable

          Name = mSearchKeyEffectArray[1].keyBankSegLoc
          Decl_type = unsigned
          Usage = M
          Value = 1

        # End Variable

        # Begin Variable

          Name = mSearchKeyEffectArray[2].keyBankLoc
          Decl_type = unsigned
          Usage = M
          Value = RESERVED_BANK1

        # End Variable

        # Begin Variable

          Name = mSearchKeyEffectArray[2].keyBankSegLoc
          Decl_type = unsigned
          Usage = M
          Value = 1

        # End Variable

        # Begin Variable

          Name = mSearchKeyEffectArray[3].keyBankLoc
          Decl_type = unsigned
          Usage = M
          Value = RESERVED_BANK1

        # End Variable

        # Begin Variable

          Name = mSearchKeyEffectArray[3].keyBankSegLoc
          Decl_type = unsigned
          Usage = M
          Value = 1

        # End Variable

        # Begin Variable

          Name = mSearchKeyEffectArray[4].keyBankLoc
          Decl_type = unsigned
          Usage = M
          Value = RESERVED_BANK1

        # End Variable

        # Begin Variable

          Name = mSearchKeyEffectArray[4].keyBankSegLoc
          Decl_type = unsigned
          Usage = M
          Value = 1

        # End Variable

        # Begin Variable

          Name = CVlf::Instance()->chan[0]->mCommPlan.mode9
          Decl_type = bool
          Usage = G
          Value = false

        # End Variable

        # Begin Variable

          Name = CVlf::Instance()->chan[0]->mCommPlan.modeHIDAR
          Decl_type = bool
          Usage = G
          Value = false

        # End Variable

        # Begin Variable

          Name = CVlf::Instance()->chan[0]->mCommPlan.mode23
          Decl_type = bool
          Usage = G
          Value = false

        # End Variable

        # Begin Variable

          Name = CVlf::Instance()->chan[1]->mCommPlan.mode9
          Decl_type = bool
          Usage = G
          Value = false

        # End Variable

        # Begin Variable

          Name = CVlf::Instance()->chan[1]->mCommPlan.modeHIDAR
          Decl_type = bool
          Usage = G
          Value = false

        # End Variable

        # Begin Variable

          Name = CVlf::Instance()->chan[1]->mCommPlan.mode23
          Decl_type = bool
          Usage = G
          Value = false

        # End Variable

        # Begin Variable

          Name = CVlf::Instance()->chan[2]->mCommPlan.mode9
          Decl_type = bool
          Usage = G
          Value = false

        # End Variable

        # Begin Variable

          Name = CVlf::Instance()->chan[2]->mCommPlan.modeHIDAR
          Decl_type = bool
          Usage = G
          Value = false

        # End Variable

        # Begin Variable

          Name = CVlf::Instance()->chan[2]->mCommPlan.mode23
          Decl_type = bool
          Usage = G
          Value = false

        # End Variable

        # Begin Variable

          Name = CVlf::Instance()->chan[3]->mCommPlan.mode9
          Decl_type = bool
          Usage = G
          Value = false

        # End Variable

        # Begin Variable

          Name = CVlf::Instance()->chan[3]->mCommPlan.modeHIDAR
          Decl_type = bool
          Usage = G
          Value = false

        # End Variable

        # Begin Variable

          Name = CVlf::Instance()->chan[3]->mCommPlan.mode23
          Decl_type = bool
          Usage = G
          Value = false

        # End Variable

        # Begin Variable

          Name = CVlf::Instance()->chan[4]->mCommPlan.mode9
          Decl_type = bool
          Usage = G
          Value = true

        # End Variable

        # Begin Variable

          Name = CVlf::Instance()->chan[4]->mCommPlan.modeHIDAR
          Decl_type = bool
          Usage = G
          Value = false

        # End Variable

        # Begin Variable

          Name = CVlf::Instance()->chan[4]->mCommPlan.mode23
          Decl_type = bool
          Usage = G
          Value = false

        # End Variable

        # Begin Removed Variable

          Name = mSearchKeyEffectArray[2].keyBankLoc
          Decl_type = unsigned
          Usage = N
          Value = 1

        # End Removed Variable

        # Begin Removed Variable

          Name = mSearchKeyEffectArray[2].keyBankSegLoc
          Decl_type = unsigned
          Usage = N
          Value = 1

        # End Removed Variable

        # Begin Removed Variable

          Name = mSearchKeyEffectArray[3].keyBankLoc
          Decl_type = unsigned
          Usage = N
          Value = 1

        # End Removed Variable

        # Begin Removed Variable

          Name = mSearchKeyEffectArray[3].keyBankSegLoc
          Decl_type = unsigned
          Usage = N
          Value = 1

        # End Removed Variable

        # Begin Removed Variable

          Name = mSearchKeyEffectArray[4].keyBankLoc
          Decl_type = unsigned
          Usage = N
          Value = 1

        # End Removed Variable

        # Begin Removed Variable

          Name = mSearchKeyEffectArray[4].keyBankSegLoc
          Decl_type = unsigned
          Usage = N
          Value = 1

        # End Removed Variable

        # Begin Removed Variable

          Name = mSearchKeyEffectArray[0].keyBankSegLoc
          Decl_type = unsigned
          Usage = M
          Value = 0x00000001

        # End Removed Variable

        # Begin Removed Variable

          Name = mSearchKeyEffectArray[0].reserved
          Decl_type = unsigned
          Usage = M
          Value = 0x00000001

        # End Removed Variable

        # Begin Removed Variable

          Name = mSearchKeyEffectArray[1].keyBankLoc
          Decl_type = unsigned
          Usage = M
          Value = 0x00000001

        # End Removed Variable

        # Begin Removed Variable

          Name = mSearchKeyEffectArray[1].reserved
          Decl_type = unsigned
          Usage = M
          Value = 0x00000001

        # End Removed Variable

        # Begin Removed Variable

          Name = mSearchKeyEffectArray[2].keyBankLoc
          Decl_type = unsigned
          Usage = M
          Value = 0x00000001

        # End Removed Variable

        # Begin Removed Variable

          Name = mSearchKeyEffectArray[2].keyBankLoc
          Decl_type = unsigned
          Usage = M
          Value = 0x00000001

        # End Removed Variable

        # Begin Removed Variable

          Name = mSearchKeyEffectArray[2].keyBankSegLoc
          Decl_type = unsigned
          Usage = M
          Value = 0x00000001

        # End Removed Variable

        # Begin Removed Variable

          Name = mSearchKeyEffectArray[2].keyBankSegLoc
          Decl_type = unsigned
          Usage = M
          Value = 0x00000001

        # End Removed Variable

        # Begin Removed Variable

          Name = mSearchKeyEffectArray[2].reserved
          Decl_type = unsigned
          Usage = M
          Value = 0x00000001

        # End Removed Variable

        # Begin Removed Variable

          Name = mSearchKeyEffectArray[3].keyBankLoc
          Decl_type = unsigned
          Usage = M
          Value = 0x00000001

        # End Removed Variable

        # Begin Removed Variable

          Name = mSearchKeyEffectArray[3].keyBankLoc
          Decl_type = unsigned
          Usage = M
          Value = 0x00000001

        # End Removed Variable

        # Begin Removed Variable

          Name = mSearchKeyEffectArray[3].keyBankSegLoc
          Decl_type = unsigned
          Usage = M
          Value = 0x00000001

        # End Removed Variable

        # Begin Removed Variable

          Name = mSearchKeyEffectArray[3].keyBankSegLoc
          Decl_type = unsigned
          Usage = M
          Value = 0x00000001

        # End Removed Variable

        # Begin Removed Variable

          Name = mSearchKeyEffectArray[3].reserved
          Decl_type = unsigned
          Usage = M
          Value = 0x00000001

        # End Removed Variable

        # Begin Removed Variable

          Name = mSearchKeyEffectArray[4].keyBankLoc
          Decl_type = unsigned
          Usage = M
          Value = 0x00000001

        # End Removed Variable

        # Begin Removed Variable

          Name = mSearchKeyEffectArray[4].keyBankLoc
          Decl_type = unsigned
          Usage = M
          Value = 0x00000001

        # End Removed Variable

        # Begin Removed Variable

          Name = mSearchKeyEffectArray[4].keyBankSegLoc
          Decl_type = unsigned
          Usage = M
          Value = 0x00000001

        # End Removed Variable

        # Begin Removed Variable

          Name = mSearchKeyEffectArray[4].keyBankSegLoc
          Decl_type = unsigned
          Usage = M
          Value = 0x00000001

        # End Removed Variable

        # Begin Removed Variable

          Name = mSearchKeyEffectArray[4].reserved
          Decl_type = unsigned
          Usage = M
          Value = 0x00000001

        # End Removed Variable

        # Begin Removed Variable

          Name = mData->KeyEffectData
          Decl_type = Key_Effectivity_Data_Type
          Usage = Z
          Frozen = T

        # End Removed Variable

        # Begin Removed Variable

          Name = mSearchKeyEffectArray[0]
          Decl_type = Key_Bank_Info_Type
          Usage = M

        # End Removed Variable

        # Begin Removed Variable

          Name = mSearchKeyEffectArray[1]
          Decl_type = Key_Bank_Info_Type
          Usage = M

        # End Removed Variable

        # Begin Removed Variable

          Name = mSearchKeyEffectArray[2]
          Decl_type = Key_Bank_Info_Type
          Usage = M

        # End Removed Variable

        # Begin Removed Variable

          Name = mSearchKeyEffectArray[3]
          Decl_type = Key_Bank_Info_Type
          Usage = M

        # End Removed Variable

        # Begin Removed Variable

          Name = mSearchKeyEffectArray[4]
          Decl_type = Key_Bank_Info_Type
          Usage = M

        # End Removed Variable

      # Begin TC Stub

        Procedure = CTimeLoad::GetVlfTime
  Overloading = Prototype

  # Begin Overloading
  # End Overloading

        # Begin TC Stub Return Value

          Name = %.offset
          Type = unsigned short
          Value = 0

        # End TC Stub Return Value

        # Begin TC Stub Return Value

          Name = %.doy
          Type = unsigned short
          Value = 100

        # End TC Stub Return Value

        # Begin TC Stub Return Value

          Name = %.frames
          Type = unsigned short
          Value = 0

        # End TC Stub Return Value

        # Begin TC Stub Return Value

          Name = %.sec
          Type = unsigned int
          Value = 0

        # End TC Stub Return Value

      # End TC Stub

      # Begin TC Stub

        Procedure = CKeyEffectData::getDayOfYear
  Overloading = Prototype

  # Begin Overloading
Date_Type
  # End Overloading

        # Begin TC Stub Return Value

          Name = %
          Type = UINT2
          Value = 2

        # End TC Stub Return Value

      # Begin TC Stub TC Hit Count

        Setting = 1
        Specified = 1
      # End TC Stub TC Hit Count

      # End TC Stub

    # End Test Case

    # Begin Test Case

      File = E:\CVRi1\SD&D\Software\VLF_Software\Source\Projects\KgrVpApp\src\MGR\CKeyEffectData.cc
      Procedure = CKeyEffectData::checkForRollover
      Procedure Number = 117
      Member Of = 1
      Creation Date = Apr 09 2020 10:40:40
      Description = chan 4 m9 mCommPlan=true, chan 4 rollover due to key-99

      # Begin Declarations
// Configure input parameter (Write_Key_Effectivity_Data_Msg_Type* mData)

static const unsigned short NUM_KEYS = 100;
static Write_Key_Effectivity_Data_Msg_Type ldra_qq_lv_91;
static Date_Type s_date;
static Key_Effectivity_Data_Type s_key_eff[NUM_KEYS]; 

s_date.Year = 2020;     //4-digits
s_date.Month = 1;       //1-12
s_date.Day = 1;         //1-31

for ( int idx = 0; idx < 100; idx++ )
{
  s_key_eff[idx].keyBankLoc = NO_BANK; 
  s_key_eff[idx].keyBankSegLoc = 0;
  s_key_eff[idx].keyValid = 1;      //0=false, 1=true
  s_key_eff[idx].reserved = 0;
  s_key_eff[idx].keyEffectDate = s_date;
  s_key_eff[idx].keyShortTitle[0] = NULL;
}

ldra_qq_lv_91.numKeys = NUM_KEYS; // unsgined, 8 bit, 0-100, # of TEKs 
ldra_qq_lv_91.lastMsg = 0;        // unsigned, 8 bit, 0/1 flag
ldra_qq_lv_91.reserved = 0;       // unsigned, 16 bit, 0 
for ( int idx = 0; idx < NUM_KEYS; idx++ )
{
  ldra_qq_lv_91.KeyEffectData[idx] = s_key_eff[idx];
}

// Test data that results in rollover
ldra_qq_lv_91.KeyEffectData[99].keyBankLoc = MEDLEY_BANK2; 
ldra_qq_lv_91.KeyEffectData[99].keyBankSegLoc = 99; 
ldra_qq_lv_91.KeyEffectData[99].keyValid = 0;
      # End Declarations

      # Begin Global Declarations
/*
 * Test case global declaration code will be placed here
 * Variables declared in this section are at global scope
 */
      # End Global Declarations

        # Begin Variable

          Name = mData
          Decl_type = Write_Key_Effectivity_Data_Msg_Type*
          Usage = Z
          Value = &ldra_qq_lv_91

        # End Variable

        # Begin Variable

          Name = mTEKRollover[0]
          Decl_type = bool
          Usage = N
          Value = false

        # End Variable

        # Begin Variable

          Name = mTEKRollover[1]
          Decl_type = bool
          Usage = N
          Value = false

        # End Variable

        # Begin Variable

          Name = mTEKRollover[2]
          Decl_type = bool
          Usage = N
          Value = false

        # End Variable

        # Begin Variable

          Name = mTEKRollover[3]
          Decl_type = bool
          Usage = N
          Value = false

        # End Variable

        # Begin Variable

          Name = mTEKRollover[4]
          Decl_type = bool
          Usage = N
          Value = true

        # End Variable

        # Begin Variable

          Name = mTEKRollover[0]
          Decl_type = bool
          Usage = M
          Value = false

        # End Variable

        # Begin Variable

          Name = mTEKRollover[1]
          Decl_type = bool
          Usage = M
          Value = false

        # End Variable

        # Begin Variable

          Name = mTEKRollover[2]
          Decl_type = bool
          Usage = M
          Value = false

        # End Variable

        # Begin Variable

          Name = mTEKRollover[3]
          Decl_type = bool
          Usage = M
          Value = false

        # End Variable

        # Begin Variable

          Name = mTEKRollover[4]
          Decl_type = bool
          Usage = M
          Value = false

        # End Variable

        # Begin Variable

          Name = mSearchKeyEffectArray[0].keyBankLoc
          Decl_type = unsigned
          Usage = M
          Value = RESERVED_BANK1

        # End Variable

        # Begin Variable

          Name = mSearchKeyEffectArray[0].keyBankSegLoc
          Decl_type = unsigned
          Usage = M
          Value = 1

        # End Variable

        # Begin Variable

          Name = mSearchKeyEffectArray[1].keyBankLoc
          Decl_type = unsigned
          Usage = M
          Value = RESERVED_BANK1

        # End Variable

        # Begin Variable

          Name = mSearchKeyEffectArray[1].keyBankSegLoc
          Decl_type = unsigned
          Usage = M
          Value = 1

        # End Variable

        # Begin Variable

          Name = mSearchKeyEffectArray[2].keyBankLoc
          Decl_type = unsigned
          Usage = M
          Value = RESERVED_BANK1

        # End Variable

        # Begin Variable

          Name = mSearchKeyEffectArray[2].keyBankSegLoc
          Decl_type = unsigned
          Usage = M
          Value = 1

        # End Variable

        # Begin Variable

          Name = mSearchKeyEffectArray[3].keyBankLoc
          Decl_type = unsigned
          Usage = M
          Value = RESERVED_BANK1

        # End Variable

        # Begin Variable

          Name = mSearchKeyEffectArray[3].keyBankSegLoc
          Decl_type = unsigned
          Usage = M
          Value = 1

        # End Variable

        # Begin Variable

          Name = mSearchKeyEffectArray[4].keyBankLoc
          Decl_type = unsigned
          Usage = M
          Value = MEDLEY_BANK2

        # End Variable

        # Begin Variable

          Name = mSearchKeyEffectArray[4].keyBankSegLoc
          Decl_type = unsigned
          Usage = M
          Value = 99

        # End Variable

        # Begin Variable

          Name = CVlf::Instance()->chan[0]->mCommPlan.mode9
          Decl_type = bool
          Usage = G
          Value = false

        # End Variable

        # Begin Variable

          Name = CVlf::Instance()->chan[0]->mCommPlan.modeHIDAR
          Decl_type = bool
          Usage = G
          Value = false

        # End Variable

        # Begin Variable

          Name = CVlf::Instance()->chan[0]->mCommPlan.mode23
          Decl_type = bool
          Usage = G
          Value = false

        # End Variable

        # Begin Variable

          Name = CVlf::Instance()->chan[1]->mCommPlan.mode9
          Decl_type = bool
          Usage = G
          Value = false

        # End Variable

        # Begin Variable

          Name = CVlf::Instance()->chan[1]->mCommPlan.modeHIDAR
          Decl_type = bool
          Usage = G
          Value = false

        # End Variable

        # Begin Variable

          Name = CVlf::Instance()->chan[1]->mCommPlan.mode23
          Decl_type = bool
          Usage = G
          Value = false

        # End Variable

        # Begin Variable

          Name = CVlf::Instance()->chan[2]->mCommPlan.mode9
          Decl_type = bool
          Usage = G
          Value = false

        # End Variable

        # Begin Variable

          Name = CVlf::Instance()->chan[2]->mCommPlan.modeHIDAR
          Decl_type = bool
          Usage = G
          Value = false

        # End Variable

        # Begin Variable

          Name = CVlf::Instance()->chan[2]->mCommPlan.mode23
          Decl_type = bool
          Usage = G
          Value = false

        # End Variable

        # Begin Variable

          Name = CVlf::Instance()->chan[3]->mCommPlan.mode9
          Decl_type = bool
          Usage = G
          Value = false

        # End Variable

        # Begin Variable

          Name = CVlf::Instance()->chan[3]->mCommPlan.modeHIDAR
          Decl_type = bool
          Usage = G
          Value = false

        # End Variable

        # Begin Variable

          Name = CVlf::Instance()->chan[3]->mCommPlan.mode23
          Decl_type = bool
          Usage = G
          Value = false

        # End Variable

        # Begin Variable

          Name = CVlf::Instance()->chan[4]->mCommPlan.mode9
          Decl_type = bool
          Usage = G
          Value = true

        # End Variable

        # Begin Variable

          Name = CVlf::Instance()->chan[4]->mCommPlan.modeHIDAR
          Decl_type = bool
          Usage = G
          Value = false

        # End Variable

        # Begin Variable

          Name = CVlf::Instance()->chan[4]->mCommPlan.mode23
          Decl_type = bool
          Usage = G
          Value = false

        # End Variable

        # Begin Removed Variable

          Name = mSearchKeyEffectArray[2].keyBankLoc
          Decl_type = unsigned
          Usage = N
          Value = 1

        # End Removed Variable

        # Begin Removed Variable

          Name = mSearchKeyEffectArray[2].keyBankSegLoc
          Decl_type = unsigned
          Usage = N
          Value = 1

        # End Removed Variable

        # Begin Removed Variable

          Name = mSearchKeyEffectArray[3].keyBankLoc
          Decl_type = unsigned
          Usage = N
          Value = 1

        # End Removed Variable

        # Begin Removed Variable

          Name = mSearchKeyEffectArray[3].keyBankSegLoc
          Decl_type = unsigned
          Usage = N
          Value = 1

        # End Removed Variable

        # Begin Removed Variable

          Name = mSearchKeyEffectArray[4].keyBankLoc
          Decl_type = unsigned
          Usage = N
          Value = 1

        # End Removed Variable

        # Begin Removed Variable

          Name = mSearchKeyEffectArray[4].keyBankSegLoc
          Decl_type = unsigned
          Usage = N
          Value = 1

        # End Removed Variable

        # Begin Removed Variable

          Name = mSearchKeyEffectArray[0].keyBankSegLoc
          Decl_type = unsigned
          Usage = M
          Value = 0x00000001

        # End Removed Variable

        # Begin Removed Variable

          Name = mSearchKeyEffectArray[0].reserved
          Decl_type = unsigned
          Usage = M
          Value = 0x00000001

        # End Removed Variable

        # Begin Removed Variable

          Name = mSearchKeyEffectArray[1].keyBankLoc
          Decl_type = unsigned
          Usage = M
          Value = 0x00000001

        # End Removed Variable

        # Begin Removed Variable

          Name = mSearchKeyEffectArray[1].reserved
          Decl_type = unsigned
          Usage = M
          Value = 0x00000001

        # End Removed Variable

        # Begin Removed Variable

          Name = mSearchKeyEffectArray[2].keyBankLoc
          Decl_type = unsigned
          Usage = M
          Value = 0x00000001

        # End Removed Variable

        # Begin Removed Variable

          Name = mSearchKeyEffectArray[2].keyBankLoc
          Decl_type = unsigned
          Usage = M
          Value = 0x00000001

        # End Removed Variable

        # Begin Removed Variable

          Name = mSearchKeyEffectArray[2].keyBankSegLoc
          Decl_type = unsigned
          Usage = M
          Value = 0x00000001

        # End Removed Variable

        # Begin Removed Variable

          Name = mSearchKeyEffectArray[2].keyBankSegLoc
          Decl_type = unsigned
          Usage = M
          Value = 0x00000001

        # End Removed Variable

        # Begin Removed Variable

          Name = mSearchKeyEffectArray[2].reserved
          Decl_type = unsigned
          Usage = M
          Value = 0x00000001

        # End Removed Variable

        # Begin Removed Variable

          Name = mSearchKeyEffectArray[3].keyBankLoc
          Decl_type = unsigned
          Usage = M
          Value = 0x00000001

        # End Removed Variable

        # Begin Removed Variable

          Name = mSearchKeyEffectArray[3].keyBankLoc
          Decl_type = unsigned
          Usage = M
          Value = 0x00000001

        # End Removed Variable

        # Begin Removed Variable

          Name = mSearchKeyEffectArray[3].keyBankSegLoc
          Decl_type = unsigned
          Usage = M
          Value = 0x00000001

        # End Removed Variable

        # Begin Removed Variable

          Name = mSearchKeyEffectArray[3].keyBankSegLoc
          Decl_type = unsigned
          Usage = M
          Value = 0x00000001

        # End Removed Variable

        # Begin Removed Variable

          Name = mSearchKeyEffectArray[3].reserved
          Decl_type = unsigned
          Usage = M
          Value = 0x00000001

        # End Removed Variable

        # Begin Removed Variable

          Name = mSearchKeyEffectArray[4].keyBankLoc
          Decl_type = unsigned
          Usage = M
          Value = 0x00000001

        # End Removed Variable

        # Begin Removed Variable

          Name = mSearchKeyEffectArray[4].keyBankLoc
          Decl_type = unsigned
          Usage = M
          Value = 0x00000001

        # End Removed Variable

        # Begin Removed Variable

          Name = mSearchKeyEffectArray[4].keyBankSegLoc
          Decl_type = unsigned
          Usage = M
          Value = 0x00000001

        # End Removed Variable

        # Begin Removed Variable

          Name = mSearchKeyEffectArray[4].keyBankSegLoc
          Decl_type = unsigned
          Usage = M
          Value = 0x00000001

        # End Removed Variable

        # Begin Removed Variable

          Name = mSearchKeyEffectArray[4].reserved
          Decl_type = unsigned
          Usage = M
          Value = 0x00000001

        # End Removed Variable

        # Begin Removed Variable

          Name = mData->KeyEffectData
          Decl_type = Key_Effectivity_Data_Type
          Usage = Z
          Frozen = T

        # End Removed Variable

        # Begin Removed Variable

          Name = mSearchKeyEffectArray[0]
          Decl_type = Key_Bank_Info_Type
          Usage = M

        # End Removed Variable

        # Begin Removed Variable

          Name = mSearchKeyEffectArray[1]
          Decl_type = Key_Bank_Info_Type
          Usage = M

        # End Removed Variable

        # Begin Removed Variable

          Name = mSearchKeyEffectArray[2]
          Decl_type = Key_Bank_Info_Type
          Usage = M

        # End Removed Variable

        # Begin Removed Variable

          Name = mSearchKeyEffectArray[3]
          Decl_type = Key_Bank_Info_Type
          Usage = M

        # End Removed Variable

        # Begin Removed Variable

          Name = mSearchKeyEffectArray[4]
          Decl_type = Key_Bank_Info_Type
          Usage = M

        # End Removed Variable

      # Begin TC Stub

        Procedure = CTimeLoad::GetVlfTime
  Overloading = Prototype

  # Begin Overloading
  # End Overloading

        # Begin TC Stub Return Value

          Name = %.offset
          Type = unsigned short
          Value = 0

        # End TC Stub Return Value

        # Begin TC Stub Return Value

          Name = %.doy
          Type = unsigned short
          Value = 100

        # End TC Stub Return Value

        # Begin TC Stub Return Value

          Name = %.frames
          Type = unsigned short
          Value = 0

        # End TC Stub Return Value

        # Begin TC Stub Return Value

          Name = %.sec
          Type = unsigned int
          Value = 0

        # End TC Stub Return Value

      # End TC Stub

      # Begin TC Stub

        Procedure = CKeyEffectData::getDayOfYear
  Overloading = Prototype

  # Begin Overloading
Date_Type
  # End Overloading

        # Begin TC Stub Return Value

          Name = %
          Type = UINT2
          Value = 2

        # End TC Stub Return Value

      # Begin TC Stub TC Hit Count

        Setting = 2
        Specified = 1
      # End TC Stub TC Hit Count

      # End TC Stub

    # End Test Case

    # Begin Test Case

      File = E:\CVRi1\SD&D\Software\VLF_Software\Source\Projects\KgrVpApp\src\MGR\CKeyEffectData.cc
      Procedure = CKeyEffectData::checkForRollover
      Procedure Number = 117
      Member Of = 1
      Creation Date = Apr 09 2020 10:40:40
      Description = chan 4 mHi mCommPlan=true, chan 4 rollover due to key-99

      # Begin Declarations
// Configure input parameter (Write_Key_Effectivity_Data_Msg_Type* mData)

static const unsigned short NUM_KEYS = 100;
static Write_Key_Effectivity_Data_Msg_Type ldra_qq_lv_91;
static Date_Type s_date;
static Key_Effectivity_Data_Type s_key_eff[NUM_KEYS]; 

s_date.Year = 2020;     //4-digits
s_date.Month = 1;       //1-12
s_date.Day = 1;         //1-31

for ( int idx = 0; idx < 100; idx++ )
{
  s_key_eff[idx].keyBankLoc = NO_BANK; 
  s_key_eff[idx].keyBankSegLoc = 0;
  s_key_eff[idx].keyValid = 1;      //0=false, 1=true
  s_key_eff[idx].reserved = 0;
  s_key_eff[idx].keyEffectDate = s_date;
  s_key_eff[idx].keyShortTitle[0] = NULL;
}

ldra_qq_lv_91.numKeys = NUM_KEYS; // unsgined, 8 bit, 0-100, # of TEKs 
ldra_qq_lv_91.lastMsg = 0;        // unsigned, 8 bit, 0/1 flag
ldra_qq_lv_91.reserved = 0;       // unsigned, 16 bit, 0 
for ( int idx = 0; idx < NUM_KEYS; idx++ )
{
  ldra_qq_lv_91.KeyEffectData[idx] = s_key_eff[idx];
}

// Test data that results in rollover
ldra_qq_lv_91.KeyEffectData[99].keyBankLoc = MEDLEY_BANK2; 
ldra_qq_lv_91.KeyEffectData[99].keyBankSegLoc = 99; 
ldra_qq_lv_91.KeyEffectData[99].keyValid = 0;
      # End Declarations

      # Begin Global Declarations
/*
 * Test case global declaration code will be placed here
 * Variables declared in this section are at global scope
 */
      # End Global Declarations

        # Begin Variable

          Name = mData
          Decl_type = Write_Key_Effectivity_Data_Msg_Type*
          Usage = Z
          Value = &ldra_qq_lv_91

        # End Variable

        # Begin Variable

          Name = mTEKRollover[0]
          Decl_type = bool
          Usage = N
          Value = false

        # End Variable

        # Begin Variable

          Name = mTEKRollover[1]
          Decl_type = bool
          Usage = N
          Value = false

        # End Variable

        # Begin Variable

          Name = mTEKRollover[2]
          Decl_type = bool
          Usage = N
          Value = false

        # End Variable

        # Begin Variable

          Name = mTEKRollover[3]
          Decl_type = bool
          Usage = N
          Value = false

        # End Variable

        # Begin Variable

          Name = mTEKRollover[4]
          Decl_type = bool
          Usage = N
          Value = true

        # End Variable

        # Begin Variable

          Name = mTEKRollover[0]
          Decl_type = bool
          Usage = M
          Value = false

        # End Variable

        # Begin Variable

          Name = mTEKRollover[1]
          Decl_type = bool
          Usage = M
          Value = false

        # End Variable

        # Begin Variable

          Name = mTEKRollover[2]
          Decl_type = bool
          Usage = M
          Value = false

        # End Variable

        # Begin Variable

          Name = mTEKRollover[3]
          Decl_type = bool
          Usage = M
          Value = false

        # End Variable

        # Begin Variable

          Name = mTEKRollover[4]
          Decl_type = bool
          Usage = M
          Value = false

        # End Variable

        # Begin Variable

          Name = mSearchKeyEffectArray[0].keyBankLoc
          Decl_type = unsigned
          Usage = M
          Value = RESERVED_BANK1

        # End Variable

        # Begin Variable

          Name = mSearchKeyEffectArray[0].keyBankSegLoc
          Decl_type = unsigned
          Usage = M
          Value = 1

        # End Variable

        # Begin Variable

          Name = mSearchKeyEffectArray[1].keyBankLoc
          Decl_type = unsigned
          Usage = M
          Value = RESERVED_BANK1

        # End Variable

        # Begin Variable

          Name = mSearchKeyEffectArray[1].keyBankSegLoc
          Decl_type = unsigned
          Usage = M
          Value = 1

        # End Variable

        # Begin Variable

          Name = mSearchKeyEffectArray[2].keyBankLoc
          Decl_type = unsigned
          Usage = M
          Value = RESERVED_BANK1

        # End Variable

        # Begin Variable

          Name = mSearchKeyEffectArray[2].keyBankSegLoc
          Decl_type = unsigned
          Usage = M
          Value = 1

        # End Variable

        # Begin Variable

          Name = mSearchKeyEffectArray[3].keyBankLoc
          Decl_type = unsigned
          Usage = M
          Value = RESERVED_BANK1

        # End Variable

        # Begin Variable

          Name = mSearchKeyEffectArray[3].keyBankSegLoc
          Decl_type = unsigned
          Usage = M
          Value = 1

        # End Variable

        # Begin Variable

          Name = mSearchKeyEffectArray[4].keyBankLoc
          Decl_type = unsigned
          Usage = M
          Value = MEDLEY_BANK2

        # End Variable

        # Begin Variable

          Name = mSearchKeyEffectArray[4].keyBankSegLoc
          Decl_type = unsigned
          Usage = M
          Value = 99

        # End Variable

        # Begin Variable

          Name = CVlf::Instance()->chan[0]->mCommPlan.mode9
          Decl_type = bool
          Usage = G
          Value = false

        # End Variable

        # Begin Variable

          Name = CVlf::Instance()->chan[0]->mCommPlan.modeHIDAR
          Decl_type = bool
          Usage = G
          Value = false

        # End Variable

        # Begin Variable

          Name = CVlf::Instance()->chan[0]->mCommPlan.mode23
          Decl_type = bool
          Usage = G
          Value = false

        # End Variable

        # Begin Variable

          Name = CVlf::Instance()->chan[1]->mCommPlan.mode9
          Decl_type = bool
          Usage = G
          Value = false

        # End Variable

        # Begin Variable

          Name = CVlf::Instance()->chan[1]->mCommPlan.modeHIDAR
          Decl_type = bool
          Usage = G
          Value = false

        # End Variable

        # Begin Variable

          Name = CVlf::Instance()->chan[1]->mCommPlan.mode23
          Decl_type = bool
          Usage = G
          Value = false

        # End Variable

        # Begin Variable

          Name = CVlf::Instance()->chan[2]->mCommPlan.mode9
          Decl_type = bool
          Usage = G
          Value = false

        # End Variable

        # Begin Variable

          Name = CVlf::Instance()->chan[2]->mCommPlan.modeHIDAR
          Decl_type = bool
          Usage = G
          Value = false

        # End Variable

        # Begin Variable

          Name = CVlf::Instance()->chan[2]->mCommPlan.mode23
          Decl_type = bool
          Usage = G
          Value = false

        # End Variable

        # Begin Variable

          Name = CVlf::Instance()->chan[3]->mCommPlan.mode9
          Decl_type = bool
          Usage = G
          Value = false

        # End Variable

        # Begin Variable

          Name = CVlf::Instance()->chan[3]->mCommPlan.modeHIDAR
          Decl_type = bool
          Usage = G
          Value = false

        # End Variable

        # Begin Variable

          Name = CVlf::Instance()->chan[3]->mCommPlan.mode23
          Decl_type = bool
          Usage = G
          Value = false

        # End Variable

        # Begin Variable

          Name = CVlf::Instance()->chan[4]->mCommPlan.mode9
          Decl_type = bool
          Usage = G
          Value = false

        # End Variable

        # Begin Variable

          Name = CVlf::Instance()->chan[4]->mCommPlan.modeHIDAR
          Decl_type = bool
          Usage = G
          Value = true

        # End Variable

        # Begin Variable

          Name = CVlf::Instance()->chan[4]->mCommPlan.mode23
          Decl_type = bool
          Usage = G
          Value = false

        # End Variable

        # Begin Removed Variable

          Name = mSearchKeyEffectArray[2].keyBankLoc
          Decl_type = unsigned
          Usage = N
          Value = 1

        # End Removed Variable

        # Begin Removed Variable

          Name = mSearchKeyEffectArray[2].keyBankSegLoc
          Decl_type = unsigned
          Usage = N
          Value = 1

        # End Removed Variable

        # Begin Removed Variable

          Name = mSearchKeyEffectArray[3].keyBankLoc
          Decl_type = unsigned
          Usage = N
          Value = 1

        # End Removed Variable

        # Begin Removed Variable

          Name = mSearchKeyEffectArray[3].keyBankSegLoc
          Decl_type = unsigned
          Usage = N
          Value = 1

        # End Removed Variable

        # Begin Removed Variable

          Name = mSearchKeyEffectArray[4].keyBankLoc
          Decl_type = unsigned
          Usage = N
          Value = 1

        # End Removed Variable

        # Begin Removed Variable

          Name = mSearchKeyEffectArray[4].keyBankSegLoc
          Decl_type = unsigned
          Usage = N
          Value = 1

        # End Removed Variable

        # Begin Removed Variable

          Name = mSearchKeyEffectArray[0].keyBankSegLoc
          Decl_type = unsigned
          Usage = M
          Value = 0x00000001

        # End Removed Variable

        # Begin Removed Variable

          Name = mSearchKeyEffectArray[0].reserved
          Decl_type = unsigned
          Usage = M
          Value = 0x00000001

        # End Removed Variable

        # Begin Removed Variable

          Name = mSearchKeyEffectArray[1].keyBankLoc
          Decl_type = unsigned
          Usage = M
          Value = 0x00000001

        # End Removed Variable

        # Begin Removed Variable

          Name = mSearchKeyEffectArray[1].reserved
          Decl_type = unsigned
          Usage = M
          Value = 0x00000001

        # End Removed Variable

        # Begin Removed Variable

          Name = mSearchKeyEffectArray[2].keyBankLoc
          Decl_type = unsigned
          Usage = M
          Value = 0x00000001

        # End Removed Variable

        # Begin Removed Variable

          Name = mSearchKeyEffectArray[2].keyBankLoc
          Decl_type = unsigned
          Usage = M
          Value = 0x00000001

        # End Removed Variable

        # Begin Removed Variable

          Name = mSearchKeyEffectArray[2].keyBankSegLoc
          Decl_type = unsigned
          Usage = M
          Value = 0x00000001

        # End Removed Variable

        # Begin Removed Variable

          Name = mSearchKeyEffectArray[2].keyBankSegLoc
          Decl_type = unsigned
          Usage = M
          Value = 0x00000001

        # End Removed Variable

        # Begin Removed Variable

          Name = mSearchKeyEffectArray[2].reserved
          Decl_type = unsigned
          Usage = M
          Value = 0x00000001

        # End Removed Variable

        # Begin Removed Variable

          Name = mSearchKeyEffectArray[3].keyBankLoc
          Decl_type = unsigned
          Usage = M
          Value = 0x00000001

        # End Removed Variable

        # Begin Removed Variable

          Name = mSearchKeyEffectArray[3].keyBankLoc
          Decl_type = unsigned
          Usage = M
          Value = 0x00000001

        # End Removed Variable

        # Begin Removed Variable

          Name = mSearchKeyEffectArray[3].keyBankSegLoc
          Decl_type = unsigned
          Usage = M
          Value = 0x00000001

        # End Removed Variable

        # Begin Removed Variable

          Name = mSearchKeyEffectArray[3].keyBankSegLoc
          Decl_type = unsigned
          Usage = M
          Value = 0x00000001

        # End Removed Variable

        # Begin Removed Variable

          Name = mSearchKeyEffectArray[3].reserved
          Decl_type = unsigned
          Usage = M
          Value = 0x00000001

        # End Removed Variable

        # Begin Removed Variable

          Name = mSearchKeyEffectArray[4].keyBankLoc
          Decl_type = unsigned
          Usage = M
          Value = 0x00000001

        # End Removed Variable

        # Begin Removed Variable

          Name = mSearchKeyEffectArray[4].keyBankLoc
          Decl_type = unsigned
          Usage = M
          Value = 0x00000001

        # End Removed Variable

        # Begin Removed Variable

          Name = mSearchKeyEffectArray[4].keyBankSegLoc
          Decl_type = unsigned
          Usage = M
          Value = 0x00000001

        # End Removed Variable

        # Begin Removed Variable

          Name = mSearchKeyEffectArray[4].keyBankSegLoc
          Decl_type = unsigned
          Usage = M
          Value = 0x00000001

        # End Removed Variable

        # Begin Removed Variable

          Name = mSearchKeyEffectArray[4].reserved
          Decl_type = unsigned
          Usage = M
          Value = 0x00000001

        # End Removed Variable

        # Begin Removed Variable

          Name = mData->KeyEffectData
          Decl_type = Key_Effectivity_Data_Type
          Usage = Z
          Frozen = T

        # End Removed Variable

        # Begin Removed Variable

          Name = mSearchKeyEffectArray[0]
          Decl_type = Key_Bank_Info_Type
          Usage = M

        # End Removed Variable

        # Begin Removed Variable

          Name = mSearchKeyEffectArray[1]
          Decl_type = Key_Bank_Info_Type
          Usage = M

        # End Removed Variable

        # Begin Removed Variable

          Name = mSearchKeyEffectArray[2]
          Decl_type = Key_Bank_Info_Type
          Usage = M

        # End Removed Variable

        # Begin Removed Variable

          Name = mSearchKeyEffectArray[3]
          Decl_type = Key_Bank_Info_Type
          Usage = M

        # End Removed Variable

        # Begin Removed Variable

          Name = mSearchKeyEffectArray[4]
          Decl_type = Key_Bank_Info_Type
          Usage = M

        # End Removed Variable

      # Begin TC Stub

        Procedure = CTimeLoad::GetVlfTime
  Overloading = Prototype

  # Begin Overloading
  # End Overloading

        # Begin TC Stub Return Value

          Name = %.offset
          Type = unsigned short
          Value = 0

        # End TC Stub Return Value

        # Begin TC Stub Return Value

          Name = %.doy
          Type = unsigned short
          Value = 100

        # End TC Stub Return Value

        # Begin TC Stub Return Value

          Name = %.frames
          Type = unsigned short
          Value = 0

        # End TC Stub Return Value

        # Begin TC Stub Return Value

          Name = %.sec
          Type = unsigned int
          Value = 0

        # End TC Stub Return Value

      # End TC Stub

      # Begin TC Stub

        Procedure = CKeyEffectData::getDayOfYear
  Overloading = Prototype

  # Begin Overloading
Date_Type
  # End Overloading

        # Begin TC Stub Return Value

          Name = %
          Type = UINT2
          Value = 2

        # End TC Stub Return Value

      # Begin TC Stub TC Hit Count

        Setting = 2
        Specified = 1
      # End TC Stub TC Hit Count

      # End TC Stub

    # End Test Case

    # Begin Test Case

      File = E:\CVRi1\SD&D\Software\VLF_Software\Source\Projects\KgrVpApp\src\MGR\CKeyEffectData.cc
      Procedure = CKeyEffectData::checkForRollover
      Procedure Number = 117
      Member Of = 1
      Creation Date = Apr 09 2020 10:40:40
      Description = chan 4 m23 mCommPlan=true, chan 4 rollover due to key-99

      # Begin Declarations
// Configure input parameter (Write_Key_Effectivity_Data_Msg_Type* mData)

static const unsigned short NUM_KEYS = 100;
static Write_Key_Effectivity_Data_Msg_Type ldra_qq_lv_91;
static Date_Type s_date;
static Key_Effectivity_Data_Type s_key_eff[NUM_KEYS]; 

s_date.Year = 2020;     //4-digits
s_date.Month = 1;       //1-12
s_date.Day = 1;         //1-31

for ( int idx = 0; idx < 100; idx++ )
{
  s_key_eff[idx].keyBankLoc = NO_BANK; 
  s_key_eff[idx].keyBankSegLoc = 0;
  s_key_eff[idx].keyValid = 1;      //0=false, 1=true
  s_key_eff[idx].reserved = 0;
  s_key_eff[idx].keyEffectDate = s_date;
  s_key_eff[idx].keyShortTitle[0] = NULL;
}

ldra_qq_lv_91.numKeys = NUM_KEYS; // unsgined, 8 bit, 0-100, # of TEKs 
ldra_qq_lv_91.lastMsg = 0;        // unsigned, 8 bit, 0/1 flag
ldra_qq_lv_91.reserved = 0;       // unsigned, 16 bit, 0 
for ( int idx = 0; idx < NUM_KEYS; idx++ )
{
  ldra_qq_lv_91.KeyEffectData[idx] = s_key_eff[idx];
}

// Test data that results in rollover
ldra_qq_lv_91.KeyEffectData[99].keyBankLoc = MEDLEY_BANK2; 
ldra_qq_lv_91.KeyEffectData[99].keyBankSegLoc = 99; 
ldra_qq_lv_91.KeyEffectData[99].keyValid = 0;
      # End Declarations

      # Begin Global Declarations
/*
 * Test case global declaration code will be placed here
 * Variables declared in this section are at global scope
 */
      # End Global Declarations

        # Begin Variable

          Name = mData
          Decl_type = Write_Key_Effectivity_Data_Msg_Type*
          Usage = Z
          Value = &ldra_qq_lv_91

        # End Variable

        # Begin Variable

          Name = mTEKRollover[0]
          Decl_type = bool
          Usage = N
          Value = false

        # End Variable

        # Begin Variable

          Name = mTEKRollover[1]
          Decl_type = bool
          Usage = N
          Value = false

        # End Variable

        # Begin Variable

          Name = mTEKRollover[2]
          Decl_type = bool
          Usage = N
          Value = false

        # End Variable

        # Begin Variable

          Name = mTEKRollover[3]
          Decl_type = bool
          Usage = N
          Value = false

        # End Variable

        # Begin Variable

          Name = mTEKRollover[4]
          Decl_type = bool
          Usage = N
          Value = true

        # End Variable

        # Begin Variable

          Name = mTEKRollover[0]
          Decl_type = bool
          Usage = M
          Value = false

        # End Variable

        # Begin Variable

          Name = mTEKRollover[1]
          Decl_type = bool
          Usage = M
          Value = false

        # End Variable

        # Begin Variable

          Name = mTEKRollover[2]
          Decl_type = bool
          Usage = M
          Value = false

        # End Variable

        # Begin Variable

          Name = mTEKRollover[3]
          Decl_type = bool
          Usage = M
          Value = false

        # End Variable

        # Begin Variable

          Name = mTEKRollover[4]
          Decl_type = bool
          Usage = M
          Value = false

        # End Variable

        # Begin Variable

          Name = mSearchKeyEffectArray[0].keyBankLoc
          Decl_type = unsigned
          Usage = M
          Value = RESERVED_BANK1

        # End Variable

        # Begin Variable

          Name = mSearchKeyEffectArray[0].keyBankSegLoc
          Decl_type = unsigned
          Usage = M
          Value = 1

        # End Variable

        # Begin Variable

          Name = mSearchKeyEffectArray[1].keyBankLoc
          Decl_type = unsigned
          Usage = M
          Value = RESERVED_BANK1

        # End Variable

        # Begin Variable

          Name = mSearchKeyEffectArray[1].keyBankSegLoc
          Decl_type = unsigned
          Usage = M
          Value = 1

        # End Variable

        # Begin Variable

          Name = mSearchKeyEffectArray[2].keyBankLoc
          Decl_type = unsigned
          Usage = M
          Value = RESERVED_BANK1

        # End Variable

        # Begin Variable

          Name = mSearchKeyEffectArray[2].keyBankSegLoc
          Decl_type = unsigned
          Usage = M
          Value = 1

        # End Variable

        # Begin Variable

          Name = mSearchKeyEffectArray[3].keyBankLoc
          Decl_type = unsigned
          Usage = M
          Value = RESERVED_BANK1

        # End Variable

        # Begin Variable

          Name = mSearchKeyEffectArray[3].keyBankSegLoc
          Decl_type = unsigned
          Usage = M
          Value = 1

        # End Variable

        # Begin Variable

          Name = mSearchKeyEffectArray[4].keyBankLoc
          Decl_type = unsigned
          Usage = M
          Value = MEDLEY_BANK2

        # End Variable

        # Begin Variable

          Name = mSearchKeyEffectArray[4].keyBankSegLoc
          Decl_type = unsigned
          Usage = M
          Value = 99

        # End Variable

        # Begin Variable

          Name = CVlf::Instance()->chan[0]->mCommPlan.mode9
          Decl_type = bool
          Usage = G
          Value = false

        # End Variable

        # Begin Variable

          Name = CVlf::Instance()->chan[0]->mCommPlan.modeHIDAR
          Decl_type = bool
          Usage = G
          Value = false

        # End Variable

        # Begin Variable

          Name = CVlf::Instance()->chan[0]->mCommPlan.mode23
          Decl_type = bool
          Usage = G
          Value = false

        # End Variable

        # Begin Variable

          Name = CVlf::Instance()->chan[1]->mCommPlan.mode9
          Decl_type = bool
          Usage = G
          Value = false

        # End Variable

        # Begin Variable

          Name = CVlf::Instance()->chan[1]->mCommPlan.modeHIDAR
          Decl_type = bool
          Usage = G
          Value = false

        # End Variable

        # Begin Variable

          Name = CVlf::Instance()->chan[1]->mCommPlan.mode23
          Decl_type = bool
          Usage = G
          Value = false

        # End Variable

        # Begin Variable

          Name = CVlf::Instance()->chan[2]->mCommPlan.mode9
          Decl_type = bool
          Usage = G
          Value = false

        # End Variable

        # Begin Variable

          Name = CVlf::Instance()->chan[2]->mCommPlan.modeHIDAR
          Decl_type = bool
          Usage = G
          Value = false

        # End Variable

        # Begin Variable

          Name = CVlf::Instance()->chan[2]->mCommPlan.mode23
          Decl_type = bool
          Usage = G
          Value = false

        # End Variable

        # Begin Variable

          Name = CVlf::Instance()->chan[3]->mCommPlan.mode9
          Decl_type = bool
          Usage = G
          Value = false

        # End Variable

        # Begin Variable

          Name = CVlf::Instance()->chan[3]->mCommPlan.modeHIDAR
          Decl_type = bool
          Usage = G
          Value = false

        # End Variable

        # Begin Variable

          Name = CVlf::Instance()->chan[3]->mCommPlan.mode23
          Decl_type = bool
          Usage = G
          Value = false

        # End Variable

        # Begin Variable

          Name = CVlf::Instance()->chan[4]->mCommPlan.mode9
          Decl_type = bool
          Usage = G
          Value = false

        # End Variable

        # Begin Variable

          Name = CVlf::Instance()->chan[4]->mCommPlan.modeHIDAR
          Decl_type = bool
          Usage = G
          Value = false

        # End Variable

        # Begin Variable

          Name = CVlf::Instance()->chan[4]->mCommPlan.mode23
          Decl_type = bool
          Usage = G
          Value = true

        # End Variable

        # Begin Removed Variable

          Name = mSearchKeyEffectArray[2].keyBankLoc
          Decl_type = unsigned
          Usage = N
          Value = 1

        # End Removed Variable

        # Begin Removed Variable

          Name = mSearchKeyEffectArray[2].keyBankSegLoc
          Decl_type = unsigned
          Usage = N
          Value = 1

        # End Removed Variable

        # Begin Removed Variable

          Name = mSearchKeyEffectArray[3].keyBankLoc
          Decl_type = unsigned
          Usage = N
          Value = 1

        # End Removed Variable

        # Begin Removed Variable

          Name = mSearchKeyEffectArray[3].keyBankSegLoc
          Decl_type = unsigned
          Usage = N
          Value = 1

        # End Removed Variable

        # Begin Removed Variable

          Name = mSearchKeyEffectArray[4].keyBankLoc
          Decl_type = unsigned
          Usage = N
          Value = 1

        # End Removed Variable

        # Begin Removed Variable

          Name = mSearchKeyEffectArray[4].keyBankSegLoc
          Decl_type = unsigned
          Usage = N
          Value = 1

        # End Removed Variable

        # Begin Removed Variable

          Name = mSearchKeyEffectArray[0].keyBankSegLoc
          Decl_type = unsigned
          Usage = M
          Value = 0x00000001

        # End Removed Variable

        # Begin Removed Variable

          Name = mSearchKeyEffectArray[0].reserved
          Decl_type = unsigned
          Usage = M
          Value = 0x00000001

        # End Removed Variable

        # Begin Removed Variable

          Name = mSearchKeyEffectArray[1].keyBankLoc
          Decl_type = unsigned
          Usage = M
          Value = 0x00000001

        # End Removed Variable

        # Begin Removed Variable

          Name = mSearchKeyEffectArray[1].reserved
          Decl_type = unsigned
          Usage = M
          Value = 0x00000001

        # End Removed Variable

        # Begin Removed Variable

          Name = mSearchKeyEffectArray[2].keyBankLoc
          Decl_type = unsigned
          Usage = M
          Value = 0x00000001

        # End Removed Variable

        # Begin Removed Variable

          Name = mSearchKeyEffectArray[2].keyBankLoc
          Decl_type = unsigned
          Usage = M
          Value = 0x00000001

        # End Removed Variable

        # Begin Removed Variable

          Name = mSearchKeyEffectArray[2].keyBankSegLoc
          Decl_type = unsigned
          Usage = M
          Value = 0x00000001

        # End Removed Variable

        # Begin Removed Variable

          Name = mSearchKeyEffectArray[2].keyBankSegLoc
          Decl_type = unsigned
          Usage = M
          Value = 0x00000001

        # End Removed Variable

        # Begin Removed Variable

          Name = mSearchKeyEffectArray[2].reserved
          Decl_type = unsigned
          Usage = M
          Value = 0x00000001

        # End Removed Variable

        # Begin Removed Variable

          Name = mSearchKeyEffectArray[3].keyBankLoc
          Decl_type = unsigned
          Usage = M
          Value = 0x00000001

        # End Removed Variable

        # Begin Removed Variable

          Name = mSearchKeyEffectArray[3].keyBankLoc
          Decl_type = unsigned
          Usage = M
          Value = 0x00000001

        # End Removed Variable

        # Begin Removed Variable

          Name = mSearchKeyEffectArray[3].keyBankSegLoc
          Decl_type = unsigned
          Usage = M
          Value = 0x00000001

        # End Removed Variable

        # Begin Removed Variable

          Name = mSearchKeyEffectArray[3].keyBankSegLoc
          Decl_type = unsigned
          Usage = M
          Value = 0x00000001

        # End Removed Variable

        # Begin Removed Variable

          Name = mSearchKeyEffectArray[3].reserved
          Decl_type = unsigned
          Usage = M
          Value = 0x00000001

        # End Removed Variable

        # Begin Removed Variable

          Name = mSearchKeyEffectArray[4].keyBankLoc
          Decl_type = unsigned
          Usage = M
          Value = 0x00000001

        # End Removed Variable

        # Begin Removed Variable

          Name = mSearchKeyEffectArray[4].keyBankLoc
          Decl_type = unsigned
          Usage = M
          Value = 0x00000001

        # End Removed Variable

        # Begin Removed Variable

          Name = mSearchKeyEffectArray[4].keyBankSegLoc
          Decl_type = unsigned
          Usage = M
          Value = 0x00000001

        # End Removed Variable

        # Begin Removed Variable

          Name = mSearchKeyEffectArray[4].keyBankSegLoc
          Decl_type = unsigned
          Usage = M
          Value = 0x00000001

        # End Removed Variable

        # Begin Removed Variable

          Name = mSearchKeyEffectArray[4].reserved
          Decl_type = unsigned
          Usage = M
          Value = 0x00000001

        # End Removed Variable

        # Begin Removed Variable

          Name = mData->KeyEffectData
          Decl_type = Key_Effectivity_Data_Type
          Usage = Z
          Frozen = T

        # End Removed Variable

        # Begin Removed Variable

          Name = mSearchKeyEffectArray[0]
          Decl_type = Key_Bank_Info_Type
          Usage = M

        # End Removed Variable

        # Begin Removed Variable

          Name = mSearchKeyEffectArray[1]
          Decl_type = Key_Bank_Info_Type
          Usage = M

        # End Removed Variable

        # Begin Removed Variable

          Name = mSearchKeyEffectArray[2]
          Decl_type = Key_Bank_Info_Type
          Usage = M

        # End Removed Variable

        # Begin Removed Variable

          Name = mSearchKeyEffectArray[3]
          Decl_type = Key_Bank_Info_Type
          Usage = M

        # End Removed Variable

        # Begin Removed Variable

          Name = mSearchKeyEffectArray[4]
          Decl_type = Key_Bank_Info_Type
          Usage = M

        # End Removed Variable

      # Begin TC Stub

        Procedure = CTimeLoad::GetVlfTime
  Overloading = Prototype

  # Begin Overloading
  # End Overloading

        # Begin TC Stub Return Value

          Name = %.offset
          Type = unsigned short
          Value = 0

        # End TC Stub Return Value

        # Begin TC Stub Return Value

          Name = %.doy
          Type = unsigned short
          Value = 100

        # End TC Stub Return Value

        # Begin TC Stub Return Value

          Name = %.frames
          Type = unsigned short
          Value = 0

        # End TC Stub Return Value

        # Begin TC Stub Return Value

          Name = %.sec
          Type = unsigned int
          Value = 0

        # End TC Stub Return Value

      # End TC Stub

      # Begin TC Stub

        Procedure = CKeyEffectData::getDayOfYear
  Overloading = Prototype

  # Begin Overloading
Date_Type
  # End Overloading

        # Begin TC Stub Return Value

          Name = %
          Type = UINT2
          Value = 2

        # End TC Stub Return Value

      # Begin TC Stub TC Hit Count

        Setting = 2
        Specified = 1
      # End TC Stub TC Hit Count

      # End TC Stub

    # End Test Case

    # Begin Test Case

      File = E:\CVRi1\SD&D\Software\VLF_Software\Source\Projects\KgrVpApp\src\MGR\CKeyEffectData.cc
      Procedure = CKeyEffectData::checkForRollover
      Procedure Number = 117
      Member Of = 1
      Creation Date = Apr 09 2020 10:40:40
      Description = chan 4 all mCommPlans=true, chan 4 rollover due to key-99

      # Begin Declarations
// Configure input parameter (Write_Key_Effectivity_Data_Msg_Type* mData)

static const unsigned short NUM_KEYS = 100;
static Write_Key_Effectivity_Data_Msg_Type ldra_qq_lv_91;
static Date_Type s_date;
static Key_Effectivity_Data_Type s_key_eff[NUM_KEYS]; 

s_date.Year = 2020;     //4-digits
s_date.Month = 1;       //1-12
s_date.Day = 1;         //1-31

for ( int idx = 0; idx < 100; idx++ )
{
  s_key_eff[idx].keyBankLoc = NO_BANK; 
  s_key_eff[idx].keyBankSegLoc = 0;
  s_key_eff[idx].keyValid = 1;      //0=false, 1=true
  s_key_eff[idx].reserved = 0;
  s_key_eff[idx].keyEffectDate = s_date;
  s_key_eff[idx].keyShortTitle[0] = NULL;
}

ldra_qq_lv_91.numKeys = NUM_KEYS; // unsgined, 8 bit, 0-100, # of TEKs 
ldra_qq_lv_91.lastMsg = 0;        // unsigned, 8 bit, 0/1 flag
ldra_qq_lv_91.reserved = 0;       // unsigned, 16 bit, 0 
for ( int idx = 0; idx < NUM_KEYS; idx++ )
{
  ldra_qq_lv_91.KeyEffectData[idx] = s_key_eff[idx];
}

// Test data that results in rollover
ldra_qq_lv_91.KeyEffectData[99].keyBankLoc = MEDLEY_BANK2; 
ldra_qq_lv_91.KeyEffectData[99].keyBankSegLoc = 99; 
ldra_qq_lv_91.KeyEffectData[99].keyValid = 0;
      # End Declarations

      # Begin Global Declarations
/*
 * Test case global declaration code will be placed here
 * Variables declared in this section are at global scope
 */
      # End Global Declarations

        # Begin Variable

          Name = mData
          Decl_type = Write_Key_Effectivity_Data_Msg_Type*
          Usage = Z
          Value = &ldra_qq_lv_91

        # End Variable

        # Begin Variable

          Name = mTEKRollover[0]
          Decl_type = bool
          Usage = N
          Value = false

        # End Variable

        # Begin Variable

          Name = mTEKRollover[1]
          Decl_type = bool
          Usage = N
          Value = false

        # End Variable

        # Begin Variable

          Name = mTEKRollover[2]
          Decl_type = bool
          Usage = N
          Value = false

        # End Variable

        # Begin Variable

          Name = mTEKRollover[3]
          Decl_type = bool
          Usage = N
          Value = false

        # End Variable

        # Begin Variable

          Name = mTEKRollover[4]
          Decl_type = bool
          Usage = N
          Value = true

        # End Variable

        # Begin Variable

          Name = mTEKRollover[0]
          Decl_type = bool
          Usage = M
          Value = false

        # End Variable

        # Begin Variable

          Name = mTEKRollover[1]
          Decl_type = bool
          Usage = M
          Value = false

        # End Variable

        # Begin Variable

          Name = mTEKRollover[2]
          Decl_type = bool
          Usage = M
          Value = false

        # End Variable

        # Begin Variable

          Name = mTEKRollover[3]
          Decl_type = bool
          Usage = M
          Value = false

        # End Variable

        # Begin Variable

          Name = mTEKRollover[4]
          Decl_type = bool
          Usage = M
          Value = false

        # End Variable

        # Begin Variable

          Name = mSearchKeyEffectArray[0].keyBankLoc
          Decl_type = unsigned
          Usage = M
          Value = RESERVED_BANK1

        # End Variable

        # Begin Variable

          Name = mSearchKeyEffectArray[0].keyBankSegLoc
          Decl_type = unsigned
          Usage = M
          Value = 1

        # End Variable

        # Begin Variable

          Name = mSearchKeyEffectArray[1].keyBankLoc
          Decl_type = unsigned
          Usage = M
          Value = RESERVED_BANK1

        # End Variable

        # Begin Variable

          Name = mSearchKeyEffectArray[1].keyBankSegLoc
          Decl_type = unsigned
          Usage = M
          Value = 1

        # End Variable

        # Begin Variable

          Name = mSearchKeyEffectArray[2].keyBankLoc
          Decl_type = unsigned
          Usage = M
          Value = RESERVED_BANK1

        # End Variable

        # Begin Variable

          Name = mSearchKeyEffectArray[2].keyBankSegLoc
          Decl_type = unsigned
          Usage = M
          Value = 1

        # End Variable

        # Begin Variable

          Name = mSearchKeyEffectArray[3].keyBankLoc
          Decl_type = unsigned
          Usage = M
          Value = RESERVED_BANK1

        # End Variable

        # Begin Variable

          Name = mSearchKeyEffectArray[3].keyBankSegLoc
          Decl_type = unsigned
          Usage = M
          Value = 1

        # End Variable

        # Begin Variable

          Name = mSearchKeyEffectArray[4].keyBankLoc
          Decl_type = unsigned
          Usage = M
          Value = MEDLEY_BANK2

        # End Variable

        # Begin Variable

          Name = mSearchKeyEffectArray[4].keyBankSegLoc
          Decl_type = unsigned
          Usage = M
          Value = 99

        # End Variable

        # Begin Variable

          Name = CVlf::Instance()->chan[0]->mCommPlan.mode9
          Decl_type = bool
          Usage = G
          Value = false

        # End Variable

        # Begin Variable

          Name = CVlf::Instance()->chan[0]->mCommPlan.modeHIDAR
          Decl_type = bool
          Usage = G
          Value = false

        # End Variable

        # Begin Variable

          Name = CVlf::Instance()->chan[0]->mCommPlan.mode23
          Decl_type = bool
          Usage = G
          Value = false

        # End Variable

        # Begin Variable

          Name = CVlf::Instance()->chan[1]->mCommPlan.mode9
          Decl_type = bool
          Usage = G
          Value = false

        # End Variable

        # Begin Variable

          Name = CVlf::Instance()->chan[1]->mCommPlan.modeHIDAR
          Decl_type = bool
          Usage = G
          Value = false

        # End Variable

        # Begin Variable

          Name = CVlf::Instance()->chan[1]->mCommPlan.mode23
          Decl_type = bool
          Usage = G
          Value = false

        # End Variable

        # Begin Variable

          Name = CVlf::Instance()->chan[2]->mCommPlan.mode9
          Decl_type = bool
          Usage = G
          Value = false

        # End Variable

        # Begin Variable

          Name = CVlf::Instance()->chan[2]->mCommPlan.modeHIDAR
          Decl_type = bool
          Usage = G
          Value = false

        # End Variable

        # Begin Variable

          Name = CVlf::Instance()->chan[2]->mCommPlan.mode23
          Decl_type = bool
          Usage = G
          Value = false

        # End Variable

        # Begin Variable

          Name = CVlf::Instance()->chan[3]->mCommPlan.mode9
          Decl_type = bool
          Usage = G
          Value = false

        # End Variable

        # Begin Variable

          Name = CVlf::Instance()->chan[3]->mCommPlan.modeHIDAR
          Decl_type = bool
          Usage = G
          Value = false

        # End Variable

        # Begin Variable

          Name = CVlf::Instance()->chan[3]->mCommPlan.mode23
          Decl_type = bool
          Usage = G
          Value = false

        # End Variable

        # Begin Variable

          Name = CVlf::Instance()->chan[4]->mCommPlan.mode9
          Decl_type = bool
          Usage = G
          Value = true

        # End Variable

        # Begin Variable

          Name = CVlf::Instance()->chan[4]->mCommPlan.modeHIDAR
          Decl_type = bool
          Usage = G
          Value = true

        # End Variable

        # Begin Variable

          Name = CVlf::Instance()->chan[4]->mCommPlan.mode23
          Decl_type = bool
          Usage = G
          Value = true

        # End Variable

        # Begin Removed Variable

          Name = mSearchKeyEffectArray[2].keyBankLoc
          Decl_type = unsigned
          Usage = N
          Value = 1

        # End Removed Variable

        # Begin Removed Variable

          Name = mSearchKeyEffectArray[2].keyBankSegLoc
          Decl_type = unsigned
          Usage = N
          Value = 1

        # End Removed Variable

        # Begin Removed Variable

          Name = mSearchKeyEffectArray[3].keyBankLoc
          Decl_type = unsigned
          Usage = N
          Value = 1

        # End Removed Variable

        # Begin Removed Variable

          Name = mSearchKeyEffectArray[3].keyBankSegLoc
          Decl_type = unsigned
          Usage = N
          Value = 1

        # End Removed Variable

        # Begin Removed Variable

          Name = mSearchKeyEffectArray[4].keyBankLoc
          Decl_type = unsigned
          Usage = N
          Value = 1

        # End Removed Variable

        # Begin Removed Variable

          Name = mSearchKeyEffectArray[4].keyBankSegLoc
          Decl_type = unsigned
          Usage = N
          Value = 1

        # End Removed Variable

        # Begin Removed Variable

          Name = mSearchKeyEffectArray[0].keyBankSegLoc
          Decl_type = unsigned
          Usage = M
          Value = 0x00000001

        # End Removed Variable

        # Begin Removed Variable

          Name = mSearchKeyEffectArray[0].reserved
          Decl_type = unsigned
          Usage = M
          Value = 0x00000001

        # End Removed Variable

        # Begin Removed Variable

          Name = mSearchKeyEffectArray[1].keyBankLoc
          Decl_type = unsigned
          Usage = M
          Value = 0x00000001

        # End Removed Variable

        # Begin Removed Variable

          Name = mSearchKeyEffectArray[1].reserved
          Decl_type = unsigned
          Usage = M
          Value = 0x00000001

        # End Removed Variable

        # Begin Removed Variable

          Name = mSearchKeyEffectArray[2].keyBankLoc
          Decl_type = unsigned
          Usage = M
          Value = 0x00000001

        # End Removed Variable

        # Begin Removed Variable

          Name = mSearchKeyEffectArray[2].keyBankLoc
          Decl_type = unsigned
          Usage = M
          Value = 0x00000001

        # End Removed Variable

        # Begin Removed Variable

          Name = mSearchKeyEffectArray[2].keyBankSegLoc
          Decl_type = unsigned
          Usage = M
          Value = 0x00000001

        # End Removed Variable

        # Begin Removed Variable

          Name = mSearchKeyEffectArray[2].keyBankSegLoc
          Decl_type = unsigned
          Usage = M
          Value = 0x00000001

        # End Removed Variable

        # Begin Removed Variable

          Name = mSearchKeyEffectArray[2].reserved
          Decl_type = unsigned
          Usage = M
          Value = 0x00000001

        # End Removed Variable

        # Begin Removed Variable

          Name = mSearchKeyEffectArray[3].keyBankLoc
          Decl_type = unsigned
          Usage = M
          Value = 0x00000001

        # End Removed Variable

        # Begin Removed Variable

          Name = mSearchKeyEffectArray[3].keyBankLoc
          Decl_type = unsigned
          Usage = M
          Value = 0x00000001

        # End Removed Variable

        # Begin Removed Variable

          Name = mSearchKeyEffectArray[3].keyBankSegLoc
          Decl_type = unsigned
          Usage = M
          Value = 0x00000001

        # End Removed Variable

        # Begin Removed Variable

          Name = mSearchKeyEffectArray[3].keyBankSegLoc
          Decl_type = unsigned
          Usage = M
          Value = 0x00000001

        # End Removed Variable

        # Begin Removed Variable

          Name = mSearchKeyEffectArray[3].reserved
          Decl_type = unsigned
          Usage = M
          Value = 0x00000001

        # End Removed Variable

        # Begin Removed Variable

          Name = mSearchKeyEffectArray[4].keyBankLoc
          Decl_type = unsigned
          Usage = M
          Value = 0x00000001

        # End Removed Variable

        # Begin Removed Variable

          Name = mSearchKeyEffectArray[4].keyBankLoc
          Decl_type = unsigned
          Usage = M
          Value = 0x00000001

        # End Removed Variable

        # Begin Removed Variable

          Name = mSearchKeyEffectArray[4].keyBankSegLoc
          Decl_type = unsigned
          Usage = M
          Value = 0x00000001

        # End Removed Variable

        # Begin Removed Variable

          Name = mSearchKeyEffectArray[4].keyBankSegLoc
          Decl_type = unsigned
          Usage = M
          Value = 0x00000001

        # End Removed Variable

        # Begin Removed Variable

          Name = mSearchKeyEffectArray[4].reserved
          Decl_type = unsigned
          Usage = M
          Value = 0x00000001

        # End Removed Variable

        # Begin Removed Variable

          Name = mData->KeyEffectData
          Decl_type = Key_Effectivity_Data_Type
          Usage = Z
          Frozen = T

        # End Removed Variable

        # Begin Removed Variable

          Name = mSearchKeyEffectArray[0]
          Decl_type = Key_Bank_Info_Type
          Usage = M

        # End Removed Variable

        # Begin Removed Variable

          Name = mSearchKeyEffectArray[1]
          Decl_type = Key_Bank_Info_Type
          Usage = M

        # End Removed Variable

        # Begin Removed Variable

          Name = mSearchKeyEffectArray[2]
          Decl_type = Key_Bank_Info_Type
          Usage = M

        # End Removed Variable

        # Begin Removed Variable

          Name = mSearchKeyEffectArray[3]
          Decl_type = Key_Bank_Info_Type
          Usage = M

        # End Removed Variable

        # Begin Removed Variable

          Name = mSearchKeyEffectArray[4]
          Decl_type = Key_Bank_Info_Type
          Usage = M

        # End Removed Variable

      # Begin TC Stub

        Procedure = CTimeLoad::GetVlfTime
  Overloading = Prototype

  # Begin Overloading
  # End Overloading

        # Begin TC Stub Return Value

          Name = %.offset
          Type = unsigned short
          Value = 0

        # End TC Stub Return Value

        # Begin TC Stub Return Value

          Name = %.doy
          Type = unsigned short
          Value = 100

        # End TC Stub Return Value

        # Begin TC Stub Return Value

          Name = %.frames
          Type = unsigned short
          Value = 0

        # End TC Stub Return Value

        # Begin TC Stub Return Value

          Name = %.sec
          Type = unsigned int
          Value = 0

        # End TC Stub Return Value

      # End TC Stub

      # Begin TC Stub

        Procedure = CKeyEffectData::getDayOfYear
  Overloading = Prototype

  # Begin Overloading
Date_Type
  # End Overloading

        # Begin TC Stub Return Value

          Name = %
          Type = UINT2
          Value = 2

        # End TC Stub Return Value

      # Begin TC Stub TC Hit Count

        Setting = 2
        Specified = 1
      # End TC Stub TC Hit Count

      # End TC Stub

    # End Test Case

    # Begin Test Case

      File = E:\CVRi1\SD&D\Software\VLF_Software\Source\Projects\KgrVpApp\src\MGR\CKeyEffectData.cc
      Procedure = CKeyEffectData::checkForRollover
      Procedure Number = 117
      Member Of = 1
      Creation Date = Apr 09 2020 10:40:40
      Description = chan 3 all mCommPlans=true, chan 3 rollover due to key-51

      # Begin Declarations
// Configure input parameter (Write_Key_Effectivity_Data_Msg_Type* mData)

static const unsigned short NUM_KEYS = 100;
static Write_Key_Effectivity_Data_Msg_Type ldra_qq_lv_91;
static Date_Type s_date;
static Key_Effectivity_Data_Type s_key_eff[NUM_KEYS]; 

s_date.Year = 2020;     //4-digits
s_date.Month = 1;       //1-12
s_date.Day = 1;         //1-31

for ( int idx = 0; idx < 100; idx++ )
{
  s_key_eff[idx].keyBankLoc = NO_BANK; 
  s_key_eff[idx].keyBankSegLoc = 0;
  s_key_eff[idx].keyValid = 1;      //0=false, 1=true
  s_key_eff[idx].reserved = 0;
  s_key_eff[idx].keyEffectDate = s_date;
  s_key_eff[idx].keyShortTitle[0] = NULL;
}

ldra_qq_lv_91.numKeys = NUM_KEYS; // unsgined, 8 bit, 0-100, # of TEKs 
ldra_qq_lv_91.lastMsg = 0;        // unsigned, 8 bit, 0/1 flag
ldra_qq_lv_91.reserved = 0;       // unsigned, 16 bit, 0 
for ( int idx = 0; idx < NUM_KEYS; idx++ )
{
  ldra_qq_lv_91.KeyEffectData[idx] = s_key_eff[idx];
}

// Test data that results in rollover
ldra_qq_lv_91.KeyEffectData[51].keyBankLoc = NO_BANK; 
ldra_qq_lv_91.KeyEffectData[51].keyBankSegLoc = 0; 
ldra_qq_lv_91.KeyEffectData[51].keyValid = 0;
      # End Declarations

      # Begin Global Declarations
/*
 * Test case global declaration code will be placed here
 * Variables declared in this section are at global scope
 */
      # End Global Declarations

        # Begin Variable

          Name = mData
          Decl_type = Write_Key_Effectivity_Data_Msg_Type*
          Usage = Z
          Value = &ldra_qq_lv_91

        # End Variable

        # Begin Variable

          Name = mTEKRollover[0]
          Decl_type = bool
          Usage = N
          Value = false

        # End Variable

        # Begin Variable

          Name = mTEKRollover[1]
          Decl_type = bool
          Usage = N
          Value = false

        # End Variable

        # Begin Variable

          Name = mTEKRollover[2]
          Decl_type = bool
          Usage = N
          Value = false

        # End Variable

        # Begin Variable

          Name = mTEKRollover[3]
          Decl_type = bool
          Usage = N
          Value = true

        # End Variable

        # Begin Variable

          Name = mTEKRollover[4]
          Decl_type = bool
          Usage = N
          Value = false

        # End Variable

        # Begin Variable

          Name = mTEKRollover[0]
          Decl_type = bool
          Usage = M
          Value = false

        # End Variable

        # Begin Variable

          Name = mTEKRollover[1]
          Decl_type = bool
          Usage = M
          Value = false

        # End Variable

        # Begin Variable

          Name = mTEKRollover[2]
          Decl_type = bool
          Usage = M
          Value = false

        # End Variable

        # Begin Variable

          Name = mTEKRollover[3]
          Decl_type = bool
          Usage = M
          Value = false

        # End Variable

        # Begin Variable

          Name = mTEKRollover[4]
          Decl_type = bool
          Usage = M
          Value = false

        # End Variable

        # Begin Variable

          Name = mSearchKeyEffectArray[0].keyBankLoc
          Decl_type = unsigned
          Usage = M
          Value = RESERVED_BANK1

        # End Variable

        # Begin Variable

          Name = mSearchKeyEffectArray[0].keyBankSegLoc
          Decl_type = unsigned
          Usage = M
          Value = 1

        # End Variable

        # Begin Variable

          Name = mSearchKeyEffectArray[1].keyBankLoc
          Decl_type = unsigned
          Usage = M
          Value = RESERVED_BANK1

        # End Variable

        # Begin Variable

          Name = mSearchKeyEffectArray[1].keyBankSegLoc
          Decl_type = unsigned
          Usage = M
          Value = 1

        # End Variable

        # Begin Variable

          Name = mSearchKeyEffectArray[2].keyBankLoc
          Decl_type = unsigned
          Usage = M
          Value = RESERVED_BANK1

        # End Variable

        # Begin Variable

          Name = mSearchKeyEffectArray[2].keyBankSegLoc
          Decl_type = unsigned
          Usage = M
          Value = 1

        # End Variable

        # Begin Variable

          Name = mSearchKeyEffectArray[3].keyBankLoc
          Decl_type = unsigned
          Usage = M
          Value = NO_BANK

        # End Variable

        # Begin Variable

          Name = mSearchKeyEffectArray[3].keyBankSegLoc
          Decl_type = unsigned
          Usage = M
          Value = 0

        # End Variable

        # Begin Variable

          Name = mSearchKeyEffectArray[4].keyBankLoc
          Decl_type = unsigned
          Usage = M
          Value = RESERVED_BANK1

        # End Variable

        # Begin Variable

          Name = mSearchKeyEffectArray[4].keyBankSegLoc
          Decl_type = unsigned
          Usage = M
          Value = 1

        # End Variable

        # Begin Variable

          Name = CVlf::Instance()->chan[0]->mCommPlan.mode9
          Decl_type = bool
          Usage = G
          Value = false

        # End Variable

        # Begin Variable

          Name = CVlf::Instance()->chan[0]->mCommPlan.modeHIDAR
          Decl_type = bool
          Usage = G
          Value = false

        # End Variable

        # Begin Variable

          Name = CVlf::Instance()->chan[0]->mCommPlan.mode23
          Decl_type = bool
          Usage = G
          Value = false

        # End Variable

        # Begin Variable

          Name = CVlf::Instance()->chan[1]->mCommPlan.mode9
          Decl_type = bool
          Usage = G
          Value = false

        # End Variable

        # Begin Variable

          Name = CVlf::Instance()->chan[1]->mCommPlan.modeHIDAR
          Decl_type = bool
          Usage = G
          Value = false

        # End Variable

        # Begin Variable

          Name = CVlf::Instance()->chan[1]->mCommPlan.mode23
          Decl_type = bool
          Usage = G
          Value = false

        # End Variable

        # Begin Variable

          Name = CVlf::Instance()->chan[2]->mCommPlan.mode9
          Decl_type = bool
          Usage = G
          Value = false

        # End Variable

        # Begin Variable

          Name = CVlf::Instance()->chan[2]->mCommPlan.modeHIDAR
          Decl_type = bool
          Usage = G
          Value = false

        # End Variable

        # Begin Variable

          Name = CVlf::Instance()->chan[2]->mCommPlan.mode23
          Decl_type = bool
          Usage = G
          Value = false

        # End Variable

        # Begin Variable

          Name = CVlf::Instance()->chan[3]->mCommPlan.mode9
          Decl_type = bool
          Usage = G
          Value = true

        # End Variable

        # Begin Variable

          Name = CVlf::Instance()->chan[3]->mCommPlan.modeHIDAR
          Decl_type = bool
          Usage = G
          Value = true

        # End Variable

        # Begin Variable

          Name = CVlf::Instance()->chan[3]->mCommPlan.mode23
          Decl_type = bool
          Usage = G
          Value = true

        # End Variable

        # Begin Variable

          Name = CVlf::Instance()->chan[4]->mCommPlan.mode9
          Decl_type = bool
          Usage = G
          Value = false

        # End Variable

        # Begin Variable

          Name = CVlf::Instance()->chan[4]->mCommPlan.modeHIDAR
          Decl_type = bool
          Usage = G
          Value = false

        # End Variable

        # Begin Variable

          Name = CVlf::Instance()->chan[4]->mCommPlan.mode23
          Decl_type = bool
          Usage = G
          Value = false

        # End Variable

        # Begin Removed Variable

          Name = mSearchKeyEffectArray[2].keyBankLoc
          Decl_type = unsigned
          Usage = N
          Value = 1

        # End Removed Variable

        # Begin Removed Variable

          Name = mSearchKeyEffectArray[2].keyBankSegLoc
          Decl_type = unsigned
          Usage = N
          Value = 1

        # End Removed Variable

        # Begin Removed Variable

          Name = mSearchKeyEffectArray[3].keyBankLoc
          Decl_type = unsigned
          Usage = N
          Value = 1

        # End Removed Variable

        # Begin Removed Variable

          Name = mSearchKeyEffectArray[3].keyBankSegLoc
          Decl_type = unsigned
          Usage = N
          Value = 1

        # End Removed Variable

        # Begin Removed Variable

          Name = mSearchKeyEffectArray[4].keyBankLoc
          Decl_type = unsigned
          Usage = N
          Value = 1

        # End Removed Variable

        # Begin Removed Variable

          Name = mSearchKeyEffectArray[4].keyBankSegLoc
          Decl_type = unsigned
          Usage = N
          Value = 1

        # End Removed Variable

        # Begin Removed Variable

          Name = mSearchKeyEffectArray[0].keyBankSegLoc
          Decl_type = unsigned
          Usage = M
          Value = 0x00000001

        # End Removed Variable

        # Begin Removed Variable

          Name = mSearchKeyEffectArray[0].reserved
          Decl_type = unsigned
          Usage = M
          Value = 0x00000001

        # End Removed Variable

        # Begin Removed Variable

          Name = mSearchKeyEffectArray[1].keyBankLoc
          Decl_type = unsigned
          Usage = M
          Value = 0x00000001

        # End Removed Variable

        # Begin Removed Variable

          Name = mSearchKeyEffectArray[1].reserved
          Decl_type = unsigned
          Usage = M
          Value = 0x00000001

        # End Removed Variable

        # Begin Removed Variable

          Name = mSearchKeyEffectArray[2].keyBankLoc
          Decl_type = unsigned
          Usage = M
          Value = 0x00000001

        # End Removed Variable

        # Begin Removed Variable

          Name = mSearchKeyEffectArray[2].keyBankLoc
          Decl_type = unsigned
          Usage = M
          Value = 0x00000001

        # End Removed Variable

        # Begin Removed Variable

          Name = mSearchKeyEffectArray[2].keyBankSegLoc
          Decl_type = unsigned
          Usage = M
          Value = 0x00000001

        # End Removed Variable

        # Begin Removed Variable

          Name = mSearchKeyEffectArray[2].keyBankSegLoc
          Decl_type = unsigned
          Usage = M
          Value = 0x00000001

        # End Removed Variable

        # Begin Removed Variable

          Name = mSearchKeyEffectArray[2].reserved
          Decl_type = unsigned
          Usage = M
          Value = 0x00000001

        # End Removed Variable

        # Begin Removed Variable

          Name = mSearchKeyEffectArray[3].keyBankLoc
          Decl_type = unsigned
          Usage = M
          Value = 0x00000001

        # End Removed Variable

        # Begin Removed Variable

          Name = mSearchKeyEffectArray[3].keyBankLoc
          Decl_type = unsigned
          Usage = M
          Value = 0x00000001

        # End Removed Variable

        # Begin Removed Variable

          Name = mSearchKeyEffectArray[3].keyBankSegLoc
          Decl_type = unsigned
          Usage = M
          Value = 0x00000001

        # End Removed Variable

        # Begin Removed Variable

          Name = mSearchKeyEffectArray[3].keyBankSegLoc
          Decl_type = unsigned
          Usage = M
          Value = 0x00000001

        # End Removed Variable

        # Begin Removed Variable

          Name = mSearchKeyEffectArray[3].reserved
          Decl_type = unsigned
          Usage = M
          Value = 0x00000001

        # End Removed Variable

        # Begin Removed Variable

          Name = mSearchKeyEffectArray[4].keyBankLoc
          Decl_type = unsigned
          Usage = M
          Value = 0x00000001

        # End Removed Variable

        # Begin Removed Variable

          Name = mSearchKeyEffectArray[4].keyBankLoc
          Decl_type = unsigned
          Usage = M
          Value = 0x00000001

        # End Removed Variable

        # Begin Removed Variable

          Name = mSearchKeyEffectArray[4].keyBankSegLoc
          Decl_type = unsigned
          Usage = M
          Value = 0x00000001

        # End Removed Variable

        # Begin Removed Variable

          Name = mSearchKeyEffectArray[4].keyBankSegLoc
          Decl_type = unsigned
          Usage = M
          Value = 0x00000001

        # End Removed Variable

        # Begin Removed Variable

          Name = mSearchKeyEffectArray[4].reserved
          Decl_type = unsigned
          Usage = M
          Value = 0x00000001

        # End Removed Variable

        # Begin Removed Variable

          Name = mData->KeyEffectData
          Decl_type = Key_Effectivity_Data_Type
          Usage = Z
          Frozen = T

        # End Removed Variable

        # Begin Removed Variable

          Name = mSearchKeyEffectArray[0]
          Decl_type = Key_Bank_Info_Type
          Usage = M

        # End Removed Variable

        # Begin Removed Variable

          Name = mSearchKeyEffectArray[1]
          Decl_type = Key_Bank_Info_Type
          Usage = M

        # End Removed Variable

        # Begin Removed Variable

          Name = mSearchKeyEffectArray[2]
          Decl_type = Key_Bank_Info_Type
          Usage = M

        # End Removed Variable

        # Begin Removed Variable

          Name = mSearchKeyEffectArray[3]
          Decl_type = Key_Bank_Info_Type
          Usage = M

        # End Removed Variable

        # Begin Removed Variable

          Name = mSearchKeyEffectArray[4]
          Decl_type = Key_Bank_Info_Type
          Usage = M

        # End Removed Variable

      # Begin TC Stub

        Procedure = CTimeLoad::GetVlfTime
  Overloading = Prototype

  # Begin Overloading
  # End Overloading

        # Begin TC Stub Return Value

          Name = %.offset
          Type = unsigned short
          Value = 0

        # End TC Stub Return Value

        # Begin TC Stub Return Value

          Name = %.doy
          Type = unsigned short
          Value = 100

        # End TC Stub Return Value

        # Begin TC Stub Return Value

          Name = %.frames
          Type = unsigned short
          Value = 0

        # End TC Stub Return Value

        # Begin TC Stub Return Value

          Name = %.sec
          Type = unsigned int
          Value = 0

        # End TC Stub Return Value

      # End TC Stub

      # Begin TC Stub

        Procedure = CKeyEffectData::getDayOfYear
  Overloading = Prototype

  # Begin Overloading
Date_Type
  # End Overloading

        # Begin TC Stub Return Value

          Name = %
          Type = UINT2
          Value = 2

        # End TC Stub Return Value

      # Begin TC Stub TC Hit Count

        Setting = 2
        Specified = 1
      # End TC Stub TC Hit Count

      # End TC Stub

    # End Test Case

    # Begin Test Case

      File = E:\CVRi1\SD&D\Software\VLF_Software\Source\Projects\KgrVpApp\src\MGR\CKeyEffectData.cc
      Procedure = CKeyEffectData::checkForRollover
      Procedure Number = 117
      Member Of = 1
      Creation Date = Apr 09 2020 10:40:40
      Description = chan 3 m9 & mHi mCommPlans=true, chan 3 rollover due to key-51, keyValid=t doy >

      # Begin Declarations
// Configure input parameter (Write_Key_Effectivity_Data_Msg_Type* mData)

static const unsigned short NUM_KEYS = 100;
static Write_Key_Effectivity_Data_Msg_Type ldra_qq_lv_91;
static Date_Type s_date;
static Key_Effectivity_Data_Type s_key_eff[NUM_KEYS]; 

s_date.Year = 2020;     //4-digits
s_date.Month = 1;       //1-12
s_date.Day = 1;         //1-31

for ( int idx = 0; idx < 100; idx++ )
{
  s_key_eff[idx].keyBankLoc = NO_BANK; 
  s_key_eff[idx].keyBankSegLoc = 0;
  s_key_eff[idx].keyValid = 1;      //0=false, 1=true
  s_key_eff[idx].reserved = 0;
  s_key_eff[idx].keyEffectDate = s_date;
  s_key_eff[idx].keyShortTitle[0] = NULL;
}

ldra_qq_lv_91.numKeys = NUM_KEYS; // unsgined, 8 bit, 0-100, # of TEKs 
ldra_qq_lv_91.lastMsg = 0;        // unsigned, 8 bit, 0/1 flag
ldra_qq_lv_91.reserved = 0;       // unsigned, 16 bit, 0 
for ( int idx = 0; idx < NUM_KEYS; idx++ )
{
  ldra_qq_lv_91.KeyEffectData[idx] = s_key_eff[idx];
}

// Test data that results in rollover
ldra_qq_lv_91.KeyEffectData[51].keyBankLoc = NO_BANK; 
ldra_qq_lv_91.KeyEffectData[51].keyBankSegLoc = 0; 
ldra_qq_lv_91.KeyEffectData[51].keyValid = 1;
      # End Declarations

      # Begin Global Declarations
/*
 * Test case global declaration code will be placed here
 * Variables declared in this section are at global scope
 */
      # End Global Declarations

        # Begin Variable

          Name = mData
          Decl_type = Write_Key_Effectivity_Data_Msg_Type*
          Usage = Z
          Value = &ldra_qq_lv_91

        # End Variable

        # Begin Variable

          Name = mTEKRollover[0]
          Decl_type = bool
          Usage = N
          Value = false

        # End Variable

        # Begin Variable

          Name = mTEKRollover[1]
          Decl_type = bool
          Usage = N
          Value = false

        # End Variable

        # Begin Variable

          Name = mTEKRollover[2]
          Decl_type = bool
          Usage = N
          Value = false

        # End Variable

        # Begin Variable

          Name = mTEKRollover[3]
          Decl_type = bool
          Usage = N
          Value = true

        # End Variable

        # Begin Variable

          Name = mTEKRollover[4]
          Decl_type = bool
          Usage = N
          Value = false

        # End Variable

        # Begin Variable

          Name = mTEKRollover[0]
          Decl_type = bool
          Usage = M
          Value = false

        # End Variable

        # Begin Variable

          Name = mTEKRollover[1]
          Decl_type = bool
          Usage = M
          Value = false

        # End Variable

        # Begin Variable

          Name = mTEKRollover[2]
          Decl_type = bool
          Usage = M
          Value = false

        # End Variable

        # Begin Variable

          Name = mTEKRollover[3]
          Decl_type = bool
          Usage = M
          Value = false

        # End Variable

        # Begin Variable

          Name = mTEKRollover[4]
          Decl_type = bool
          Usage = M
          Value = false

        # End Variable

        # Begin Variable

          Name = mSearchKeyEffectArray[0].keyBankLoc
          Decl_type = unsigned
          Usage = M
          Value = RESERVED_BANK1

        # End Variable

        # Begin Variable

          Name = mSearchKeyEffectArray[0].keyBankSegLoc
          Decl_type = unsigned
          Usage = M
          Value = 1

        # End Variable

        # Begin Variable

          Name = mSearchKeyEffectArray[1].keyBankLoc
          Decl_type = unsigned
          Usage = M
          Value = RESERVED_BANK1

        # End Variable

        # Begin Variable

          Name = mSearchKeyEffectArray[1].keyBankSegLoc
          Decl_type = unsigned
          Usage = M
          Value = 1

        # End Variable

        # Begin Variable

          Name = mSearchKeyEffectArray[2].keyBankLoc
          Decl_type = unsigned
          Usage = M
          Value = RESERVED_BANK1

        # End Variable

        # Begin Variable

          Name = mSearchKeyEffectArray[2].keyBankSegLoc
          Decl_type = unsigned
          Usage = M
          Value = 1

        # End Variable

        # Begin Variable

          Name = mSearchKeyEffectArray[3].keyBankLoc
          Decl_type = unsigned
          Usage = M
          Value = NO_BANK

        # End Variable

        # Begin Variable

          Name = mSearchKeyEffectArray[3].keyBankSegLoc
          Decl_type = unsigned
          Usage = M
          Value = 0

        # End Variable

        # Begin Variable

          Name = mSearchKeyEffectArray[4].keyBankLoc
          Decl_type = unsigned
          Usage = M
          Value = RESERVED_BANK1

        # End Variable

        # Begin Variable

          Name = mSearchKeyEffectArray[4].keyBankSegLoc
          Decl_type = unsigned
          Usage = M
          Value = 1

        # End Variable

        # Begin Variable

          Name = CVlf::Instance()->chan[0]->mCommPlan.mode9
          Decl_type = bool
          Usage = G
          Value = false

        # End Variable

        # Begin Variable

          Name = CVlf::Instance()->chan[0]->mCommPlan.modeHIDAR
          Decl_type = bool
          Usage = G
          Value = false

        # End Variable

        # Begin Variable

          Name = CVlf::Instance()->chan[0]->mCommPlan.mode23
          Decl_type = bool
          Usage = G
          Value = false

        # End Variable

        # Begin Variable

          Name = CVlf::Instance()->chan[1]->mCommPlan.mode9
          Decl_type = bool
          Usage = G
          Value = false

        # End Variable

        # Begin Variable

          Name = CVlf::Instance()->chan[1]->mCommPlan.modeHIDAR
          Decl_type = bool
          Usage = G
          Value = false

        # End Variable

        # Begin Variable

          Name = CVlf::Instance()->chan[1]->mCommPlan.mode23
          Decl_type = bool
          Usage = G
          Value = false

        # End Variable

        # Begin Variable

          Name = CVlf::Instance()->chan[2]->mCommPlan.mode9
          Decl_type = bool
          Usage = G
          Value = false

        # End Variable

        # Begin Variable

          Name = CVlf::Instance()->chan[2]->mCommPlan.modeHIDAR
          Decl_type = bool
          Usage = G
          Value = false

        # End Variable

        # Begin Variable

          Name = CVlf::Instance()->chan[2]->mCommPlan.mode23
          Decl_type = bool
          Usage = G
          Value = false

        # End Variable

        # Begin Variable

          Name = CVlf::Instance()->chan[3]->mCommPlan.mode9
          Decl_type = bool
          Usage = G
          Value = true

        # End Variable

        # Begin Variable

          Name = CVlf::Instance()->chan[3]->mCommPlan.modeHIDAR
          Decl_type = bool
          Usage = G
          Value = true

        # End Variable

        # Begin Variable

          Name = CVlf::Instance()->chan[3]->mCommPlan.mode23
          Decl_type = bool
          Usage = G
          Value = false

        # End Variable

        # Begin Variable

          Name = CVlf::Instance()->chan[4]->mCommPlan.mode9
          Decl_type = bool
          Usage = G
          Value = false

        # End Variable

        # Begin Variable

          Name = CVlf::Instance()->chan[4]->mCommPlan.modeHIDAR
          Decl_type = bool
          Usage = G
          Value = false

        # End Variable

        # Begin Variable

          Name = CVlf::Instance()->chan[4]->mCommPlan.mode23
          Decl_type = bool
          Usage = G
          Value = false

        # End Variable

        # Begin Removed Variable

          Name = mSearchKeyEffectArray[2].keyBankLoc
          Decl_type = unsigned
          Usage = N
          Value = 1

        # End Removed Variable

        # Begin Removed Variable

          Name = mSearchKeyEffectArray[2].keyBankSegLoc
          Decl_type = unsigned
          Usage = N
          Value = 1

        # End Removed Variable

        # Begin Removed Variable

          Name = mSearchKeyEffectArray[3].keyBankLoc
          Decl_type = unsigned
          Usage = N
          Value = 1

        # End Removed Variable

        # Begin Removed Variable

          Name = mSearchKeyEffectArray[3].keyBankSegLoc
          Decl_type = unsigned
          Usage = N
          Value = 1

        # End Removed Variable

        # Begin Removed Variable

          Name = mSearchKeyEffectArray[4].keyBankLoc
          Decl_type = unsigned
          Usage = N
          Value = 1

        # End Removed Variable

        # Begin Removed Variable

          Name = mSearchKeyEffectArray[4].keyBankSegLoc
          Decl_type = unsigned
          Usage = N
          Value = 1

        # End Removed Variable

        # Begin Removed Variable

          Name = mSearchKeyEffectArray[0].keyBankSegLoc
          Decl_type = unsigned
          Usage = M
          Value = 0x00000001

        # End Removed Variable

        # Begin Removed Variable

          Name = mSearchKeyEffectArray[0].reserved
          Decl_type = unsigned
          Usage = M
          Value = 0x00000001

        # End Removed Variable

        # Begin Removed Variable

          Name = mSearchKeyEffectArray[1].keyBankLoc
          Decl_type = unsigned
          Usage = M
          Value = 0x00000001

        # End Removed Variable

        # Begin Removed Variable

          Name = mSearchKeyEffectArray[1].reserved
          Decl_type = unsigned
          Usage = M
          Value = 0x00000001

        # End Removed Variable

        # Begin Removed Variable

          Name = mSearchKeyEffectArray[2].keyBankLoc
          Decl_type = unsigned
          Usage = M
          Value = 0x00000001

        # End Removed Variable

        # Begin Removed Variable

          Name = mSearchKeyEffectArray[2].keyBankLoc
          Decl_type = unsigned
          Usage = M
          Value = 0x00000001

        # End Removed Variable

        # Begin Removed Variable

          Name = mSearchKeyEffectArray[2].keyBankSegLoc
          Decl_type = unsigned
          Usage = M
          Value = 0x00000001

        # End Removed Variable

        # Begin Removed Variable

          Name = mSearchKeyEffectArray[2].keyBankSegLoc
          Decl_type = unsigned
          Usage = M
          Value = 0x00000001

        # End Removed Variable

        # Begin Removed Variable

          Name = mSearchKeyEffectArray[2].reserved
          Decl_type = unsigned
          Usage = M
          Value = 0x00000001

        # End Removed Variable

        # Begin Removed Variable

          Name = mSearchKeyEffectArray[3].keyBankLoc
          Decl_type = unsigned
          Usage = M
          Value = 0x00000001

        # End Removed Variable

        # Begin Removed Variable

          Name = mSearchKeyEffectArray[3].keyBankLoc
          Decl_type = unsigned
          Usage = M
          Value = 0x00000001

        # End Removed Variable

        # Begin Removed Variable

          Name = mSearchKeyEffectArray[3].keyBankSegLoc
          Decl_type = unsigned
          Usage = M
          Value = 0x00000001

        # End Removed Variable

        # Begin Removed Variable

          Name = mSearchKeyEffectArray[3].keyBankSegLoc
          Decl_type = unsigned
          Usage = M
          Value = 0x00000001

        # End Removed Variable

        # Begin Removed Variable

          Name = mSearchKeyEffectArray[3].reserved
          Decl_type = unsigned
          Usage = M
          Value = 0x00000001

        # End Removed Variable

        # Begin Removed Variable

          Name = mSearchKeyEffectArray[4].keyBankLoc
          Decl_type = unsigned
          Usage = M
          Value = 0x00000001

        # End Removed Variable

        # Begin Removed Variable

          Name = mSearchKeyEffectArray[4].keyBankLoc
          Decl_type = unsigned
          Usage = M
          Value = 0x00000001

        # End Removed Variable

        # Begin Removed Variable

          Name = mSearchKeyEffectArray[4].keyBankSegLoc
          Decl_type = unsigned
          Usage = M
          Value = 0x00000001

        # End Removed Variable

        # Begin Removed Variable

          Name = mSearchKeyEffectArray[4].keyBankSegLoc
          Decl_type = unsigned
          Usage = M
          Value = 0x00000001

        # End Removed Variable

        # Begin Removed Variable

          Name = mSearchKeyEffectArray[4].reserved
          Decl_type = unsigned
          Usage = M
          Value = 0x00000001

        # End Removed Variable

        # Begin Removed Variable

          Name = mData->KeyEffectData
          Decl_type = Key_Effectivity_Data_Type
          Usage = Z
          Frozen = T

        # End Removed Variable

        # Begin Removed Variable

          Name = mSearchKeyEffectArray[0]
          Decl_type = Key_Bank_Info_Type
          Usage = M

        # End Removed Variable

        # Begin Removed Variable

          Name = mSearchKeyEffectArray[1]
          Decl_type = Key_Bank_Info_Type
          Usage = M

        # End Removed Variable

        # Begin Removed Variable

          Name = mSearchKeyEffectArray[2]
          Decl_type = Key_Bank_Info_Type
          Usage = M

        # End Removed Variable

        # Begin Removed Variable

          Name = mSearchKeyEffectArray[3]
          Decl_type = Key_Bank_Info_Type
          Usage = M

        # End Removed Variable

        # Begin Removed Variable

          Name = mSearchKeyEffectArray[4]
          Decl_type = Key_Bank_Info_Type
          Usage = M

        # End Removed Variable

      # Begin TC Stub

        Procedure = CTimeLoad::GetVlfTime
  Overloading = Prototype

  # Begin Overloading
  # End Overloading

        # Begin TC Stub Return Value

          Name = %.offset
          Type = unsigned short
          Value = 0

        # End TC Stub Return Value

        # Begin TC Stub Return Value

          Name = %.doy
          Type = unsigned short
          Value = 100

        # End TC Stub Return Value

        # Begin TC Stub Return Value

          Name = %.frames
          Type = unsigned short
          Value = 0

        # End TC Stub Return Value

        # Begin TC Stub Return Value

          Name = %.sec
          Type = unsigned int
          Value = 0

        # End TC Stub Return Value

      # End TC Stub

      # Begin TC Stub

        Procedure = CKeyEffectData::getDayOfYear
  Overloading = Prototype

  # Begin Overloading
Date_Type
  # End Overloading

        # Begin TC Stub Return Value

          Name = %
          Type = UINT2
          Value = 2

        # End TC Stub Return Value

      # Begin TC Stub TC Hit Count

        Setting = 2
        Specified = 1
      # End TC Stub TC Hit Count

      # End TC Stub

    # End Test Case

    # Begin Test Case

      File = E:\CVRi1\SD&D\Software\VLF_Software\Source\Projects\KgrVpApp\src\MGR\CKeyEffectData.cc
      Procedure = CKeyEffectData::checkForRollover
      Procedure Number = 117
      Member Of = 1
      Creation Date = Apr 09 2020 10:40:40
      Description = chan 3 m9 & mHi mCommPlans=true, chan 3 rollover due to key-51, keyValid=f doy <

      # Begin Declarations
// Configure input parameter (Write_Key_Effectivity_Data_Msg_Type* mData)

static const unsigned short NUM_KEYS = 100;
static Write_Key_Effectivity_Data_Msg_Type ldra_qq_lv_91;
static Date_Type s_date;
static Key_Effectivity_Data_Type s_key_eff[NUM_KEYS]; 

s_date.Year = 2020;     //4-digits
s_date.Month = 1;       //1-12
s_date.Day = 1;         //1-31

for ( int idx = 0; idx < 100; idx++ )
{
  s_key_eff[idx].keyBankLoc = NO_BANK; 
  s_key_eff[idx].keyBankSegLoc = 0;
  s_key_eff[idx].keyValid = 1;      //0=false, 1=true
  s_key_eff[idx].reserved = 0;
  s_key_eff[idx].keyEffectDate = s_date;
  s_key_eff[idx].keyShortTitle[0] = NULL;
}

ldra_qq_lv_91.numKeys = NUM_KEYS; // unsgined, 8 bit, 0-100, # of TEKs 
ldra_qq_lv_91.lastMsg = 0;        // unsigned, 8 bit, 0/1 flag
ldra_qq_lv_91.reserved = 0;       // unsigned, 16 bit, 0 
for ( int idx = 0; idx < NUM_KEYS; idx++ )
{
  ldra_qq_lv_91.KeyEffectData[idx] = s_key_eff[idx];
}

// Test data that results in rollover
ldra_qq_lv_91.KeyEffectData[51].keyBankLoc = NO_BANK; 
ldra_qq_lv_91.KeyEffectData[51].keyBankSegLoc = 0; 
ldra_qq_lv_91.KeyEffectData[51].keyValid = 0;
      # End Declarations

      # Begin Global Declarations
/*
 * Test case global declaration code will be placed here
 * Variables declared in this section are at global scope
 */
      # End Global Declarations

        # Begin Variable

          Name = mData
          Decl_type = Write_Key_Effectivity_Data_Msg_Type*
          Usage = Z
          Value = &ldra_qq_lv_91

        # End Variable

        # Begin Variable

          Name = mTEKRollover[0]
          Decl_type = bool
          Usage = N
          Value = false

        # End Variable

        # Begin Variable

          Name = mTEKRollover[1]
          Decl_type = bool
          Usage = N
          Value = false

        # End Variable

        # Begin Variable

          Name = mTEKRollover[2]
          Decl_type = bool
          Usage = N
          Value = false

        # End Variable

        # Begin Variable

          Name = mTEKRollover[3]
          Decl_type = bool
          Usage = N
          Value = true

        # End Variable

        # Begin Variable

          Name = mTEKRollover[4]
          Decl_type = bool
          Usage = N
          Value = false

        # End Variable

        # Begin Variable

          Name = mTEKRollover[0]
          Decl_type = bool
          Usage = M
          Value = false

        # End Variable

        # Begin Variable

          Name = mTEKRollover[1]
          Decl_type = bool
          Usage = M
          Value = false

        # End Variable

        # Begin Variable

          Name = mTEKRollover[2]
          Decl_type = bool
          Usage = M
          Value = false

        # End Variable

        # Begin Variable

          Name = mTEKRollover[3]
          Decl_type = bool
          Usage = M
          Value = false

        # End Variable

        # Begin Variable

          Name = mTEKRollover[4]
          Decl_type = bool
          Usage = M
          Value = false

        # End Variable

        # Begin Variable

          Name = mSearchKeyEffectArray[0].keyBankLoc
          Decl_type = unsigned
          Usage = M
          Value = RESERVED_BANK1

        # End Variable

        # Begin Variable

          Name = mSearchKeyEffectArray[0].keyBankSegLoc
          Decl_type = unsigned
          Usage = M
          Value = 1

        # End Variable

        # Begin Variable

          Name = mSearchKeyEffectArray[1].keyBankLoc
          Decl_type = unsigned
          Usage = M
          Value = RESERVED_BANK1

        # End Variable

        # Begin Variable

          Name = mSearchKeyEffectArray[1].keyBankSegLoc
          Decl_type = unsigned
          Usage = M
          Value = 1

        # End Variable

        # Begin Variable

          Name = mSearchKeyEffectArray[2].keyBankLoc
          Decl_type = unsigned
          Usage = M
          Value = RESERVED_BANK1

        # End Variable

        # Begin Variable

          Name = mSearchKeyEffectArray[2].keyBankSegLoc
          Decl_type = unsigned
          Usage = M
          Value = 1

        # End Variable

        # Begin Variable

          Name = mSearchKeyEffectArray[3].keyBankLoc
          Decl_type = unsigned
          Usage = M
          Value = NO_BANK

        # End Variable

        # Begin Variable

          Name = mSearchKeyEffectArray[3].keyBankSegLoc
          Decl_type = unsigned
          Usage = M
          Value = 0

        # End Variable

        # Begin Variable

          Name = mSearchKeyEffectArray[4].keyBankLoc
          Decl_type = unsigned
          Usage = M
          Value = RESERVED_BANK1

        # End Variable

        # Begin Variable

          Name = mSearchKeyEffectArray[4].keyBankSegLoc
          Decl_type = unsigned
          Usage = M
          Value = 1

        # End Variable

        # Begin Variable

          Name = CVlf::Instance()->chan[0]->mCommPlan.mode9
          Decl_type = bool
          Usage = G
          Value = false

        # End Variable

        # Begin Variable

          Name = CVlf::Instance()->chan[0]->mCommPlan.modeHIDAR
          Decl_type = bool
          Usage = G
          Value = false

        # End Variable

        # Begin Variable

          Name = CVlf::Instance()->chan[0]->mCommPlan.mode23
          Decl_type = bool
          Usage = G
          Value = false

        # End Variable

        # Begin Variable

          Name = CVlf::Instance()->chan[1]->mCommPlan.mode9
          Decl_type = bool
          Usage = G
          Value = false

        # End Variable

        # Begin Variable

          Name = CVlf::Instance()->chan[1]->mCommPlan.modeHIDAR
          Decl_type = bool
          Usage = G
          Value = false

        # End Variable

        # Begin Variable

          Name = CVlf::Instance()->chan[1]->mCommPlan.mode23
          Decl_type = bool
          Usage = G
          Value = false

        # End Variable

        # Begin Variable

          Name = CVlf::Instance()->chan[2]->mCommPlan.mode9
          Decl_type = bool
          Usage = G
          Value = false

        # End Variable

        # Begin Variable

          Name = CVlf::Instance()->chan[2]->mCommPlan.modeHIDAR
          Decl_type = bool
          Usage = G
          Value = false

        # End Variable

        # Begin Variable

          Name = CVlf::Instance()->chan[2]->mCommPlan.mode23
          Decl_type = bool
          Usage = G
          Value = false

        # End Variable

        # Begin Variable

          Name = CVlf::Instance()->chan[3]->mCommPlan.mode9
          Decl_type = bool
          Usage = G
          Value = true

        # End Variable

        # Begin Variable

          Name = CVlf::Instance()->chan[3]->mCommPlan.modeHIDAR
          Decl_type = bool
          Usage = G
          Value = true

        # End Variable

        # Begin Variable

          Name = CVlf::Instance()->chan[3]->mCommPlan.mode23
          Decl_type = bool
          Usage = G
          Value = false

        # End Variable

        # Begin Variable

          Name = CVlf::Instance()->chan[4]->mCommPlan.mode9
          Decl_type = bool
          Usage = G
          Value = false

        # End Variable

        # Begin Variable

          Name = CVlf::Instance()->chan[4]->mCommPlan.modeHIDAR
          Decl_type = bool
          Usage = G
          Value = false

        # End Variable

        # Begin Variable

          Name = CVlf::Instance()->chan[4]->mCommPlan.mode23
          Decl_type = bool
          Usage = G
          Value = false

        # End Variable

        # Begin Removed Variable

          Name = mSearchKeyEffectArray[2].keyBankLoc
          Decl_type = unsigned
          Usage = N
          Value = 1

        # End Removed Variable

        # Begin Removed Variable

          Name = mSearchKeyEffectArray[2].keyBankSegLoc
          Decl_type = unsigned
          Usage = N
          Value = 1

        # End Removed Variable

        # Begin Removed Variable

          Name = mSearchKeyEffectArray[3].keyBankLoc
          Decl_type = unsigned
          Usage = N
          Value = 1

        # End Removed Variable

        # Begin Removed Variable

          Name = mSearchKeyEffectArray[3].keyBankSegLoc
          Decl_type = unsigned
          Usage = N
          Value = 1

        # End Removed Variable

        # Begin Removed Variable

          Name = mSearchKeyEffectArray[4].keyBankLoc
          Decl_type = unsigned
          Usage = N
          Value = 1

        # End Removed Variable

        # Begin Removed Variable

          Name = mSearchKeyEffectArray[4].keyBankSegLoc
          Decl_type = unsigned
          Usage = N
          Value = 1

        # End Removed Variable

        # Begin Removed Variable

          Name = mSearchKeyEffectArray[0].keyBankSegLoc
          Decl_type = unsigned
          Usage = M
          Value = 0x00000001

        # End Removed Variable

        # Begin Removed Variable

          Name = mSearchKeyEffectArray[0].reserved
          Decl_type = unsigned
          Usage = M
          Value = 0x00000001

        # End Removed Variable

        # Begin Removed Variable

          Name = mSearchKeyEffectArray[1].keyBankLoc
          Decl_type = unsigned
          Usage = M
          Value = 0x00000001

        # End Removed Variable

        # Begin Removed Variable

          Name = mSearchKeyEffectArray[1].reserved
          Decl_type = unsigned
          Usage = M
          Value = 0x00000001

        # End Removed Variable

        # Begin Removed Variable

          Name = mSearchKeyEffectArray[2].keyBankLoc
          Decl_type = unsigned
          Usage = M
          Value = 0x00000001

        # End Removed Variable

        # Begin Removed Variable

          Name = mSearchKeyEffectArray[2].keyBankLoc
          Decl_type = unsigned
          Usage = M
          Value = 0x00000001

        # End Removed Variable

        # Begin Removed Variable

          Name = mSearchKeyEffectArray[2].keyBankSegLoc
          Decl_type = unsigned
          Usage = M
          Value = 0x00000001

        # End Removed Variable

        # Begin Removed Variable

          Name = mSearchKeyEffectArray[2].keyBankSegLoc
          Decl_type = unsigned
          Usage = M
          Value = 0x00000001

        # End Removed Variable

        # Begin Removed Variable

          Name = mSearchKeyEffectArray[2].reserved
          Decl_type = unsigned
          Usage = M
          Value = 0x00000001

        # End Removed Variable

        # Begin Removed Variable

          Name = mSearchKeyEffectArray[3].keyBankLoc
          Decl_type = unsigned
          Usage = M
          Value = 0x00000001

        # End Removed Variable

        # Begin Removed Variable

          Name = mSearchKeyEffectArray[3].keyBankLoc
          Decl_type = unsigned
          Usage = M
          Value = 0x00000001

        # End Removed Variable

        # Begin Removed Variable

          Name = mSearchKeyEffectArray[3].keyBankSegLoc
          Decl_type = unsigned
          Usage = M
          Value = 0x00000001

        # End Removed Variable

        # Begin Removed Variable

          Name = mSearchKeyEffectArray[3].keyBankSegLoc
          Decl_type = unsigned
          Usage = M
          Value = 0x00000001

        # End Removed Variable

        # Begin Removed Variable

          Name = mSearchKeyEffectArray[3].reserved
          Decl_type = unsigned
          Usage = M
          Value = 0x00000001

        # End Removed Variable

        # Begin Removed Variable

          Name = mSearchKeyEffectArray[4].keyBankLoc
          Decl_type = unsigned
          Usage = M
          Value = 0x00000001

        # End Removed Variable

        # Begin Removed Variable

          Name = mSearchKeyEffectArray[4].keyBankLoc
          Decl_type = unsigned
          Usage = M
          Value = 0x00000001

        # End Removed Variable

        # Begin Removed Variable

          Name = mSearchKeyEffectArray[4].keyBankSegLoc
          Decl_type = unsigned
          Usage = M
          Value = 0x00000001

        # End Removed Variable

        # Begin Removed Variable

          Name = mSearchKeyEffectArray[4].keyBankSegLoc
          Decl_type = unsigned
          Usage = M
          Value = 0x00000001

        # End Removed Variable

        # Begin Removed Variable

          Name = mSearchKeyEffectArray[4].reserved
          Decl_type = unsigned
          Usage = M
          Value = 0x00000001

        # End Removed Variable

        # Begin Removed Variable

          Name = mData->KeyEffectData
          Decl_type = Key_Effectivity_Data_Type
          Usage = Z
          Frozen = T

        # End Removed Variable

        # Begin Removed Variable

          Name = mSearchKeyEffectArray[0]
          Decl_type = Key_Bank_Info_Type
          Usage = M

        # End Removed Variable

        # Begin Removed Variable

          Name = mSearchKeyEffectArray[1]
          Decl_type = Key_Bank_Info_Type
          Usage = M

        # End Removed Variable

        # Begin Removed Variable

          Name = mSearchKeyEffectArray[2]
          Decl_type = Key_Bank_Info_Type
          Usage = M

        # End Removed Variable

        # Begin Removed Variable

          Name = mSearchKeyEffectArray[3]
          Decl_type = Key_Bank_Info_Type
          Usage = M

        # End Removed Variable

        # Begin Removed Variable

          Name = mSearchKeyEffectArray[4]
          Decl_type = Key_Bank_Info_Type
          Usage = M

        # End Removed Variable

      # Begin TC Stub

        Procedure = CTimeLoad::GetVlfTime
  Overloading = Prototype

  # Begin Overloading
  # End Overloading

        # Begin TC Stub Return Value

          Name = %.offset
          Type = unsigned short
          Value = 0

        # End TC Stub Return Value

        # Begin TC Stub Return Value

          Name = %.doy
          Type = unsigned short
          Value = 1

        # End TC Stub Return Value

        # Begin TC Stub Return Value

          Name = %.frames
          Type = unsigned short
          Value = 0

        # End TC Stub Return Value

        # Begin TC Stub Return Value

          Name = %.sec
          Type = unsigned int
          Value = 0

        # End TC Stub Return Value

      # End TC Stub

      # Begin TC Stub

        Procedure = CKeyEffectData::getDayOfYear
  Overloading = Prototype

  # Begin Overloading
Date_Type
  # End Overloading

        # Begin TC Stub Return Value

          Name = %
          Type = UINT2
          Value = 2

        # End TC Stub Return Value

      # Begin TC Stub TC Hit Count

        Setting = 2
        Specified = 1
      # End TC Stub TC Hit Count

      # End TC Stub

    # End Test Case

    # Begin Test Case

      File = E:\CVRi1\SD&D\Software\VLF_Software\Source\Projects\KgrVpApp\src\MGR\CKeyEffectData.cc
      Procedure = CKeyEffectData::checkForRollover
      Procedure Number = 117
      Member Of = 1
      Creation Date = Apr 09 2020 10:40:40
      Description = chan 3 m9 & mHi mCommPlans=true, chan 3 no rollover, for key-51, keyValid=t doy <

      # Begin Declarations
// Configure input parameter (Write_Key_Effectivity_Data_Msg_Type* mData)

static const unsigned short NUM_KEYS = 100;
static Write_Key_Effectivity_Data_Msg_Type ldra_qq_lv_91;
static Date_Type s_date;
static Key_Effectivity_Data_Type s_key_eff[NUM_KEYS]; 

s_date.Year = 2020;     //4-digits
s_date.Month = 1;       //1-12
s_date.Day = 1;         //1-31

for ( int idx = 0; idx < 100; idx++ )
{
  s_key_eff[idx].keyBankLoc = NO_BANK; 
  s_key_eff[idx].keyBankSegLoc = 0;
  s_key_eff[idx].keyValid = 1;      //0=false, 1=true
  s_key_eff[idx].reserved = 0;
  s_key_eff[idx].keyEffectDate = s_date;
  s_key_eff[idx].keyShortTitle[0] = NULL;
}

ldra_qq_lv_91.numKeys = NUM_KEYS; // unsgined, 8 bit, 0-100, # of TEKs 
ldra_qq_lv_91.lastMsg = 0;        // unsigned, 8 bit, 0/1 flag
ldra_qq_lv_91.reserved = 0;       // unsigned, 16 bit, 0 
for ( int idx = 0; idx < NUM_KEYS; idx++ )
{
  ldra_qq_lv_91.KeyEffectData[idx] = s_key_eff[idx];
}

// Test data that results in rollover
ldra_qq_lv_91.KeyEffectData[51].keyBankLoc = NO_BANK; 
ldra_qq_lv_91.KeyEffectData[51].keyBankSegLoc = 0; 
ldra_qq_lv_91.KeyEffectData[51].keyValid = 1;
      # End Declarations

      # Begin Global Declarations
/*
 * Test case global declaration code will be placed here
 * Variables declared in this section are at global scope
 */
      # End Global Declarations

        # Begin Variable

          Name = mData
          Decl_type = Write_Key_Effectivity_Data_Msg_Type*
          Usage = Z
          Value = &ldra_qq_lv_91

        # End Variable

        # Begin Variable

          Name = mTEKRollover[0]
          Decl_type = bool
          Usage = N
          Value = false

        # End Variable

        # Begin Variable

          Name = mTEKRollover[1]
          Decl_type = bool
          Usage = N
          Value = false

        # End Variable

        # Begin Variable

          Name = mTEKRollover[2]
          Decl_type = bool
          Usage = N
          Value = false

        # End Variable

        # Begin Variable

          Name = mTEKRollover[3]
          Decl_type = bool
          Usage = N
          Value = false

        # End Variable

        # Begin Variable

          Name = mTEKRollover[4]
          Decl_type = bool
          Usage = N
          Value = false

        # End Variable

        # Begin Variable

          Name = mTEKRollover[0]
          Decl_type = bool
          Usage = M
          Value = false

        # End Variable

        # Begin Variable

          Name = mTEKRollover[1]
          Decl_type = bool
          Usage = M
          Value = false

        # End Variable

        # Begin Variable

          Name = mTEKRollover[2]
          Decl_type = bool
          Usage = M
          Value = false

        # End Variable

        # Begin Variable

          Name = mTEKRollover[3]
          Decl_type = bool
          Usage = M
          Value = false

        # End Variable

        # Begin Variable

          Name = mTEKRollover[4]
          Decl_type = bool
          Usage = M
          Value = false

        # End Variable

        # Begin Variable

          Name = mSearchKeyEffectArray[0].keyBankLoc
          Decl_type = unsigned
          Usage = M
          Value = RESERVED_BANK1

        # End Variable

        # Begin Variable

          Name = mSearchKeyEffectArray[0].keyBankSegLoc
          Decl_type = unsigned
          Usage = M
          Value = 1

        # End Variable

        # Begin Variable

          Name = mSearchKeyEffectArray[1].keyBankLoc
          Decl_type = unsigned
          Usage = M
          Value = RESERVED_BANK1

        # End Variable

        # Begin Variable

          Name = mSearchKeyEffectArray[1].keyBankSegLoc
          Decl_type = unsigned
          Usage = M
          Value = 1

        # End Variable

        # Begin Variable

          Name = mSearchKeyEffectArray[2].keyBankLoc
          Decl_type = unsigned
          Usage = M
          Value = RESERVED_BANK1

        # End Variable

        # Begin Variable

          Name = mSearchKeyEffectArray[2].keyBankSegLoc
          Decl_type = unsigned
          Usage = M
          Value = 1

        # End Variable

        # Begin Variable

          Name = mSearchKeyEffectArray[3].keyBankLoc
          Decl_type = unsigned
          Usage = M
          Value = NO_BANK

        # End Variable

        # Begin Variable

          Name = mSearchKeyEffectArray[3].keyBankSegLoc
          Decl_type = unsigned
          Usage = M
          Value = 0

        # End Variable

        # Begin Variable

          Name = mSearchKeyEffectArray[4].keyBankLoc
          Decl_type = unsigned
          Usage = M
          Value = RESERVED_BANK1

        # End Variable

        # Begin Variable

          Name = mSearchKeyEffectArray[4].keyBankSegLoc
          Decl_type = unsigned
          Usage = M
          Value = 1

        # End Variable

        # Begin Variable

          Name = CVlf::Instance()->chan[0]->mCommPlan.mode9
          Decl_type = bool
          Usage = G
          Value = false

        # End Variable

        # Begin Variable

          Name = CVlf::Instance()->chan[0]->mCommPlan.modeHIDAR
          Decl_type = bool
          Usage = G
          Value = false

        # End Variable

        # Begin Variable

          Name = CVlf::Instance()->chan[0]->mCommPlan.mode23
          Decl_type = bool
          Usage = G
          Value = false

        # End Variable

        # Begin Variable

          Name = CVlf::Instance()->chan[1]->mCommPlan.mode9
          Decl_type = bool
          Usage = G
          Value = false

        # End Variable

        # Begin Variable

          Name = CVlf::Instance()->chan[1]->mCommPlan.modeHIDAR
          Decl_type = bool
          Usage = G
          Value = false

        # End Variable

        # Begin Variable

          Name = CVlf::Instance()->chan[1]->mCommPlan.mode23
          Decl_type = bool
          Usage = G
          Value = false

        # End Variable

        # Begin Variable

          Name = CVlf::Instance()->chan[2]->mCommPlan.mode9
          Decl_type = bool
          Usage = G
          Value = false

        # End Variable

        # Begin Variable

          Name = CVlf::Instance()->chan[2]->mCommPlan.modeHIDAR
          Decl_type = bool
          Usage = G
          Value = false

        # End Variable

        # Begin Variable

          Name = CVlf::Instance()->chan[2]->mCommPlan.mode23
          Decl_type = bool
          Usage = G
          Value = false

        # End Variable

        # Begin Variable

          Name = CVlf::Instance()->chan[3]->mCommPlan.mode9
          Decl_type = bool
          Usage = G
          Value = true

        # End Variable

        # Begin Variable

          Name = CVlf::Instance()->chan[3]->mCommPlan.modeHIDAR
          Decl_type = bool
          Usage = G
          Value = true

        # End Variable

        # Begin Variable

          Name = CVlf::Instance()->chan[3]->mCommPlan.mode23
          Decl_type = bool
          Usage = G
          Value = false

        # End Variable

        # Begin Variable

          Name = CVlf::Instance()->chan[4]->mCommPlan.mode9
          Decl_type = bool
          Usage = G
          Value = false

        # End Variable

        # Begin Variable

          Name = CVlf::Instance()->chan[4]->mCommPlan.modeHIDAR
          Decl_type = bool
          Usage = G
          Value = false

        # End Variable

        # Begin Variable

          Name = CVlf::Instance()->chan[4]->mCommPlan.mode23
          Decl_type = bool
          Usage = G
          Value = false

        # End Variable

        # Begin Removed Variable

          Name = mSearchKeyEffectArray[2].keyBankLoc
          Decl_type = unsigned
          Usage = N
          Value = 1

        # End Removed Variable

        # Begin Removed Variable

          Name = mSearchKeyEffectArray[2].keyBankSegLoc
          Decl_type = unsigned
          Usage = N
          Value = 1

        # End Removed Variable

        # Begin Removed Variable

          Name = mSearchKeyEffectArray[3].keyBankLoc
          Decl_type = unsigned
          Usage = N
          Value = 1

        # End Removed Variable

        # Begin Removed Variable

          Name = mSearchKeyEffectArray[3].keyBankSegLoc
          Decl_type = unsigned
          Usage = N
          Value = 1

        # End Removed Variable

        # Begin Removed Variable

          Name = mSearchKeyEffectArray[4].keyBankLoc
          Decl_type = unsigned
          Usage = N
          Value = 1

        # End Removed Variable

        # Begin Removed Variable

          Name = mSearchKeyEffectArray[4].keyBankSegLoc
          Decl_type = unsigned
          Usage = N
          Value = 1

        # End Removed Variable

        # Begin Removed Variable

          Name = mSearchKeyEffectArray[0].keyBankSegLoc
          Decl_type = unsigned
          Usage = M
          Value = 0x00000001

        # End Removed Variable

        # Begin Removed Variable

          Name = mSearchKeyEffectArray[0].reserved
          Decl_type = unsigned
          Usage = M
          Value = 0x00000001

        # End Removed Variable

        # Begin Removed Variable

          Name = mSearchKeyEffectArray[1].keyBankLoc
          Decl_type = unsigned
          Usage = M
          Value = 0x00000001

        # End Removed Variable

        # Begin Removed Variable

          Name = mSearchKeyEffectArray[1].reserved
          Decl_type = unsigned
          Usage = M
          Value = 0x00000001

        # End Removed Variable

        # Begin Removed Variable

          Name = mSearchKeyEffectArray[2].keyBankLoc
          Decl_type = unsigned
          Usage = M
          Value = 0x00000001

        # End Removed Variable

        # Begin Removed Variable

          Name = mSearchKeyEffectArray[2].keyBankLoc
          Decl_type = unsigned
          Usage = M
          Value = 0x00000001

        # End Removed Variable

        # Begin Removed Variable

          Name = mSearchKeyEffectArray[2].keyBankSegLoc
          Decl_type = unsigned
          Usage = M
          Value = 0x00000001

        # End Removed Variable

        # Begin Removed Variable

          Name = mSearchKeyEffectArray[2].keyBankSegLoc
          Decl_type = unsigned
          Usage = M
          Value = 0x00000001

        # End Removed Variable

        # Begin Removed Variable

          Name = mSearchKeyEffectArray[2].reserved
          Decl_type = unsigned
          Usage = M
          Value = 0x00000001

        # End Removed Variable

        # Begin Removed Variable

          Name = mSearchKeyEffectArray[3].keyBankLoc
          Decl_type = unsigned
          Usage = M
          Value = 0x00000001

        # End Removed Variable

        # Begin Removed Variable

          Name = mSearchKeyEffectArray[3].keyBankLoc
          Decl_type = unsigned
          Usage = M
          Value = 0x00000001

        # End Removed Variable

        # Begin Removed Variable

          Name = mSearchKeyEffectArray[3].keyBankSegLoc
          Decl_type = unsigned
          Usage = M
          Value = 0x00000001

        # End Removed Variable

        # Begin Removed Variable

          Name = mSearchKeyEffectArray[3].keyBankSegLoc
          Decl_type = unsigned
          Usage = M
          Value = 0x00000001

        # End Removed Variable

        # Begin Removed Variable

          Name = mSearchKeyEffectArray[3].reserved
          Decl_type = unsigned
          Usage = M
          Value = 0x00000001

        # End Removed Variable

        # Begin Removed Variable

          Name = mSearchKeyEffectArray[4].keyBankLoc
          Decl_type = unsigned
          Usage = M
          Value = 0x00000001

        # End Removed Variable

        # Begin Removed Variable

          Name = mSearchKeyEffectArray[4].keyBankLoc
          Decl_type = unsigned
          Usage = M
          Value = 0x00000001

        # End Removed Variable

        # Begin Removed Variable

          Name = mSearchKeyEffectArray[4].keyBankSegLoc
          Decl_type = unsigned
          Usage = M
          Value = 0x00000001

        # End Removed Variable

        # Begin Removed Variable

          Name = mSearchKeyEffectArray[4].keyBankSegLoc
          Decl_type = unsigned
          Usage = M
          Value = 0x00000001

        # End Removed Variable

        # Begin Removed Variable

          Name = mSearchKeyEffectArray[4].reserved
          Decl_type = unsigned
          Usage = M
          Value = 0x00000001

        # End Removed Variable

        # Begin Removed Variable

          Name = mData->KeyEffectData
          Decl_type = Key_Effectivity_Data_Type
          Usage = Z
          Frozen = T

        # End Removed Variable

        # Begin Removed Variable

          Name = mSearchKeyEffectArray[0]
          Decl_type = Key_Bank_Info_Type
          Usage = M

        # End Removed Variable

        # Begin Removed Variable

          Name = mSearchKeyEffectArray[1]
          Decl_type = Key_Bank_Info_Type
          Usage = M

        # End Removed Variable

        # Begin Removed Variable

          Name = mSearchKeyEffectArray[2]
          Decl_type = Key_Bank_Info_Type
          Usage = M

        # End Removed Variable

        # Begin Removed Variable

          Name = mSearchKeyEffectArray[3]
          Decl_type = Key_Bank_Info_Type
          Usage = M

        # End Removed Variable

        # Begin Removed Variable

          Name = mSearchKeyEffectArray[4]
          Decl_type = Key_Bank_Info_Type
          Usage = M

        # End Removed Variable

      # Begin TC Stub

        Procedure = CTimeLoad::GetVlfTime
  Overloading = Prototype

  # Begin Overloading
  # End Overloading

        # Begin TC Stub Return Value

          Name = %.offset
          Type = unsigned short
          Value = 0

        # End TC Stub Return Value

        # Begin TC Stub Return Value

          Name = %.doy
          Type = unsigned short
          Value = 1

        # End TC Stub Return Value

        # Begin TC Stub Return Value

          Name = %.frames
          Type = unsigned short
          Value = 0

        # End TC Stub Return Value

        # Begin TC Stub Return Value

          Name = %.sec
          Type = unsigned int
          Value = 0

        # End TC Stub Return Value

      # End TC Stub

      # Begin TC Stub

        Procedure = CKeyEffectData::getDayOfYear
  Overloading = Prototype

  # Begin Overloading
Date_Type
  # End Overloading

        # Begin TC Stub Return Value

          Name = %
          Type = UINT2
          Value = 2

        # End TC Stub Return Value

      # Begin TC Stub TC Hit Count

        Setting = 2
        Specified = 1
      # End TC Stub TC Hit Count

      # End TC Stub

    # End Test Case

    # Begin Test Case

      File = E:\CVRi1\SD&D\Software\VLF_Software\Source\Projects\KgrVpApp\src\MGR\CKeyEffectData.cc
      Procedure = CKeyEffectData::checkForRollover
      Procedure Number = 117
      Member Of = 1
      Creation Date = Apr 09 2020 10:40:40
      Description = all chans mHi mCommPlans=true, chan 0,1,2 rollover due to bank seg loc

      # Begin Declarations
// Configure input parameter (Write_Key_Effectivity_Data_Msg_Type* mData)

static const unsigned short NUM_KEYS = 100;
static Write_Key_Effectivity_Data_Msg_Type ldra_qq_lv_91;
static Date_Type s_date;
static Key_Effectivity_Data_Type s_key_eff[NUM_KEYS]; 

s_date.Year = 2020;     //4-digits
s_date.Month = 1;       //1-12
s_date.Day = 1;         //1-31

for ( int idx = 0; idx < NUM_KEYS; idx++ )
{
  s_key_eff[idx].keyBankLoc = NO_BANK; 
  s_key_eff[idx].keyBankSegLoc = 0;
  s_key_eff[idx].keyValid = 1;      //0=false, 1=true
  s_key_eff[idx].reserved = 0;
  s_key_eff[idx].keyEffectDate = s_date;
  s_key_eff[idx].keyShortTitle[0] = NULL;
}

ldra_qq_lv_91.numKeys = NUM_KEYS; // unsgined, 8 bit, 0-100, # of TEKs 
ldra_qq_lv_91.lastMsg = 0;        // unsigned, 8 bit, 0/1 flag
ldra_qq_lv_91.reserved = 0;       // unsigned, 16 bit, 0 
for ( int idx = 0; idx < NUM_KEYS; idx++ )
{
  ldra_qq_lv_91.KeyEffectData[idx] = s_key_eff[idx];
}

// Test data that results in rollover
for ( int idx = 0; idx < NUM_KEYS; idx++ )
{
  ldra_qq_lv_91.KeyEffectData[idx].keyBankLoc = MEDLEY_BANK3; 
  ldra_qq_lv_91.KeyEffectData[idx].keyBankSegLoc = idx; 
  ldra_qq_lv_91.KeyEffectData[idx].keyValid = 0;
}

ldra_qq_lv_91.KeyEffectData[98].keyBankSegLoc = 0; 
ldra_qq_lv_91.KeyEffectData[99].keyBankSegLoc = 0;
      # End Declarations

      # Begin Global Declarations
/*
 * Test case global declaration code will be placed here
 * Variables declared in this section are at global scope
 */
      # End Global Declarations

        # Begin Variable

          Name = mData
          Decl_type = Write_Key_Effectivity_Data_Msg_Type*
          Usage = Z
          Value = &ldra_qq_lv_91

        # End Variable

        # Begin Variable

          Name = mTEKRollover[0]
          Decl_type = bool
          Usage = N
          Value = true

        # End Variable

        # Begin Variable

          Name = mTEKRollover[1]
          Decl_type = bool
          Usage = N
          Value = true

        # End Variable

        # Begin Variable

          Name = mTEKRollover[2]
          Decl_type = bool
          Usage = N
          Value = true

        # End Variable

        # Begin Variable

          Name = mTEKRollover[3]
          Decl_type = bool
          Usage = N
          Value = false

        # End Variable

        # Begin Variable

          Name = mTEKRollover[4]
          Decl_type = bool
          Usage = N
          Value = false

        # End Variable

        # Begin Variable

          Name = mTEKRollover[0]
          Decl_type = bool
          Usage = M
          Value = false

        # End Variable

        # Begin Variable

          Name = mTEKRollover[1]
          Decl_type = bool
          Usage = M
          Value = false

        # End Variable

        # Begin Variable

          Name = mTEKRollover[2]
          Decl_type = bool
          Usage = M
          Value = false

        # End Variable

        # Begin Variable

          Name = mTEKRollover[3]
          Decl_type = bool
          Usage = M
          Value = false

        # End Variable

        # Begin Variable

          Name = mTEKRollover[4]
          Decl_type = bool
          Usage = M
          Value = false

        # End Variable

        # Begin Variable

          Name = mSearchKeyEffectArray[0].keyBankLoc
          Decl_type = unsigned
          Usage = M
          Value = MEDLEY_BANK3

        # End Variable

        # Begin Variable

          Name = mSearchKeyEffectArray[0].keyBankSegLoc
          Decl_type = unsigned
          Usage = M
          Value = 0

        # End Variable

        # Begin Variable

          Name = mSearchKeyEffectArray[1].keyBankLoc
          Decl_type = unsigned
          Usage = M
          Value = MEDLEY_BANK3

        # End Variable

        # Begin Variable

          Name = mSearchKeyEffectArray[1].keyBankSegLoc
          Decl_type = unsigned
          Usage = M
          Value = 1

        # End Variable

        # Begin Variable

          Name = mSearchKeyEffectArray[2].keyBankLoc
          Decl_type = unsigned
          Usage = M
          Value = MEDLEY_BANK3

        # End Variable

        # Begin Variable

          Name = mSearchKeyEffectArray[2].keyBankSegLoc
          Decl_type = unsigned
          Usage = M
          Value = 2

        # End Variable

        # Begin Variable

          Name = mSearchKeyEffectArray[3].keyBankLoc
          Decl_type = unsigned
          Usage = M
          Value = MEDLEY_BANK3

        # End Variable

        # Begin Variable

          Name = mSearchKeyEffectArray[3].keyBankSegLoc
          Decl_type = unsigned
          Usage = M
          Value = 98

        # End Variable

        # Begin Variable

          Name = mSearchKeyEffectArray[4].keyBankLoc
          Decl_type = unsigned
          Usage = M
          Value = MEDLEY_BANK3

        # End Variable

        # Begin Variable

          Name = mSearchKeyEffectArray[4].keyBankSegLoc
          Decl_type = unsigned
          Usage = M
          Value = 99

        # End Variable

        # Begin Variable

          Name = CVlf::Instance()->chan[0]->mCommPlan.mode9
          Decl_type = bool
          Usage = G
          Value = false

        # End Variable

        # Begin Variable

          Name = CVlf::Instance()->chan[0]->mCommPlan.modeHIDAR
          Decl_type = bool
          Usage = G
          Value = true

        # End Variable

        # Begin Variable

          Name = CVlf::Instance()->chan[0]->mCommPlan.mode23
          Decl_type = bool
          Usage = G
          Value = false

        # End Variable

        # Begin Variable

          Name = CVlf::Instance()->chan[1]->mCommPlan.mode9
          Decl_type = bool
          Usage = G
          Value = false

        # End Variable

        # Begin Variable

          Name = CVlf::Instance()->chan[1]->mCommPlan.modeHIDAR
          Decl_type = bool
          Usage = G
          Value = true

        # End Variable

        # Begin Variable

          Name = CVlf::Instance()->chan[1]->mCommPlan.mode23
          Decl_type = bool
          Usage = G
          Value = false

        # End Variable

        # Begin Variable

          Name = CVlf::Instance()->chan[2]->mCommPlan.mode9
          Decl_type = bool
          Usage = G
          Value = false

        # End Variable

        # Begin Variable

          Name = CVlf::Instance()->chan[2]->mCommPlan.modeHIDAR
          Decl_type = bool
          Usage = G
          Value = true

        # End Variable

        # Begin Variable

          Name = CVlf::Instance()->chan[2]->mCommPlan.mode23
          Decl_type = bool
          Usage = G
          Value = false

        # End Variable

        # Begin Variable

          Name = CVlf::Instance()->chan[3]->mCommPlan.mode9
          Decl_type = bool
          Usage = G
          Value = false

        # End Variable

        # Begin Variable

          Name = CVlf::Instance()->chan[3]->mCommPlan.modeHIDAR
          Decl_type = bool
          Usage = G
          Value = true

        # End Variable

        # Begin Variable

          Name = CVlf::Instance()->chan[3]->mCommPlan.mode23
          Decl_type = bool
          Usage = G
          Value = false

        # End Variable

        # Begin Variable

          Name = CVlf::Instance()->chan[4]->mCommPlan.mode9
          Decl_type = bool
          Usage = G
          Value = false

        # End Variable

        # Begin Variable

          Name = CVlf::Instance()->chan[4]->mCommPlan.modeHIDAR
          Decl_type = bool
          Usage = G
          Value = true

        # End Variable

        # Begin Variable

          Name = CVlf::Instance()->chan[4]->mCommPlan.mode23
          Decl_type = bool
          Usage = G
          Value = false

        # End Variable

        # Begin Removed Variable

          Name = mSearchKeyEffectArray[2].keyBankLoc
          Decl_type = unsigned
          Usage = N
          Value = 1

        # End Removed Variable

        # Begin Removed Variable

          Name = mSearchKeyEffectArray[2].keyBankSegLoc
          Decl_type = unsigned
          Usage = N
          Value = 1

        # End Removed Variable

        # Begin Removed Variable

          Name = mSearchKeyEffectArray[3].keyBankLoc
          Decl_type = unsigned
          Usage = N
          Value = 1

        # End Removed Variable

        # Begin Removed Variable

          Name = mSearchKeyEffectArray[3].keyBankSegLoc
          Decl_type = unsigned
          Usage = N
          Value = 1

        # End Removed Variable

        # Begin Removed Variable

          Name = mSearchKeyEffectArray[4].keyBankLoc
          Decl_type = unsigned
          Usage = N
          Value = 1

        # End Removed Variable

        # Begin Removed Variable

          Name = mSearchKeyEffectArray[4].keyBankSegLoc
          Decl_type = unsigned
          Usage = N
          Value = 1

        # End Removed Variable

        # Begin Removed Variable

          Name = mSearchKeyEffectArray[0].keyBankSegLoc
          Decl_type = unsigned
          Usage = M
          Value = 0x00000001

        # End Removed Variable

        # Begin Removed Variable

          Name = mSearchKeyEffectArray[0].reserved
          Decl_type = unsigned
          Usage = M
          Value = 0x00000001

        # End Removed Variable

        # Begin Removed Variable

          Name = mSearchKeyEffectArray[1].keyBankLoc
          Decl_type = unsigned
          Usage = M
          Value = 0x00000001

        # End Removed Variable

        # Begin Removed Variable

          Name = mSearchKeyEffectArray[1].reserved
          Decl_type = unsigned
          Usage = M
          Value = 0x00000001

        # End Removed Variable

        # Begin Removed Variable

          Name = mSearchKeyEffectArray[2].keyBankLoc
          Decl_type = unsigned
          Usage = M
          Value = 0x00000001

        # End Removed Variable

        # Begin Removed Variable

          Name = mSearchKeyEffectArray[2].keyBankLoc
          Decl_type = unsigned
          Usage = M
          Value = 0x00000001

        # End Removed Variable

        # Begin Removed Variable

          Name = mSearchKeyEffectArray[2].keyBankSegLoc
          Decl_type = unsigned
          Usage = M
          Value = 0x00000001

        # End Removed Variable

        # Begin Removed Variable

          Name = mSearchKeyEffectArray[2].keyBankSegLoc
          Decl_type = unsigned
          Usage = M
          Value = 0x00000001

        # End Removed Variable

        # Begin Removed Variable

          Name = mSearchKeyEffectArray[2].reserved
          Decl_type = unsigned
          Usage = M
          Value = 0x00000001

        # End Removed Variable

        # Begin Removed Variable

          Name = mSearchKeyEffectArray[3].keyBankLoc
          Decl_type = unsigned
          Usage = M
          Value = 0x00000001

        # End Removed Variable

        # Begin Removed Variable

          Name = mSearchKeyEffectArray[3].keyBankLoc
          Decl_type = unsigned
          Usage = M
          Value = 0x00000001

        # End Removed Variable

        # Begin Removed Variable

          Name = mSearchKeyEffectArray[3].keyBankSegLoc
          Decl_type = unsigned
          Usage = M
          Value = 0x00000001

        # End Removed Variable

        # Begin Removed Variable

          Name = mSearchKeyEffectArray[3].keyBankSegLoc
          Decl_type = unsigned
          Usage = M
          Value = 0x00000001

        # End Removed Variable

        # Begin Removed Variable

          Name = mSearchKeyEffectArray[3].reserved
          Decl_type = unsigned
          Usage = M
          Value = 0x00000001

        # End Removed Variable

        # Begin Removed Variable

          Name = mSearchKeyEffectArray[4].keyBankLoc
          Decl_type = unsigned
          Usage = M
          Value = 0x00000001

        # End Removed Variable

        # Begin Removed Variable

          Name = mSearchKeyEffectArray[4].keyBankLoc
          Decl_type = unsigned
          Usage = M
          Value = 0x00000001

        # End Removed Variable

        # Begin Removed Variable

          Name = mSearchKeyEffectArray[4].keyBankSegLoc
          Decl_type = unsigned
          Usage = M
          Value = 0x00000001

        # End Removed Variable

        # Begin Removed Variable

          Name = mSearchKeyEffectArray[4].keyBankSegLoc
          Decl_type = unsigned
          Usage = M
          Value = 0x00000001

        # End Removed Variable

        # Begin Removed Variable

          Name = mSearchKeyEffectArray[4].reserved
          Decl_type = unsigned
          Usage = M
          Value = 0x00000001

        # End Removed Variable

        # Begin Removed Variable

          Name = mData->KeyEffectData
          Decl_type = Key_Effectivity_Data_Type
          Usage = Z
          Frozen = T

        # End Removed Variable

        # Begin Removed Variable

          Name = mSearchKeyEffectArray[0]
          Decl_type = Key_Bank_Info_Type
          Usage = M

        # End Removed Variable

        # Begin Removed Variable

          Name = mSearchKeyEffectArray[1]
          Decl_type = Key_Bank_Info_Type
          Usage = M

        # End Removed Variable

        # Begin Removed Variable

          Name = mSearchKeyEffectArray[2]
          Decl_type = Key_Bank_Info_Type
          Usage = M

        # End Removed Variable

        # Begin Removed Variable

          Name = mSearchKeyEffectArray[3]
          Decl_type = Key_Bank_Info_Type
          Usage = M

        # End Removed Variable

        # Begin Removed Variable

          Name = mSearchKeyEffectArray[4]
          Decl_type = Key_Bank_Info_Type
          Usage = M

        # End Removed Variable

      # Begin TC Stub

        Procedure = CTimeLoad::GetVlfTime
  Overloading = Prototype

  # Begin Overloading
  # End Overloading

        # Begin TC Stub Return Value

          Name = %.offset
          Type = unsigned short
          Value = 0

        # End TC Stub Return Value

        # Begin TC Stub Return Value

          Name = %.doy
          Type = unsigned short
          Value = 1

        # End TC Stub Return Value

        # Begin TC Stub Return Value

          Name = %.frames
          Type = unsigned short
          Value = 0

        # End TC Stub Return Value

        # Begin TC Stub Return Value

          Name = %.sec
          Type = unsigned int
          Value = 0

        # End TC Stub Return Value

      # End TC Stub

      # Begin TC Stub

        Procedure = CKeyEffectData::getDayOfYear
  Overloading = Prototype

  # Begin Overloading
Date_Type
  # End Overloading

        # Begin TC Stub Return Value

          Name = %
          Type = UINT2
          Value = 2

        # End TC Stub Return Value

      # Begin TC Stub TC Hit Count

        Setting = 2
        Specified = 1
      # End TC Stub TC Hit Count

      # End TC Stub

    # End Test Case

    # Begin Global

      File = E:\CVRi1\SD&D\Software\VLF_Software\Source\Projects\KgrVpApp\src\MGR\CKeyEffectData.cc
      Name = queueKeyMgr
      Decl_type = MessageQueue
      Value = {0}

    # End Global

    # Begin Global

      File = E:\CVRi1\SD&D\Software\VLF_Software\Source\Projects\KgrVpApp\src\MGR\CKeyEffectData.cc
      Name = CControlVars::mInstance
      Decl_type = CControlVars*
      Value = (CControlVars*)(0)

    # End Global

    # Begin Global

      File = E:\CVRi1\SD&D\Software\VLF_Software\Source\Projects\KgrVpApp\src\MGR\CKeyEffectData.cc
      Name = CTimeLoad::mInstance
      Decl_type = CTimeLoad*
      Value = (CTimeLoad*)(0)

    # End Global

    # Begin Global

      File = E:\CVRi1\SD&D\Software\VLF_Software\Source\Projects\KgrVpApp\src\MGR\CKeyEffectData.cc
      Name = CMsgHandler::mMsgHandlers
      Decl_type = InterfaceHandler*
      Bounds = 377
      Value = {(InterfaceHandler*)(0)}

    # End Global

    # Begin Global

      File = E:\CVRi1\SD&D\Software\VLF_Software\Source\Projects\KgrVpApp\src\MGR\CKeyEffectData.cc
      Name = CMsgHandler::mInstance
      Decl_type = CMsgHandler*
      Value = (CMsgHandler*)(0)

    # End Global

    # Begin Global

      File = E:\CVRi1\SD&D\Software\VLF_Software\Source\Projects\KgrVpApp\src\MGR\CKeyEffectData.cc
      Name = CVlf::mInstance
      Decl_type = CVlf*
      Value = (CVlf*)(0)

    # End Global

    # Begin Global

      File = E:\CVRi1\SD&D\Software\VLF_Software\Source\Projects\KgrVpApp\src\MGR\CKeyEffectData.cc
      Name = CDspBIT::mCBITTimer
      Decl_type = AlarmTimer
      Value = {0}

    # End Global

    # Begin Global

      File = E:\CVRi1\SD&D\Software\VLF_Software\Source\Projects\KgrVpApp\src\MGR\CKeyEffectData.cc
      Name = CDspBIT::mSWLEDTimer
      Decl_type = AlarmTimer
      Value = {0}

    # End Global

    # Begin Global

      File = E:\CVRi1\SD&D\Software\VLF_Software\Source\Projects\KgrVpApp\src\MGR\CKeyEffectData.cc
      Name = CDspBIT::mInstance
      Decl_type = CDspBIT*
      Value = (CDspBIT*)(0)

    # End Global

    # Begin Global

      File = E:\CVRi1\SD&D\Software\VLF_Software\Source\Projects\KgrVpApp\src\MGR\CKeyEffectData.cc
      Name = IVLFState::theInitState
      Decl_type = CInitState

    # End Global

    # Begin Global

      File = E:\CVRi1\SD&D\Software\VLF_Software\Source\Projects\KgrVpApp\src\MGR\CKeyEffectData.cc
      Name = IVLFState::theStandbyState
      Decl_type = CStandbyState

    # End Global

    # Begin Global

      File = E:\CVRi1\SD&D\Software\VLF_Software\Source\Projects\KgrVpApp\src\MGR\CKeyEffectData.cc
      Name = IVLFState::theOperationalState
      Decl_type = COperationalState

    # End Global

    # Begin Global

      File = E:\CVRi1\SD&D\Software\VLF_Software\Source\Projects\KgrVpApp\src\MGR\CKeyEffectData.cc
      Name = IVLFState::theDegradedState
      Decl_type = CDegradedState

    # End Global

    # Begin Global

      File = E:\CVRi1\SD&D\Software\VLF_Software\Source\Projects\KgrVpApp\src\MGR\CKeyEffectData.cc
      Name = IVLFState::theOfflineState
      Decl_type = COfflineState

    # End Global

    # Begin Global

      File = E:\CVRi1\SD&D\Software\VLF_Software\Source\Projects\KgrVpApp\src\MGR\CKeyEffectData.cc
      Name = IChannelState::theChOperationalState
      Decl_type = CChOperationalState

    # End Global

    # Begin Global

      File = E:\CVRi1\SD&D\Software\VLF_Software\Source\Projects\KgrVpApp\src\MGR\CKeyEffectData.cc
      Name = IChannelState::theChDegradedState
      Decl_type = CChDegradedState

    # End Global

    # Begin Global

      File = E:\CVRi1\SD&D\Software\VLF_Software\Source\Projects\KgrVpApp\src\MGR\CKeyEffectData.cc
      Name = IChannelState::theChOfflineState
      Decl_type = CChOfflineState

    # End Global

    # Begin Global

      File = E:\CVRi1\SD&D\Software\VLF_Software\Source\Projects\KgrVpApp\src\MGR\CKeyEffectData.cc
      Name = FpgaDevice::DEVICE_BASE_ADDRESS
      Decl_type = volatile char*
      Value = ""
      Const = t

    # End Global

    # Begin Code
/*
 * Sequence initialisation code will be placed here
 * Variables declared in this section do not have global scope
 */
static CChannel chan1 = CChannel(CH_1, CH1_FREQ, Ch1CmdConnection, FpgaRegChan1Address,(FpgaSetFreqPFuncType)&FpgaDevice::SetFreqChan1InHz, (FpgaGETSampleAddrPFuncType)&FpgaDevice::GetOutputSample1Address);

static CChannel chan2 = CChannel(CH_2, CH2_FREQ, Ch2CmdConnection, FpgaRegChan2Address,(FpgaSetFreqPFuncType)&FpgaDevice::SetFreqChan2InHz, (FpgaGETSampleAddrPFuncType)&FpgaDevice::GetOutputSample2Address);

static CChannel chan3 = CChannel(CH_3, CH3_FREQ, Ch3CmdConnection, FpgaRegChan3Address,(FpgaSetFreqPFuncType)&FpgaDevice::SetFreqChan3InHz, (FpgaGETSampleAddrPFuncType)&FpgaDevice::GetOutputSample3Address);

static CChannel chan4 = CChannel(CH_4, CH4_FREQ, Ch4CmdConnection, FpgaRegChan4Address,(FpgaSetFreqPFuncType)&FpgaDevice::SetFreqChan4InHz,  (FpgaGETSampleAddrPFuncType)&FpgaDevice::GetOutputSample4Address);

static CChannel chan5 = CChannel(CH_5, CH5_FREQ, Ch5CmdConnection, FpgaRegChan5Address,(FpgaSetFreqPFuncType)&FpgaDevice::SetFreqChan5InHz, (FpgaGETSampleAddrPFuncType)&FpgaDevice::GetOutputSample5Address);


CVlf::Instance()->chan[CH_1] = &chan1;
CVlf::Instance()->chan[CH_2] = &chan2;
CVlf::Instance()->chan[CH_3] = &chan3;
CVlf::Instance()->chan[CH_4] = &chan4;
CVlf::Instance()->chan[CH_5] = &chan5;
    # End Code

  #Begin Isolated Procedure

    File = E:\CVRi1\SD&D\Software\VLF_Software\Source\Projects\KgrVpApp\src\MGR\CKeyEffectData.cc
    Procedure = CKeyEffectData::Instance
    Procedure Number = 112
    Parameter = 0

  #End Isolated Procedure

  #Begin Isolated Procedure

    File = E:\CVRi1\SD&D\Software\VLF_Software\Source\Projects\KgrVpApp\src\MGR\CKeyEffectData.cc
    Procedure = CKeyEffectData::checkForRollover
    Procedure Number = 117
    Parameter = Write_Key_Effectivity_Data_Msg_Type *
    Parameter = unsigned
    Parameter = Key_Effectivity_Data_Type [ 100 ]

  #End Isolated Procedure

  #Begin Isolated Procedure

    File = E:\CVRi1\SD&D\Software\VLF_Software\Source\Projects\KgrVpApp\src\MGR\CKeyEffectData.cc
    Procedure = CKeyEffectData::setData
    Procedure Number = 120
    Parameter = Write_Key_Effectivity_Data_Msg_Type *
    Parameter = unsigned
    Parameter = Key_Effectivity_Data_Type [ 100 ]
    Parameter = unsigned

  #End Isolated Procedure

    # Begin Local Conversions
G
OMBoolean
bool
D
UINT2
unsigned short
I
bool
ldra_qq_bool_convert
C:\LDRA\LDRA_Toolsuite\Cpp\ldra_port_cpptbrunlib.h
    # End Local Conversions

    # Begin Global Conversions
C
int
ldra_qq_signed_int_convert
C
long
ldra_qq_signed_long_convert
C
long int
ldra_qq_signed_long_convert
C
short
ldra_qq_signed_short_convert
C
short int
ldra_qq_signed_short_convert
C
signed
ldra_qq_signed_int_convert
C
signed int
ldra_qq_signed_int_convert
C
signed long
ldra_qq_signed_long_convert
C
signed long int
ldra_qq_signed_long_convert
C
signed short
ldra_qq_signed_short_convert
C
signed short int
ldra_qq_signed_short_convert
C
unsigned
ldra_qq_unsigned_int_convert
C
unsigned int
ldra_qq_unsigned_int_convert
C
unsigned long
ldra_qq_unsigned_long_convert
C
unsigned long int
ldra_qq_unsigned_long_convert
C
unsigned short
ldra_qq_unsigned_short_convert
C
unsigned short int
ldra_qq_unsigned_short_convert
C
char
ldra_qq_char_convert
C
char*
ldra_qq_char_star_convert
C
CString
ldra_qq_CString_convert
C
double
ldra_qq_double_convert
C
float
ldra_qq_float_convert
C
long double
ldra_qq_long_double_convert
C
long long
ldra_qq_long_long_convert
C
long long int
ldra_qq_long_long_convert
C
signed long long
ldra_qq_long_long_convert
C
signed long long int
ldra_qq_long_long_convert
C
string
ldra_qq_string_convert
C
std::string
ldra_qq_string_convert
C
unsigned char
ldra_qq_unsigned_char_convert
C
unsigned long long
ldra_qq_ulong_long_convert
C
unsigned long long int
ldra_qq_ulong_long_convert
U
bool
ldra_qq_bool_convert
U
BOOL
ldra_qq_BOOL_convert
G
BIT
unsigned char
G
BYTE
unsigned char
G
CHAR
char
G
DWORD
unsigned long
G
FL32
float
G
FLOAT
float
G
float32
float
G
float64
double
G
FLOAT32
float
G
UChar8Type
unsigned char
G
DataByteType
unsigned char
G
uint8
unsigned char
G
uint16
unsigned short int
G
uint32
unsigned int
G
int8
signed char
G
int16
signed short int
G
int32
signed int
G
IEEE_SPFloatType
float
G
IEEE_DPFloatType
double
G
Float32Type
float
G
Float64Type
double
G
SInt16Type
signed short int
G
SInt32Type
signed int
G
SInt8Type
signed char
G
UInt16Type
unsigned short int
G
UInt32Type
unsigned int
G
UInt8Type
unsigned char
G
INT
int
G
Int8
char
G
Int16
short
G
Int32
long
G
INT8
char
G
INT16
short
G
INT32
int
G
INT8_T
int
G
INT16_T
int
G
LONG
long
G
LPARAM
long
G
LRESULT
long
G
SCHAR
signed char
G
SHORT
short
G
SINT
signed int
G
SInt8
signed char
G
SI16
signed int
G
SI32
signed long
G
SIGNED8
signed char
G
SIGNED16
signed int
G
SIGNED32
signed long
G
SInt16
signed short
G
SInt32
signed long
G
SWORD
signed long
G
TInt8
signed char
G
TInt16
short int
G
TInt32
long int
G
TInt
signed int
G
TReal
double
G
TReal32
float
G
TReal64
double
G
TUint
unsigned int
G
TUint8
unsigned char
G
TUint16
unsigned short int
G
TUint32
unsigned long int
G
U8Int
unsigned char
G
UI16
unsigned int
G
U16Int
unsigned int
G
UI32
unsigned long
G
U32Int
unsigned long
G
UCHAR
unsigned char
G
UInt8
unsigned char
G
UInt16
unsigned short
G
UInt32
unsigned long
G
UINT
unsigned int
G
UINT8
unsigned char
G
UINT8_T
unsigned int
G
UINT16
unsigned short
G
UINT16_T
unsigned int
G
UINT32_T
unsigned long
G
ULONG
unsigned long
G
UNSIGNED8
unsigned char
G
UNSIGNED16
unsigned int
G
UNSIGNED32
unsigned long
G
USHORT
unsigned short
G
WORD
unsigned short
G
WPARAM
unsigned int
G
bit
unsigned char
G
byte
unsigned char
G
dword
unsigned long
G
int8_t
char
G
int16_t
short
G
int32_t
long
G
lparam
long
G
lresult
long
G
real
float
G
sint
signed int
G
sint8_t
signed char
G
sint16_t
signed short
G
sint32_t
signed long
G
sword
signed long
G
uchar_T
unsigned char
G
uint
unsigned int
G
uint8_t
unsigned char
G
uint16_t
unsigned short
G
uint32_t
unsigned long
G
ushort_T
unsigned short
G
ulong_T
unsigned long
G
word
unsigned short
G
wparam
unsigned int
G
RhpBoolean
bool
G
RhpCharacter
char
G
RhpInteger
int
G
RhpPositive
unsigned int
G
RhpReal
double
G
RhpUnlimitedNatural
long
    # End Global Conversions

# Begin Stub

$ Stub based upon local stub

  Procedure = CCVLoadedKeyInfoMsg:: =
  Method = Managed
  Overloading = Prototype

  # Begin Overloading
const CCVLoadedKeyInfoMsg &
  # End Overloading

  # Begin MS Properties

    Return Value = *this

    # Begin Declarations
/* To Do : Enter code for stub global declarations here */

    # End Declarations

  # End MS Properties

# End Stub

# Begin Stub

$ Stub based upon local stub

  Procedure = CCVLoadedKeyInfoMsg::CCVLoadedKeyInfoMsg
  Method = Managed
  Overloading = Prototype

  # Begin Overloading
const CCVLoadedKeyInfoMsg &
  # End Overloading

  # Begin MS Properties

    # Begin Declarations
/* To Do : Enter code for stub global declarations here */

    # End Declarations

  # End MS Properties

# End Stub

# Begin Stub

$ Stub based upon local stub

  Procedure = CCVLoadedKeyInfoMsg::CCVLoadedKeyInfoMsg
  Method = Managed
  Overloading = Prototype

  # Begin Overloading
  # End Overloading

  # Begin MS Properties

    # Begin Declarations
/* To Do : Enter code for stub global declarations here */

    # End Declarations

  # End MS Properties

# End Stub

# Begin Stub

$ Stub based upon local stub

  Procedure = CCVLoadedKeyInfoMsg::HandleMsg
  Method = Managed
  Overloading = Prototype

  # Begin Overloading
CMessage *
  # End Overloading

  # Begin MS Properties

    # Begin Declarations
/* To Do : Enter code for stub global declarations here */

    # End Declarations

  # End MS Properties

# End Stub

# Begin Stub

$ Stub based upon local stub

  Procedure = CCVLoadedKeyInfoMsg::ValidateMsgParam
  Method = Managed
  Overloading = Prototype

  # Begin Overloading
const CMessage &
  # End Overloading

  # Begin MS Properties

    # Begin Declarations
/* To Do : Enter code for stub global declarations here */

    # End Declarations

  # End MS Properties

# End Stub

# Begin Stub

$ Stub based upon local stub

  Procedure = CCVLoadedKeyInfoMsg::~CCVLoadedKeyInfoMsg
  Method = Managed
  Overloading = Prototype

  # Begin Overloading
  # End Overloading

  # Begin MS Properties

    # Begin Declarations
/* To Do : Enter code for stub global declarations here */

    # End Declarations

  # End MS Properties

# End Stub

# Begin Stub

$ Stub based upon local stub

  Procedure = CChDegradedState:: =
  Method = Managed
  Overloading = Prototype

  # Begin Overloading
const CChDegradedState &
  # End Overloading

  # Begin MS Properties

    Return Value = *this

    # Begin Declarations
/* To Do : Enter code for stub global declarations here */

    # End Declarations

  # End MS Properties

# End Stub

# Begin Stub

$ Stub based upon local stub

  Procedure = CChDegradedState::CChDegradedState
  Method = Managed
  Overloading = Prototype

  # Begin Overloading
const CChDegradedState &
  # End Overloading

  # Begin MS Properties

    # Begin Declarations
/* To Do : Enter code for stub global declarations here */

    # End Declarations

  # End MS Properties

# End Stub

# Begin Stub

$ Stub based upon local stub

  Procedure = CChDegradedState::CChDegradedState
  Method = Managed
  Overloading = Prototype

  # Begin Overloading
  # End Overloading

  # Begin MS Properties

    # Begin Declarations
/* To Do : Enter code for stub global declarations here */

    # End Declarations

  # End MS Properties

# End Stub

# Begin Stub

$ Stub based upon local stub

  Procedure = CChDegradedState::ChangeCpChanOpStatus
  Method = Managed
  Overloading = Prototype

  # Begin Overloading
CChannel *
  # End Overloading

  # Begin MS Properties

    # Begin Declarations
/* To Do : Enter code for stub global declarations here */

    # End Declarations

  # End MS Properties

# End Stub

# Begin Stub

$ Stub based upon local stub

  Procedure = CChDegradedState::CheckStatusEvents
  Method = Managed
  Overloading = Prototype

  # Begin Overloading
CChannel *
  # End Overloading

  # Begin MS Properties

    # Begin Declarations
/* To Do : Enter code for stub global declarations here */

    # End Declarations

  # End MS Properties

# End Stub

# Begin Stub

$ Stub based upon local stub

  Procedure = CChDegradedState::CommonUpdate
  Method = Managed
  Overloading = Prototype

  # Begin Overloading
CChannel *
  # End Overloading

  # Begin MS Properties

    # Begin Declarations
/* To Do : Enter code for stub global declarations here */

    # End Declarations

  # End MS Properties

# End Stub

# Begin Stub

$ Stub based upon local stub

  Procedure = CChDegradedState::CryptoBIT
  Method = Managed
  Overloading = Prototype

  # Begin Overloading
CChannel *
  # End Overloading

  # Begin MS Properties

    # Begin Declarations
/* To Do : Enter code for stub global declarations here */

    # End Declarations

  # End MS Properties

# End Stub

# Begin Stub

$ Stub based upon local stub

  Procedure = CChDegradedState::CryptoChannelUpdate
  Method = Managed
  Overloading = Prototype

  # Begin Overloading
CChannel *
  # End Overloading

  # Begin MS Properties

    # Begin Declarations
/* To Do : Enter code for stub global declarations here */

    # End Declarations

  # End MS Properties

# End Stub

# Begin Stub

$ Stub based upon local stub

  Procedure = CChDegradedState::CryptoStatus
  Method = Managed
  Overloading = Prototype

  # Begin Overloading
CChannel *
  # End Overloading

  # Begin MS Properties

    # Begin Declarations
/* To Do : Enter code for stub global declarations here */

    # End Declarations

  # End MS Properties

# End Stub

# Begin Stub

$ Stub based upon local stub

  Procedure = CChDegradedState::LoadTime
  Method = Managed
  Overloading = Prototype

  # Begin Overloading
CChannel *
  # End Overloading

  # Begin MS Properties

    # Begin Declarations
/* To Do : Enter code for stub global declarations here */

    # End Declarations

  # End MS Properties

# End Stub

# Begin Stub

$ Stub based upon local stub

  Procedure = CChDegradedState::getChannelState
  Method = Managed
  Overloading = Prototype

  # Begin Overloading
  # End Overloading

  # Begin MS Properties

    # Begin Declarations
/* To Do : Enter code for stub global declarations here */

    # End Declarations

  # End MS Properties

# End Stub

# Begin Stub

$ Stub based upon local stub

  Procedure = CChDegradedState::~CChDegradedState
  Method = Managed
  Overloading = Prototype

  # Begin Overloading
  # End Overloading

  # Begin MS Properties

    # Begin Declarations
/* To Do : Enter code for stub global declarations here */

    # End Declarations

  # End MS Properties

# End Stub

# Begin Stub

$ Stub based upon local stub

  Procedure = CChOfflineState:: =
  Method = Managed
  Overloading = Prototype

  # Begin Overloading
const CChOfflineState &
  # End Overloading

  # Begin MS Properties

    Return Value = *this

    # Begin Declarations
/* To Do : Enter code for stub global declarations here */

    # End Declarations

  # End MS Properties

# End Stub

# Begin Stub

$ Stub based upon local stub

  Procedure = CChOfflineState::CChOfflineState
  Method = Managed
  Overloading = Prototype

  # Begin Overloading
const CChOfflineState &
  # End Overloading

  # Begin MS Properties

    # Begin Declarations
/* To Do : Enter code for stub global declarations here */

    # End Declarations

  # End MS Properties

# End Stub

# Begin Stub

$ Stub based upon local stub

  Procedure = CChOfflineState::CChOfflineState
  Method = Managed
  Overloading = Prototype

  # Begin Overloading
  # End Overloading

  # Begin MS Properties

    # Begin Declarations
/* To Do : Enter code for stub global declarations here */

    # End Declarations

  # End MS Properties

# End Stub

# Begin Stub

$ Stub based upon local stub

  Procedure = CChOfflineState::StartChannel
  Method = Managed
  Overloading = Prototype

  # Begin Overloading
CChannel *
  # End Overloading

  # Begin MS Properties

    # Begin Declarations
/* To Do : Enter code for stub global declarations here */

    # End Declarations

  # End MS Properties

# End Stub

# Begin Stub

$ Stub based upon local stub

  Procedure = CChOfflineState::getChannelState
  Method = Managed
  Overloading = Prototype

  # Begin Overloading
  # End Overloading

  # Begin MS Properties

    # Begin Declarations
/* To Do : Enter code for stub global declarations here */

    # End Declarations

  # End MS Properties

# End Stub

# Begin Stub

$ Stub based upon local stub

  Procedure = CChOfflineState::~CChOfflineState
  Method = Managed
  Overloading = Prototype

  # Begin Overloading
  # End Overloading

  # Begin MS Properties

    # Begin Declarations
/* To Do : Enter code for stub global declarations here */

    # End Declarations

  # End MS Properties

# End Stub

# Begin Stub

$ Stub based upon local stub

  Procedure = CChOperationalState:: =
  Method = Managed
  Overloading = Prototype

  # Begin Overloading
const CChOperationalState &
  # End Overloading

  # Begin MS Properties

    Return Value = *this

    # Begin Declarations
/* To Do : Enter code for stub global declarations here */

    # End Declarations

  # End MS Properties

# End Stub

# Begin Stub

$ Stub based upon local stub

  Procedure = CChOperationalState::CChOperationalState
  Method = Managed
  Overloading = Prototype

  # Begin Overloading
const CChOperationalState &
  # End Overloading

  # Begin MS Properties

    # Begin Declarations
/* To Do : Enter code for stub global declarations here */

    # End Declarations

  # End MS Properties

# End Stub

# Begin Stub

$ Stub based upon local stub

  Procedure = CChOperationalState::CChOperationalState
  Method = Managed
  Overloading = Prototype

  # Begin Overloading
  # End Overloading

  # Begin MS Properties

    # Begin Declarations
/* To Do : Enter code for stub global declarations here */

    # End Declarations

  # End MS Properties

# End Stub

# Begin Stub

$ Stub based upon local stub

  Procedure = CChOperationalState::ChangeCpChanOpStatus
  Method = Managed
  Overloading = Prototype

  # Begin Overloading
CChannel *
  # End Overloading

  # Begin MS Properties

    # Begin Declarations
/* To Do : Enter code for stub global declarations here */

    # End Declarations

  # End MS Properties

# End Stub

# Begin Stub

$ Stub based upon local stub

  Procedure = CChOperationalState::CryptoBIT
  Method = Managed
  Overloading = Prototype

  # Begin Overloading
CChannel *
  # End Overloading

  # Begin MS Properties

    # Begin Declarations
/* To Do : Enter code for stub global declarations here */

    # End Declarations

  # End MS Properties

# End Stub

# Begin Stub

$ Stub based upon local stub

  Procedure = CChOperationalState::CryptoChannelUpdate
  Method = Managed
  Overloading = Prototype

  # Begin Overloading
CChannel *
  # End Overloading

  # Begin MS Properties

    # Begin Declarations
/* To Do : Enter code for stub global declarations here */

    # End Declarations

  # End MS Properties

# End Stub

# Begin Stub

$ Stub based upon local stub

  Procedure = CChOperationalState::CryptoStatus
  Method = Managed
  Overloading = Prototype

  # Begin Overloading
CChannel *
  # End Overloading

  # Begin MS Properties

    # Begin Declarations
/* To Do : Enter code for stub global declarations here */

    # End Declarations

  # End MS Properties

# End Stub

# Begin Stub

$ Stub based upon local stub

  Procedure = CChOperationalState::LoadTime
  Method = Managed
  Overloading = Prototype

  # Begin Overloading
CChannel *
  # End Overloading

  # Begin MS Properties

    # Begin Declarations
/* To Do : Enter code for stub global declarations here */

    # End Declarations

  # End MS Properties

# End Stub

# Begin Stub

$ Stub based upon local stub

  Procedure = CChOperationalState::getChannelState
  Method = Managed
  Overloading = Prototype

  # Begin Overloading
  # End Overloading

  # Begin MS Properties

    # Begin Declarations
/* To Do : Enter code for stub global declarations here */

    # End Declarations

  # End MS Properties

# End Stub

# Begin Stub

$ Stub based upon local stub

  Procedure = CChOperationalState::~CChOperationalState
  Method = Managed
  Overloading = Prototype

  # Begin Overloading
  # End Overloading

  # Begin MS Properties

    # Begin Declarations
/* To Do : Enter code for stub global declarations here */

    # End Declarations

  # End MS Properties

# End Stub

# Begin Stub

$ Stub based upon local stub

  Procedure = CChannel::CChannel
  Method = Managed
  Overloading = Prototype

  # Begin Overloading
Channel_ID_Type
unsigned short
Connection
Value
FpgaSetFreqPFuncType
FpgaGETSampleAddrPFuncType
  # End Overloading

  # Begin MS Properties

    # Begin Declarations
/* To Do : Enter code for stub global declarations here */

static CMode15 ldra_qq_gl_5;
static CMode9 ldra_qq_gl_6;
static CModeHidar ldra_qq_gl_7;
static CMode23 ldra_qq_gl_8;
static CChOfflineState ldra_qq_gl_9;
    # End Declarations

    # Begin Constructor Inits
mMode15(&ldra_qq_gl_5)
mMode9(&ldra_qq_gl_6)
mModeHidar(&ldra_qq_gl_7)
mMode23(&ldra_qq_gl_8)
mChannelState(&ldra_qq_gl_9)
    # End Constructor Inits

  # End MS Properties

# End Stub

# Begin Stub

$ Stub based upon local stub

  Procedure = CChannel::ChangeCpChanOpStatus
  Method = Managed
  Overloading = Prototype

  # Begin Overloading
  # End Overloading

  # Begin MS Properties

    # Begin Declarations
/* To Do : Enter code for stub global declarations here */

    # End Declarations

  # End MS Properties

# End Stub

# Begin Stub

$ Stub based upon local stub

  Procedure = CChannel::CryptoBIT
  Method = Managed
  Overloading = Prototype

  # Begin Overloading
  # End Overloading

  # Begin MS Properties

    # Begin Declarations
/* To Do : Enter code for stub global declarations here */

    # End Declarations

  # End MS Properties

# End Stub

# Begin Stub

$ Stub based upon local stub

  Procedure = CChannel::CryptoChannelUpdate
  Method = Managed
  Overloading = Prototype

  # Begin Overloading
  # End Overloading

  # Begin MS Properties

    # Begin Declarations
/* To Do : Enter code for stub global declarations here */

    # End Declarations

  # End MS Properties

# End Stub

# Begin Stub

$ Stub based upon local stub

  Procedure = CChannel::CryptoStatus
  Method = Managed
  Overloading = Prototype

  # Begin Overloading
  # End Overloading

  # Begin MS Properties

    # Begin Declarations
/* To Do : Enter code for stub global declarations here */

    # End Declarations

  # End MS Properties

# End Stub

# Begin Stub

$ Stub based upon local stub

  Procedure = CChannel::GetChState
  Method = Managed
  Overloading = Prototype

  # Begin Overloading
  # End Overloading

  # Begin MS Properties

    # Begin Declarations
/* To Do : Enter code for stub global declarations here */

    # End Declarations

  # End MS Properties

# End Stub

# Begin Stub

$ Stub based upon local stub

  Procedure = CChannel::HandleChStatus
  Method = Managed
  Overloading = Prototype

  # Begin Overloading
ChanStatusQueueStruct *
  # End Overloading

  # Begin MS Properties

    # Begin Declarations
/* To Do : Enter code for stub global declarations here */

    # End Declarations

  # End MS Properties

# End Stub

# Begin Stub

$ Stub based upon local stub

  Procedure = CChannel::HandleMgrCmd
  Method = Managed
  Overloading = Prototype

  # Begin Overloading
ChannelCmdStruct *
  # End Overloading

  # Begin MS Properties

    # Begin Declarations
/* To Do : Enter code for stub global declarations here */

    # End Declarations

  # End MS Properties

# End Stub

# Begin Stub

$ Stub based upon local stub

  Procedure = CChannel::LoadChOutputSample
  Method = Managed
  Overloading = Prototype

  # Begin Overloading
  # End Overloading

  # Begin MS Properties

    # Begin Declarations
/* To Do : Enter code for stub global declarations here */

    # End Declarations

  # End MS Properties

# End Stub

# Begin Stub

$ Stub based upon local stub

  Procedure = CChannel::LoadTime
  Method = Managed
  Overloading = Prototype

  # Begin Overloading
  # End Overloading

  # Begin MS Properties

    # Begin Declarations
/* To Do : Enter code for stub global declarations here */

    # End Declarations

  # End MS Properties

# End Stub

# Begin Stub

$ Stub based upon local stub

  Procedure = CChannel::ReportChStatus
  Method = Managed
  Overloading = Prototype

  # Begin Overloading
  # End Overloading

  # Begin MS Properties

    # Begin Declarations
/* To Do : Enter code for stub global declarations here */

    # End Declarations

  # End MS Properties

# End Stub

# Begin Stub

$ Stub based upon local stub

  Procedure = CChannel::SendChCmd
  Method = Managed
  Overloading = Prototype

  # Begin Overloading
  # End Overloading

  # Begin MS Properties

    # Begin Declarations
/* To Do : Enter code for stub global declarations here */

    # End Declarations

  # End MS Properties

# End Stub

# Begin Stub

$ Stub based upon local stub

  Procedure = CChannel::SetChCmd
  Method = Managed
  Overloading = Prototype

  # Begin Overloading
ChannelCmdStruct *
  # End Overloading

  # Begin MS Properties

    # Begin Declarations
/* To Do : Enter code for stub global declarations here */

    # End Declarations

  # End MS Properties

# End Stub

# Begin Stub

$ Stub based upon local stub

  Procedure = CChannel::SetChFreq
  Method = Managed
  Overloading = Prototype

  # Begin Overloading
const unsigned int
  # End Overloading

  # Begin MS Properties

    # Begin Declarations
/* To Do : Enter code for stub global declarations here */

    # End Declarations

  # End MS Properties

# End Stub

# Begin Stub

$ Stub based upon local stub

  Procedure = CChannel::SetChFreq
  Method = Managed
  Overloading = Prototype

  # Begin Overloading
  # End Overloading

  # Begin MS Properties

    # Begin Declarations
/* To Do : Enter code for stub global declarations here */

    # End Declarations

  # End MS Properties

# End Stub

# Begin Stub

$ Stub based upon local stub

  Procedure = CChannel::SetChState
  Method = Managed
  Overloading = Prototype

  # Begin Overloading
VLF_Channel_State_Type
  # End Overloading

  # Begin MS Properties

    # Begin Declarations
/* To Do : Enter code for stub global declarations here */

    # End Declarations

  # End MS Properties

# End Stub

# Begin Stub

$ Stub based upon local stub

  Procedure = CChannel::StartChannel
  Method = Managed
  Overloading = Prototype

  # Begin Overloading
  # End Overloading

  # Begin MS Properties

    # Begin Declarations
/* To Do : Enter code for stub global declarations here */

    # End Declarations

  # End MS Properties

# End Stub

# Begin Stub

$ Stub based upon local stub

  Procedure = CChannel::StopChannel
  Method = Managed
  Overloading = Prototype

  # Begin Overloading
  # End Overloading

  # Begin MS Properties

    # Begin Declarations
/* To Do : Enter code for stub global declarations here */

    # End Declarations

  # End MS Properties

# End Stub

# Begin Stub

$ Stub based upon local stub

  Procedure = CChannel::setState
  Method = Managed
  Overloading = Prototype

  # Begin Overloading
IChannelState *
  # End Overloading

  # Begin MS Properties

    # Begin Declarations
/* To Do : Enter code for stub global declarations here */

    # End Declarations

  # End MS Properties

# End Stub

# Begin Stub

$ Stub based upon local stub

  Procedure = CChannel::~CChannel
  Method = Managed
  Overloading = Prototype

  # Begin Overloading
  # End Overloading

  # Begin MS Properties

    # Begin Declarations
/* To Do : Enter code for stub global declarations here */

    # End Declarations

  # End MS Properties

# End Stub

# Begin Stub

$ Stub based upon local stub

  Procedure = CControlVars:: =
  Method = Managed
  Overloading = Prototype

  # Begin Overloading
const CControlVars &
  # End Overloading

  # Begin MS Properties

    Return Value = *this

    # Begin Declarations
/* To Do : Enter code for stub global declarations here */

    # End Declarations

  # End MS Properties

# End Stub

# Begin Stub

$ Stub based upon local stub

  Procedure = CControlVars::CControlVars
  Method = Managed
  Overloading = Prototype

  # Begin Overloading
const CControlVars &
  # End Overloading

  # Begin MS Properties

    # Begin Declarations
/* To Do : Enter code for stub global declarations here */

    # End Declarations

  # End MS Properties

# End Stub

# Begin Stub

$ Stub based upon local stub

  Procedure = CControlVars::CControlVars
  Method = Managed
  Overloading = Prototype

  # Begin Overloading
  # End Overloading

  # Begin MS Properties

    # Begin Declarations
/* To Do : Enter code for stub global declarations here */

    # End Declarations

  # End MS Properties

# End Stub

# Begin Stub

$ Stub based upon local stub

  Procedure = CControlVars::Instance
  Method = Managed
  Overloading = Prototype

  # Begin Overloading
  # End Overloading

  # Begin MS Properties

    Return Value = &ldra_qq_lv_5

    # Begin Declarations
/* To Do : Enter code for stub global declarations here */

    # End Declarations

    # Begin Local Declarations
static CControlVars ldra_qq_lv_5;
    # End Local Declarations

  # End MS Properties

# End Stub

# Begin Stub

$ Stub based upon local stub

  Procedure = CControlVars::~CControlVars
  Method = Managed
  Overloading = Prototype

  # Begin Overloading
  # End Overloading

  # Begin MS Properties

    # Begin Declarations
/* To Do : Enter code for stub global declarations here */

    # End Declarations

  # End MS Properties

# End Stub

# Begin Stub

$ Stub based upon local stub

  Procedure = CDegradedState:: =
  Method = Managed
  Overloading = Prototype

  # Begin Overloading
const CDegradedState &
  # End Overloading

  # Begin MS Properties

    Return Value = *this

    # Begin Declarations
/* To Do : Enter code for stub global declarations here */

    # End Declarations

  # End MS Properties

# End Stub

# Begin Stub

$ Stub based upon local stub

  Procedure = CDegradedState::CDegradedState
  Method = Managed
  Overloading = Prototype

  # Begin Overloading
const CDegradedState &
  # End Overloading

  # Begin MS Properties

    # Begin Declarations
/* To Do : Enter code for stub global declarations here */

    # End Declarations

  # End MS Properties

# End Stub

# Begin Stub

$ Stub based upon local stub

  Procedure = CDegradedState::CDegradedState
  Method = Managed
  Overloading = Prototype

  # Begin Overloading
  # End Overloading

  # Begin MS Properties

    # Begin Declarations
/* To Do : Enter code for stub global declarations here */

    # End Declarations

  # End MS Properties

# End Stub

# Begin Stub

$ Stub based upon local stub

  Procedure = CDegradedState::ChannelStateChange
  Method = Managed
  Overloading = Prototype

  # Begin Overloading
CVlf *
  # End Overloading

  # Begin MS Properties

    # Begin Declarations
/* To Do : Enter code for stub global declarations here */

    # End Declarations

  # End MS Properties

# End Stub

# Begin Stub

$ Stub based upon local stub

  Procedure = CDegradedState::getState
  Method = Managed
  Overloading = Prototype

  # Begin Overloading
  # End Overloading

  # Begin MS Properties

    # Begin Declarations
/* To Do : Enter code for stub global declarations here */

    # End Declarations

  # End MS Properties

# End Stub

# Begin Stub

$ Stub based upon local stub

  Procedure = CDegradedState::~CDegradedState
  Method = Managed
  Overloading = Prototype

  # Begin Overloading
  # End Overloading

  # Begin MS Properties

    # Begin Declarations
/* To Do : Enter code for stub global declarations here */

    # End Declarations

  # End MS Properties

# End Stub

# Begin Stub

$ Stub based upon local stub

  Procedure = CDspBIT::CBITTimeOutHandler
  Method = Managed
  Overloading = Prototype

  # Begin Overloading
  # End Overloading

  # Begin MS Properties

    # Begin Declarations
/* To Do : Enter code for stub global declarations here */

    # End Declarations

  # End MS Properties

# End Stub

# Begin Stub

$ Stub based upon local stub

  Procedure = CDspBIT::CDspBIT
  Method = Managed
  Overloading = Prototype

  # Begin Overloading
  # End Overloading

  # Begin MS Properties

    # Begin Declarations
/* To Do : Enter code for stub global declarations here */

    # End Declarations

  # End MS Properties

# End Stub

# Begin Stub

$ Stub based upon local stub

  Procedure = CDspBIT::Instance
  Method = Managed
  Overloading = Prototype

  # Begin Overloading
  # End Overloading

  # Begin MS Properties

    Return Value = &ldra_qq_lv_6

    # Begin Declarations
/* To Do : Enter code for stub global declarations here */

    # End Declarations

    # Begin Local Declarations
static CDspBIT ldra_qq_lv_6;
    # End Local Declarations

  # End MS Properties

# End Stub

# Begin Stub

$ Stub based upon local stub

  Procedure = CDspBIT::SWLEDTimeOutHandler
  Method = Managed
  Overloading = Prototype

  # Begin Overloading
  # End Overloading

  # Begin MS Properties

    # Begin Declarations
/* To Do : Enter code for stub global declarations here */

    # End Declarations

  # End MS Properties

# End Stub

# Begin Stub

$ Stub based upon local stub

  Procedure = CDspBIT::getDCXOStatus
  Method = Managed
  Overloading = Prototype

  # Begin Overloading
  # End Overloading

  # Begin MS Properties

    # Begin Declarations
/* To Do : Enter code for stub global declarations here */

    # End Declarations

  # End MS Properties

# End Stub

# Begin Stub

$ Stub based upon local stub

  Procedure = CDspBIT::getExtSelStatus
  Method = Managed
  Overloading = Prototype

  # Begin Overloading
  # End Overloading

  # Begin MS Properties

    # Begin Declarations
/* To Do : Enter code for stub global declarations here */

    # End Declarations

  # End MS Properties

# End Stub

# Begin Stub

$ Stub based upon local stub

  Procedure = CDspBIT::getFCXOLockStatus
  Method = Managed
  Overloading = Prototype

  # Begin Overloading
  # End Overloading

  # Begin MS Properties

    # Begin Declarations
/* To Do : Enter code for stub global declarations here */

    # End Declarations

  # End MS Properties

# End Stub

# Begin Stub

$ Stub based upon local stub

  Procedure = CDspBIT::getFpgaConfigFault
  Method = Managed
  Overloading = Prototype

  # Begin Overloading
  # End Overloading

  # Begin MS Properties

    # Begin Declarations
/* To Do : Enter code for stub global declarations here */

    # End Declarations

  # End MS Properties

# End Stub

# Begin Stub

$ Stub based upon local stub

  Procedure = CDspBIT::getFpgaStatusHelper
  Method = Managed
  Overloading = Prototype

  # Begin Overloading
CDspBIT::FPGA_STATUS_TYPE
  # End Overloading

  # Begin MS Properties

    # Begin Declarations
/* To Do : Enter code for stub global declarations here */

    # End Declarations

  # End MS Properties

# End Stub

# Begin Stub

$ Stub based upon local stub

  Procedure = CDspBIT::getInterlockStatus
  Method = Managed
  Overloading = Prototype

  # Begin Overloading
  # End Overloading

  # Begin MS Properties

    # Begin Declarations
/* To Do : Enter code for stub global declarations here */

    # End Declarations

  # End MS Properties

# End Stub

# Begin Stub

$ Stub based upon local stub

  Procedure = CDspBIT::getPpsStatus
  Method = Managed
  Overloading = Prototype

  # Begin Overloading
  # End Overloading

  # Begin MS Properties

    # Begin Declarations
/* To Do : Enter code for stub global declarations here */

    # End Declarations

  # End MS Properties

# End Stub

# Begin Stub

$ Stub based upon local stub

  Procedure = CDspBIT::getRfaPsStatus
  Method = Managed
  Overloading = Prototype

  # Begin Overloading
  # End Overloading

  # Begin MS Properties

    # Begin Declarations
/* To Do : Enter code for stub global declarations here */

    # End Declarations

  # End MS Properties

# End Stub

# Begin Stub

$ Stub based upon local stub

  Procedure = CDspBIT::getTimeLoadedStatus
  Method = Managed
  Overloading = Prototype

  # Begin Overloading
  # End Overloading

  # Begin MS Properties

    # Begin Declarations
/* To Do : Enter code for stub global declarations here */

    # End Declarations

  # End MS Properties

# End Stub

# Begin Stub

$ Stub based upon local stub

  Procedure = CDspBIT::initCBITResults
  Method = Managed
  Overloading = Prototype

  # Begin Overloading
  # End Overloading

  # Begin MS Properties

    Return Value = ldra_qq_lv_7

    # Begin Declarations
/* To Do : Enter code for stub global declarations here */

    # End Declarations

    # Begin Local Declarations
static BIT_Result_Type ldra_qq_lv_7;
    # End Local Declarations

  # End MS Properties

# End Stub

# Begin Stub

$ Stub based upon local stub

  Procedure = CDspBIT::initPBITResults
  Method = Managed
  Overloading = Prototype

  # Begin Overloading
  # End Overloading

  # Begin MS Properties

    Return Value = ldra_qq_lv_8

    # Begin Declarations
/* To Do : Enter code for stub global declarations here */

    # End Declarations

    # Begin Local Declarations
static BIT_Result_Type ldra_qq_lv_8;
    # End Local Declarations

  # End MS Properties

# End Stub

# Begin Stub

$ Stub based upon local stub

  Procedure = CDspBIT::isCPLinkUp
  Method = Managed
  Overloading = Prototype

  # Begin Overloading
  # End Overloading

  # Begin MS Properties

    # Begin Declarations
/* To Do : Enter code for stub global declarations here */

    # End Declarations

  # End MS Properties

# End Stub

# Begin Stub

$ Stub based upon local stub

  Procedure = CDspBIT::isDSP2LinkUp
  Method = Managed
  Overloading = Prototype

  # Begin Overloading
  # End Overloading

  # Begin MS Properties

    # Begin Declarations
/* To Do : Enter code for stub global declarations here */

    # End Declarations

  # End MS Properties

# End Stub

# Begin Stub

$ Stub based upon local stub

  Procedure = CDspBIT::runDspCBIT
  Method = Managed
  Overloading = Prototype

  # Begin Overloading
  # End Overloading

  # Begin MS Properties

    Return Value = ldra_qq_lv_9

    # Begin Declarations
/* To Do : Enter code for stub global declarations here */

    # End Declarations

    # Begin Local Declarations
static BIT_Result_Type ldra_qq_lv_9;
    # End Local Declarations

  # End MS Properties

# End Stub

# Begin Stub

$ Stub based upon local stub

  Procedure = CDspBIT::runDspPBIT
  Method = Managed
  Overloading = Prototype

  # Begin Overloading
  # End Overloading

  # Begin MS Properties

    Return Value = ldra_qq_lv_10

    # Begin Declarations
/* To Do : Enter code for stub global declarations here */

    # End Declarations

    # Begin Local Declarations
static BIT_Result_Type ldra_qq_lv_10;
    # End Local Declarations

  # End MS Properties

# End Stub

# Begin Stub

$ Stub based upon local stub

  Procedure = CDspBIT::runFpgaCRCTest
  Method = Managed
  Overloading = Prototype

  # Begin Overloading
  # End Overloading

  # Begin MS Properties

    # Begin Declarations
/* To Do : Enter code for stub global declarations here */

    # End Declarations

  # End MS Properties

# End Stub

# Begin Stub

$ Stub based upon local stub

  Procedure = CDspBIT::runFpgaIFTest
  Method = Managed
  Overloading = Prototype

  # Begin Overloading
  # End Overloading

  # Begin MS Properties

    # Begin Declarations
/* To Do : Enter code for stub global declarations here */

    # End Declarations

  # End MS Properties

# End Stub

# Begin Stub

$ Stub based upon local stub

  Procedure = CDspBIT::runPPSTest
  Method = Managed
  Overloading = Prototype

  # Begin Overloading
TimeLoadCmd
  # End Overloading

  # Begin MS Properties

    # Begin Declarations
/* To Do : Enter code for stub global declarations here */

    # End Declarations

  # End MS Properties

# End Stub

# Begin Stub

$ Stub based upon local stub

  Procedure = CDspBIT::runTimeAccuracyTest
  Method = Managed
  Overloading = Prototype

  # Begin Overloading
  # End Overloading

  # Begin MS Properties

    # Begin Declarations
/* To Do : Enter code for stub global declarations here */

    # End Declarations

  # End MS Properties

# End Stub

# Begin Stub

$ Stub based upon local stub

  Procedure = CDspBIT::toggleSwStatusLED
  Method = Managed
  Overloading = Prototype

  # Begin Overloading
  # End Overloading

  # Begin MS Properties

    # Begin Declarations
/* To Do : Enter code for stub global declarations here */

    # End Declarations

  # End MS Properties

# End Stub

# Begin Stub

$ Stub based upon local stub

  Procedure = CDspBIT::update25MhzClockStatus
  Method = Managed
  Overloading = Prototype

  # Begin Overloading
BIT_Result_Type &
  # End Overloading

  # Begin MS Properties

    # Begin Declarations
/* To Do : Enter code for stub global declarations here */

    # End Declarations

  # End MS Properties

# End Stub

# Begin Stub

$ Stub based upon local stub

  Procedure = CDspBIT::updateAntChan1Status
  Method = Managed
  Overloading = Prototype

  # Begin Overloading
BIT_Result_Type &
  # End Overloading

  # Begin MS Properties

    # Begin Declarations
/* To Do : Enter code for stub global declarations here */

    # End Declarations

  # End MS Properties

# End Stub

# Begin Stub

$ Stub based upon local stub

  Procedure = CDspBIT::updateAntChan2Status
  Method = Managed
  Overloading = Prototype

  # Begin Overloading
BIT_Result_Type &
  # End Overloading

  # Begin MS Properties

    # Begin Declarations
/* To Do : Enter code for stub global declarations here */

    # End Declarations

  # End MS Properties

# End Stub

# Begin Stub

$ Stub based upon local stub

  Procedure = CDspBIT::updateAntChanStatus
  Method = Managed
  Overloading = Prototype

  # Begin Overloading
BIT_Result_Type &
DSP1_PBIT_Type
  # End Overloading

  # Begin MS Properties

    # Begin Declarations
/* To Do : Enter code for stub global declarations here */

    # End Declarations

  # End MS Properties

# End Stub

# Begin Stub

$ Stub based upon local stub

  Procedure = CDspBIT::updateCpuBoardStatus
  Method = Managed
  Overloading = Prototype

  # Begin Overloading
BIT_Result_Type &
  # End Overloading

  # Begin MS Properties

    # Begin Declarations
/* To Do : Enter code for stub global declarations here */

    # End Declarations

  # End MS Properties

# End Stub

# Begin Stub

$ Stub based upon local stub

  Procedure = CDspBIT::updateDcxoBitStatus
  Method = Managed
  Overloading = Prototype

  # Begin Overloading
BIT_Result_Type &
  # End Overloading

  # Begin MS Properties

    # Begin Declarations
/* To Do : Enter code for stub global declarations here */

    # End Declarations

  # End MS Properties

# End Stub

# Begin Stub

$ Stub based upon local stub

  Procedure = CDspBIT::updateEccErrorStatus
  Method = Managed
  Overloading = Prototype

  # Begin Overloading
BIT_Result_Type &
  # End Overloading

  # Begin MS Properties

    # Begin Declarations
/* To Do : Enter code for stub global declarations here */

    # End Declarations

  # End MS Properties

# End Stub

# Begin Stub

$ Stub based upon local stub

  Procedure = CDspBIT::updateEccStatus
  Method = Managed
  Overloading = Prototype

  # Begin Overloading
BIT_Result_Type &
  # End Overloading

  # Begin MS Properties

    # Begin Declarations
/* To Do : Enter code for stub global declarations here */

    # End Declarations

  # End MS Properties

# End Stub

# Begin Stub

$ Stub based upon local stub

  Procedure = CDspBIT::updateEepromStatus
  Method = Managed
  Overloading = Prototype

  # Begin Overloading
BIT_Result_Type &
  # End Overloading

  # Begin MS Properties

    # Begin Declarations
/* To Do : Enter code for stub global declarations here */

    # End Declarations

  # End MS Properties

# End Stub

# Begin Stub

$ Stub based upon local stub

  Procedure = CDspBIT::updateExtSelStatus
  Method = Managed
  Overloading = Prototype

  # Begin Overloading
BIT_Result_Type &
  # End Overloading

  # Begin MS Properties

    # Begin Declarations
/* To Do : Enter code for stub global declarations here */

    # End Declarations

  # End MS Properties

# End Stub

# Begin Stub

$ Stub based upon local stub

  Procedure = CDspBIT::updateFlashStatus
  Method = Managed
  Overloading = Prototype

  # Begin Overloading
BIT_Result_Type &
  # End Overloading

  # Begin MS Properties

    # Begin Declarations
/* To Do : Enter code for stub global declarations here */

    # End Declarations

  # End MS Properties

# End Stub

# Begin Stub

$ Stub based upon local stub

  Procedure = CDspBIT::updateFpgaCrcStatus
  Method = Managed
  Overloading = Prototype

  # Begin Overloading
BIT_Result_Type &
  # End Overloading

  # Begin MS Properties

    # Begin Declarations
/* To Do : Enter code for stub global declarations here */

    # End Declarations

  # End MS Properties

# End Stub

# Begin Stub

$ Stub based upon local stub

  Procedure = CDspBIT::updateFpgaIfStatus
  Method = Managed
  Overloading = Prototype

  # Begin Overloading
BIT_Result_Type &
  # End Overloading

  # Begin MS Properties

    # Begin Declarations
/* To Do : Enter code for stub global declarations here */

    # End Declarations

  # End MS Properties

# End Stub

# Begin Stub

$ Stub based upon local stub

  Procedure = CDspBIT::updateFpgaStatus
  Method = Managed
  Overloading = Prototype

  # Begin Overloading
BIT_Result_Type &
  # End Overloading

  # Begin MS Properties

    # Begin Declarations
/* To Do : Enter code for stub global declarations here */

    # End Declarations

  # End MS Properties

# End Stub

# Begin Stub

$ Stub based upon local stub

  Procedure = CDspBIT::updateIic1Status
  Method = Managed
  Overloading = Prototype

  # Begin Overloading
BIT_Result_Type &
const unsigned int &
  # End Overloading

  # Begin MS Properties

    # Begin Declarations
/* To Do : Enter code for stub global declarations here */

    # End Declarations

  # End MS Properties

# End Stub

# Begin Stub

$ Stub based upon local stub

  Procedure = CDspBIT::updateInterlockRcvStatus
  Method = Managed
  Overloading = Prototype

  # Begin Overloading
BIT_Result_Type &
  # End Overloading

  # Begin MS Properties

    # Begin Declarations
/* To Do : Enter code for stub global declarations here */

    # End Declarations

  # End MS Properties

# End Stub

# Begin Stub

$ Stub based upon local stub

  Procedure = CDspBIT::updateLinkAliveCount
  Method = Managed
  Overloading = Prototype

  # Begin Overloading
const CDspBIT::Ethernet_Comm_Type
  # End Overloading

  # Begin MS Properties

    # Begin Declarations
/* To Do : Enter code for stub global declarations here */

    # End Declarations

  # End MS Properties

# End Stub

# Begin Stub

$ Stub based upon local stub

  Procedure = CDspBIT::updateOvervoltageStatus
  Method = Managed
  Overloading = Prototype

  # Begin Overloading
BIT_Result_Type &
  # End Overloading

  # Begin MS Properties

    # Begin Declarations
/* To Do : Enter code for stub global declarations here */

    # End Declarations

  # End MS Properties

# End Stub

# Begin Stub

$ Stub based upon local stub

  Procedure = CDspBIT::updatePBITDcxoBitStatus
  Method = Managed
  Overloading = Prototype

  # Begin Overloading
BIT_Result_Type &
  # End Overloading

  # Begin MS Properties

    # Begin Declarations
/* To Do : Enter code for stub global declarations here */

    # End Declarations

  # End MS Properties

# End Stub

# Begin Stub

$ Stub based upon local stub

  Procedure = CDspBIT::updatePBITRfaPsBitStatus
  Method = Managed
  Overloading = Prototype

  # Begin Overloading
BIT_Result_Type &
  # End Overloading

  # Begin MS Properties

    # Begin Declarations
/* To Do : Enter code for stub global declarations here */

    # End Declarations

  # End MS Properties

# End Stub

# Begin Stub

$ Stub based upon local stub

  Procedure = CDspBIT::updatePBITfcxoStatus
  Method = Managed
  Overloading = Prototype

  # Begin Overloading
BIT_Result_Type &
  # End Overloading

  # Begin MS Properties

    # Begin Declarations
/* To Do : Enter code for stub global declarations here */

    # End Declarations

  # End MS Properties

# End Stub

# Begin Stub

$ Stub based upon local stub

  Procedure = CDspBIT::updatePpsStatus
  Method = Managed
  Overloading = Prototype

  # Begin Overloading
BIT_Result_Type &
const unsigned int &
  # End Overloading

  # Begin MS Properties

    # Begin Declarations
/* To Do : Enter code for stub global declarations here */

    # End Declarations

  # End MS Properties

# End Stub

# Begin Stub

$ Stub based upon local stub

  Procedure = CDspBIT::updateProcessorStatus
  Method = Managed
  Overloading = Prototype

  # Begin Overloading
BIT_Result_Type &
  # End Overloading

  # Begin MS Properties

    # Begin Declarations
/* To Do : Enter code for stub global declarations here */

    # End Declarations

  # End MS Properties

# End Stub

# Begin Stub

$ Stub based upon local stub

  Procedure = CDspBIT::updatePs1BitStatus
  Method = Managed
  Overloading = Prototype

  # Begin Overloading
BIT_Result_Type &
  # End Overloading

  # Begin MS Properties

    # Begin Declarations
/* To Do : Enter code for stub global declarations here */

    # End Declarations

  # End MS Properties

# End Stub

# Begin Stub

$ Stub based upon local stub

  Procedure = CDspBIT::updateRfaStatus
  Method = Managed
  Overloading = Prototype

  # Begin Overloading
BIT_Result_Type &
  # End Overloading

  # Begin MS Properties

    # Begin Declarations
/* To Do : Enter code for stub global declarations here */

    # End Declarations

  # End MS Properties

# End Stub

# Begin Stub

$ Stub based upon local stub

  Procedure = CDspBIT::updateSdramStatus
  Method = Managed
  Overloading = Prototype

  # Begin Overloading
BIT_Result_Type &
  # End Overloading

  # Begin MS Properties

    # Begin Declarations
/* To Do : Enter code for stub global declarations here */

    # End Declarations

  # End MS Properties

# End Stub

# Begin Stub

$ Stub based upon local stub

  Procedure = CDspBIT::updateSystemTimeStatus
  Method = Managed
  Overloading = Prototype

  # Begin Overloading
  # End Overloading

  # Begin MS Properties

    # Begin Declarations
/* To Do : Enter code for stub global declarations here */

    # End Declarations

  # End MS Properties

# End Stub

# Begin Stub

$ Stub based upon local stub

  Procedure = CDspBIT::updateTimeAccuracyStatus
  Method = Managed
  Overloading = Prototype

  # Begin Overloading
BIT_Result_Type &
  # End Overloading

  # Begin MS Properties

    # Begin Declarations
/* To Do : Enter code for stub global declarations here */

    # End Declarations

  # End MS Properties

# End Stub

# Begin Stub

$ Stub based upon local stub

  Procedure = CDspBIT::updateTimeLoadedStatus
  Method = Managed
  Overloading = Prototype

  # Begin Overloading
BIT_Result_Type &
  # End Overloading

  # Begin MS Properties

    # Begin Declarations
/* To Do : Enter code for stub global declarations here */

    # End Declarations

  # End MS Properties

# End Stub

# Begin Stub

$ Stub based upon local stub

  Procedure = CDspBIT::updateTimeofDayStatus
  Method = Managed
  Overloading = Prototype

  # Begin Overloading
BIT_Result_Type &
  # End Overloading

  # Begin MS Properties

    # Begin Declarations
/* To Do : Enter code for stub global declarations here */

    # End Declarations

  # End MS Properties

# End Stub

# Begin Stub

$ Stub based upon local stub

  Procedure = CDspBIT::updatefcxoStatus
  Method = Managed
  Overloading = Prototype

  # Begin Overloading
BIT_Result_Type &
  # End Overloading

  # Begin MS Properties

    # Begin Declarations
/* To Do : Enter code for stub global declarations here */

    # End Declarations

  # End MS Properties

# End Stub

# Begin Stub

$ Stub based upon local stub

  Procedure = CDspBIT::~CDspBIT
  Method = Managed
  Overloading = Prototype

  # Begin Overloading
  # End Overloading

  # Begin MS Properties

    # Begin Declarations
/* To Do : Enter code for stub global declarations here */

    # End Declarations

  # End MS Properties

# End Stub

# Begin Stub

$ Stub based upon local stub

  Procedure = CDspConfig:: =
  Method = Managed
  Overloading = Prototype

  # Begin Overloading
const CDspConfig &
  # End Overloading

  # Begin MS Properties

    Return Value = *this

    # Begin Declarations
/* To Do : Enter code for stub global declarations here */

    # End Declarations

  # End MS Properties

# End Stub

# Begin Stub

$ Stub based upon local stub

  Procedure = CDspConfig::CDspConfig
  Method = Managed
  Overloading = Prototype

  # Begin Overloading
const CDspConfig &
  # End Overloading

  # Begin MS Properties

    # Begin Declarations
/* To Do : Enter code for stub global declarations here */

    # End Declarations

  # End MS Properties

# End Stub

# Begin Stub

$ Stub based upon local stub

  Procedure = CDspConfig::CDspConfig
  Method = Managed
  Overloading = Prototype

  # Begin Overloading
int
  # End Overloading

  # Begin MS Properties

    # Begin Declarations
/* To Do : Enter code for stub global declarations here */

    # End Declarations

  # End MS Properties

# End Stub

# Begin Stub

$ Stub based upon local stub

  Procedure = CDspConfig::CDspConfig
  Method = Managed
  Overloading = Prototype

  # Begin Overloading
  # End Overloading

  # Begin MS Properties

    # Begin Declarations
/* To Do : Enter code for stub global declarations here */

    # End Declarations

  # End MS Properties

# End Stub

# Begin Stub

$ Stub based upon local stub

  Procedure = CDspConfig::getEquipSelectConfig
  Method = Managed
  Overloading = Prototype

  # Begin Overloading
  # End Overloading

  # Begin MS Properties

    # Begin Declarations
/* To Do : Enter code for stub global declarations here */

    # End Declarations

  # End MS Properties

# End Stub

# Begin Stub

$ Stub based upon local stub

  Procedure = CDspConfig::~CDspConfig
  Method = Managed
  Overloading = Prototype

  # Begin Overloading
  # End Overloading

  # Begin MS Properties

    # Begin Declarations
/* To Do : Enter code for stub global declarations here */

    # End Declarations

  # End MS Properties

# End Stub

# Begin Stub

$ Stub based upon local stub

  Procedure = CHECK
  Method = Managed
  Overloading = Prototype

  # Begin Overloading
Error
const char *
const char *
int
const int
  # End Overloading

  # Begin MS Properties

    # Begin Declarations
/* To Do : Enter code for stub global declarations here */

    # End Declarations

  # End MS Properties

# End Stub

# Begin Stub

$ Stub based upon local stub

  Procedure = CInitState:: =
  Method = Managed
  Overloading = Prototype

  # Begin Overloading
const CInitState &
  # End Overloading

  # Begin MS Properties

    Return Value = *this

    # Begin Declarations
/* To Do : Enter code for stub global declarations here */

    # End Declarations

  # End MS Properties

# End Stub

# Begin Stub

$ Stub based upon local stub

  Procedure = CInitState::CInitState
  Method = Managed
  Overloading = Prototype

  # Begin Overloading
const CInitState &
  # End Overloading

  # Begin MS Properties

    # Begin Declarations
/* To Do : Enter code for stub global declarations here */

    # End Declarations

  # End MS Properties

# End Stub

# Begin Stub

$ Stub based upon local stub

  Procedure = CInitState::CInitState
  Method = Managed
  Overloading = Prototype

  # Begin Overloading
  # End Overloading

  # Begin MS Properties

    # Begin Declarations
/* To Do : Enter code for stub global declarations here */

    # End Declarations

  # End MS Properties

# End Stub

# Begin Stub

$ Stub based upon local stub

  Procedure = CInitState::DSPCommunications
  Method = Managed
  Overloading = Prototype

  # Begin Overloading
CVlf *
  # End Overloading

  # Begin MS Properties

    # Begin Declarations
/* To Do : Enter code for stub global declarations here */

    # End Declarations

  # End MS Properties

# End Stub

# Begin Stub

$ Stub based upon local stub

  Procedure = CInitState::getState
  Method = Managed
  Overloading = Prototype

  # Begin Overloading
  # End Overloading

  # Begin MS Properties

    # Begin Declarations
/* To Do : Enter code for stub global declarations here */

    # End Declarations

  # End MS Properties

# End Stub

# Begin Stub

$ Stub based upon local stub

  Procedure = CInitState::~CInitState
  Method = Managed
  Overloading = Prototype

  # Begin Overloading
  # End Overloading

  # Begin MS Properties

    # Begin Declarations
/* To Do : Enter code for stub global declarations here */

    # End Declarations

  # End MS Properties

# End Stub

# Begin Stub

$ Stub based upon local stub

  Procedure = CKeyEffectData:: =
  Method = Managed
  Overloading = Prototype

  # Begin Overloading
const CKeyEffectData &
  # End Overloading

  # Begin MS Properties

    Return Value = *this

    # Begin Declarations
/* To Do : Enter code for stub global declarations here */

    # End Declarations

  # End MS Properties

# End Stub

# Begin Stub

$ Stub based upon local stub

  Procedure = CKeyEffectData::CKeyEffectData
  Method = Managed
  Overloading = Prototype

  # Begin Overloading
const CKeyEffectData &
  # End Overloading

  # Begin MS Properties

    # Begin Declarations
/* To Do : Enter code for stub global declarations here */

    # End Declarations

  # End MS Properties

# End Stub

# Begin Stub

$ Stub based upon local stub

  Procedure = CKeyEffectData::CKeyEffectData
  Method = Managed
  Overloading = Prototype

  # Begin Overloading
  # End Overloading

  # Begin MS Properties

    # Begin Declarations
/* To Do : Enter code for stub global declarations here */

    # End Declarations

  # End MS Properties

# End Stub

# Begin Stub

$ Stub based upon local stub

  Procedure = CKeyEffectData::bankContainsKey
  Method = Managed
  Overloading = Prototype

  # Begin Overloading
unsigned int
  # End Overloading

  # Begin MS Properties

    # Begin Declarations
/* To Do : Enter code for stub global declarations here */

    # End Declarations

  # End MS Properties

# End Stub

# Begin Stub

$ Stub based upon local stub

  Procedure = CKeyEffectData::buildFilledBankMap
  Method = Managed
  Overloading = Prototype

  # Begin Overloading
  # End Overloading

  # Begin MS Properties

    # Begin Declarations
/* To Do : Enter code for stub global declarations here */

    # End Declarations

  # End MS Properties

# End Stub

# Begin Stub

$ Stub based upon local stub

  Procedure = CKeyEffectData::checkLineItemInKeyTable
  Method = Managed
  Overloading = Prototype

  # Begin Overloading
unsigned int
unsigned int
  # End Overloading

  # Begin MS Properties

    # Begin Declarations
/* To Do : Enter code for stub global declarations here */

    # End Declarations

  # End MS Properties

# End Stub

# Begin Stub

$ Stub based upon local stub

  Procedure = CKeyEffectData::clear_mKeyEffArrayElement
  Method = Managed
  Overloading = Prototype

  # Begin Overloading
unsigned int
unsigned int
  # End Overloading

  # Begin MS Properties

    # Begin Declarations
/* To Do : Enter code for stub global declarations here */

    # End Declarations

  # End MS Properties

# End Stub

# Begin Stub

$ Stub based upon local stub

  Procedure = CKeyEffectData::clear_mSearchKeyEffectArray
  Method = Managed
  Overloading = Prototype

  # Begin Overloading
unsigned int
  # End Overloading

  # Begin MS Properties

    # Begin Declarations
/* To Do : Enter code for stub global declarations here */

    # End Declarations

  # End MS Properties

# End Stub

# Begin Stub

$ Stub based upon local stub

  Procedure = CKeyEffectData::configureCryptoChannel
  Method = Managed
  Overloading = Prototype

  # Begin Overloading
Channel_ID_Type
  # End Overloading

  # Begin MS Properties

    # Begin Declarations
/* To Do : Enter code for stub global declarations here */

    # End Declarations

  # End MS Properties

# End Stub

# Begin Stub

$ Stub based upon local stub

  Procedure = CKeyEffectData::createKeyEffectAlarmTimer
  Method = Managed
  Overloading = Prototype

  # Begin Overloading
  # End Overloading

  # Begin MS Properties

    # Begin Declarations
/* To Do : Enter code for stub global declarations here */

    # End Declarations

  # End MS Properties

# End Stub

# Begin Stub

$ Stub based upon local stub

  Procedure = CKeyEffectData::deleteData
  Method = Managed
  Overloading = Prototype

  # Begin Overloading
Selective_Zeroize_Keys_Msg_Type *
  # End Overloading

  # Begin MS Properties

    # Begin Declarations
/* To Do : Enter code for stub global declarations here */

    # End Declarations

  # End MS Properties

# End Stub

# Begin Stub

$ Stub based upon local stub

  Procedure = CKeyEffectData::getData
  Method = Managed
  Overloading = Prototype

  # Begin Overloading
Channel_ID_Type
  # End Overloading

  # Begin MS Properties

    Return Value = ldra_qq_lv_1

    # Begin Declarations
/* To Do : Enter code for stub global declarations here */

    # End Declarations

    # Begin Local Declarations
static Key_Bank_Info_Type ldra_qq_lv_1;
    # End Local Declarations

  # End MS Properties

# End Stub

# Begin Stub

$ Stub based upon local stub

  Procedure = CKeyEffectData::getDayOfYear
  Method = Managed
  Overloading = Prototype

  # Begin Overloading
Date_Type
  # End Overloading

  # Begin MS Properties

    # Begin Declarations
/* To Do : Enter code for stub global declarations here */

    # End Declarations

  # End MS Properties

# End Stub

# Begin Stub

$ Stub based upon local stub

  Procedure = CKeyEffectData::getKeyDispData
  Method = Managed
  Overloading = Prototype

  # Begin Overloading
  # End Overloading

  # Begin MS Properties

    Return Value = &ldra_qq_lv_2

    # Begin Declarations
/* To Do : Enter code for stub global declarations here */

    # End Declarations

    # Begin Local Declarations
static Key_Disposition_Status_Msg_Type ldra_qq_lv_2;
    # End Local Declarations

  # End MS Properties

# End Stub

# Begin Stub

$ Stub based upon local stub

  Procedure = CKeyEffectData::get_mTEKRollover
  Method = Managed
  Overloading = Prototype

  # Begin Overloading
unsigned int
  # End Overloading

  # Begin MS Properties

    # Begin Declarations
/* To Do : Enter code for stub global declarations here */

    # End Declarations

  # End MS Properties

# End Stub

# Begin Stub

$ Stub based upon local stub

  Procedure = CKeyEffectData::initKeyEffectTable
  Method = Managed
  Overloading = Prototype

  # Begin Overloading
  # End Overloading

  # Begin MS Properties

    # Begin Declarations
/* To Do : Enter code for stub global declarations here */

    # End Declarations

  # End MS Properties

# End Stub

# Begin Stub

$ Stub based upon local stub

  Procedure = CKeyEffectData::performChannelSetup
  Method = Managed
  Overloading = Prototype

  # Begin Overloading
unsigned int
  # End Overloading

  # Begin MS Properties

    # Begin Declarations
/* To Do : Enter code for stub global declarations here */

    # End Declarations

  # End MS Properties

# End Stub

# Begin Stub

$ Stub based upon local stub

  Procedure = CKeyEffectData::rolloverEffectivity
  Method = Managed
  Overloading = Prototype

  # Begin Overloading
unsigned int
  # End Overloading

  # Begin MS Properties

    # Begin Declarations
/* To Do : Enter code for stub global declarations here */

    # End Declarations

  # End MS Properties

# End Stub

# Begin Stub

$ Stub based upon local stub

  Procedure = CKeyEffectData::runupCryptoChannel
  Method = Managed
  Overloading = Prototype

  # Begin Overloading
Channel_ID_Type
  # End Overloading

  # Begin MS Properties

    # Begin Declarations
/* To Do : Enter code for stub global declarations here */

    # End Declarations

  # End MS Properties

# End Stub

# Begin Stub

$ Stub based upon local stub

  Procedure = CKeyEffectData::searchEffectDate
  Method = Managed
  Overloading = Prototype

  # Begin Overloading
Vlf_Channel_Type *
  # End Overloading

  # Begin MS Properties

    # Begin Declarations
/* To Do : Enter code for stub global declarations here */

    # End Declarations

  # End MS Properties

# End Stub

# Begin Stub

$ Stub based upon local stub

  Procedure = CKeyEffectData::searchKeyBankLoc
  Method = Managed
  Overloading = Prototype

  # Begin Overloading
Vlf_Channel_Type *
  # End Overloading

  # Begin MS Properties

    # Begin Declarations
/* To Do : Enter code for stub global declarations here */

    # End Declarations

  # End MS Properties

# End Stub

# Begin Stub

$ Stub based upon local stub

  Procedure = CKeyEffectData::searchKeyBankSegLoc
  Method = Managed
  Overloading = Prototype

  # Begin Overloading
Vlf_Channel_Type *
unsigned int
  # End Overloading

  # Begin MS Properties

    # Begin Declarations
/* To Do : Enter code for stub global declarations here */

    # End Declarations

  # End MS Properties

# End Stub

# Begin Stub

$ Stub based upon local stub

  Procedure = CKeyEffectData::selectiveZeroizeCryptoKey
  Method = Managed
  Overloading = Prototype

  # Begin Overloading
Zeroize_Keys_Action_Type
unsigned int
unsigned int
  # End Overloading

  # Begin MS Properties

    # Begin Declarations
/* To Do : Enter code for stub global declarations here */

    # End Declarations

  # End MS Properties

# End Stub

# Begin Stub

$ Stub based upon local stub

  Procedure = CKeyEffectData::sendKeyDispMsg
  Method = Managed
  Overloading = Prototype

  # Begin Overloading
  # End Overloading

  # Begin MS Properties

    # Begin Declarations
/* To Do : Enter code for stub global declarations here */

    # End Declarations

  # End MS Properties

# End Stub

# Begin Stub

$ Stub based upon local stub

  Procedure = CKeyEffectData::sendKeyDispMsg
  Method = Managed
  Overloading = Prototype

  # Begin Overloading
Key_Disposition_Status_Msg_Type *
  # End Overloading

  # Begin MS Properties

    # Begin Declarations
/* To Do : Enter code for stub global declarations here */

    # End Declarations

  # End MS Properties

# End Stub

# Begin Stub

$ Stub based upon local stub

  Procedure = CKeyEffectData::setKeyDispData
  Method = Managed
  Overloading = Prototype

  # Begin Overloading
unsigned int
unsigned int
Key_Disp_Status_Type
  # End Overloading

  # Begin MS Properties

    # Begin Declarations
/* To Do : Enter code for stub global declarations here */

    # End Declarations

  # End MS Properties

# End Stub

# Begin Stub

$ Stub based upon local stub

  Procedure = CKeyEffectData::setKeyDispStatus
  Method = Managed
  Overloading = Prototype

  # Begin Overloading
Key_Disp_Status_Type
  # End Overloading

  # Begin MS Properties

    # Begin Declarations
/* To Do : Enter code for stub global declarations here */

    # End Declarations

  # End MS Properties

# End Stub

# Begin Stub

$ Stub based upon local stub

  Procedure = CKeyEffectData::setKeyPresent
  Method = Managed
  Overloading = Prototype

  # Begin Overloading
Loaded_Key_Info_Msg_Type *
  # End Overloading

  # Begin MS Properties

    # Begin Declarations
/* To Do : Enter code for stub global declarations here */

    # End Declarations

  # End MS Properties

# End Stub

# Begin Stub

$ Stub based upon local stub

  Procedure = CKeyEffectData::set_mTEKRollover
  Method = Managed
  Overloading = Prototype

  # Begin Overloading
unsigned int
bool
  # End Overloading

  # Begin MS Properties

    # Begin Declarations
/* To Do : Enter code for stub global declarations here */

    # End Declarations

  # End MS Properties

# End Stub

# Begin Stub

$ Stub based upon local stub

  Procedure = CKeyEffectData::triggerMainKeyRolloverTask
  Method = Managed
  Overloading = Prototype

  # Begin Overloading
  # End Overloading

  # Begin MS Properties

    # Begin Declarations
/* To Do : Enter code for stub global declarations here */

    # End Declarations

  # End MS Properties

# End Stub

# Begin Stub

$ Stub based upon local stub

  Procedure = CKeyEffectData::zeroizeCryptoChannel
  Method = Managed
  Overloading = Prototype

  # Begin Overloading
Channel_ID_Type
  # End Overloading

  # Begin MS Properties

    # Begin Declarations
/* To Do : Enter code for stub global declarations here */

    # End Declarations

  # End MS Properties

# End Stub

# Begin Stub

$ Stub based upon local stub

  Procedure = CKeyEffectData::~CKeyEffectData
  Method = Managed
  Overloading = Prototype

  # Begin Overloading
  # End Overloading

  # Begin MS Properties

    # Begin Declarations
/* To Do : Enter code for stub global declarations here */

    # End Declarations

  # End MS Properties

# End Stub

# Begin Stub

$ Stub based upon local stub

  Procedure = CMessage::CMessage
  Method = Managed
  Overloading = Prototype

  # Begin Overloading
  # End Overloading

  # Begin MS Properties

    # Begin Declarations
/* To Do : Enter code for stub global declarations here */

    # End Declarations

  # End MS Properties

# End Stub

# Begin Stub

$ Stub based upon local stub

  Procedure = CMessage::CalculateChecksum
  Method = Managed
  Overloading = Prototype

  # Begin Overloading
  # End Overloading

  # Begin MS Properties

    # Begin Declarations
/* To Do : Enter code for stub global declarations here */

    # End Declarations

  # End MS Properties

# End Stub

# Begin Stub

$ Stub based upon local stub

  Procedure = CMessage::GetActionId
  Method = Managed
  Overloading = Prototype
  CV Qualifier = const

  # Begin Overloading
  # End Overloading

  # Begin MS Properties

    # Begin Declarations
/* To Do : Enter code for stub global declarations here */

    # End Declarations

  # End MS Properties

# End Stub

# Begin Stub

$ Stub based upon local stub

  Procedure = CMessage::GetDest
  Method = Managed
  Overloading = Prototype
  CV Qualifier = const

  # Begin Overloading
  # End Overloading

  # Begin MS Properties

    # Begin Declarations
/* To Do : Enter code for stub global declarations here */

    # End Declarations

  # End MS Properties

# End Stub

# Begin Stub

$ Stub based upon local stub

  Procedure = CMessage::GetMsgData
  Method = Managed
  Overloading = Prototype
  CV Qualifier = const

  # Begin Overloading
  # End Overloading

  # Begin MS Properties

    Return Value = &ldra_qq_lv_3

    # Begin Declarations
/* To Do : Enter code for stub global declarations here */

    # End Declarations

    # Begin Local Declarations
static Message_Type ldra_qq_lv_3;
    # End Local Declarations

  # End MS Properties

# End Stub

# Begin Stub

$ Stub based upon local stub

  Procedure = CMessage::GetMsgId
  Method = Managed
  Overloading = Prototype
  CV Qualifier = const

  # Begin Overloading
  # End Overloading

  # Begin MS Properties

    # Begin Declarations
/* To Do : Enter code for stub global declarations here */

    # End Declarations

  # End MS Properties

# End Stub

# Begin Stub

$ Stub based upon local stub

  Procedure = CMessage::GetMsgLen
  Method = Managed
  Overloading = Prototype
  CV Qualifier = const

  # Begin Overloading
  # End Overloading

  # Begin MS Properties

    # Begin Declarations
/* To Do : Enter code for stub global declarations here */

    # End Declarations

  # End MS Properties

# End Stub

# Begin Stub

$ Stub based upon local stub

  Procedure = CMessage::GetProtocolVersion
  Method = Managed
  Overloading = Prototype
  CV Qualifier = const

  # Begin Overloading
  # End Overloading

  # Begin MS Properties

    # Begin Declarations
/* To Do : Enter code for stub global declarations here */

    # End Declarations

  # End MS Properties

# End Stub

# Begin Stub

$ Stub based upon local stub

  Procedure = CMessage::GetReservedConfig
  Method = Managed
  Overloading = Prototype
  CV Qualifier = const

  # Begin Overloading
  # End Overloading

  # Begin MS Properties

    # Begin Declarations
/* To Do : Enter code for stub global declarations here */

    # End Declarations

  # End MS Properties

# End Stub

# Begin Stub

$ Stub based upon local stub

  Procedure = CMessage::GetSequenceNum
  Method = Managed
  Overloading = Prototype
  CV Qualifier = const

  # Begin Overloading
  # End Overloading

  # Begin MS Properties

    # Begin Declarations
/* To Do : Enter code for stub global declarations here */

    # End Declarations

  # End MS Properties

# End Stub

# Begin Stub

$ Stub based upon local stub

  Procedure = CMessage::GetSrc
  Method = Managed
  Overloading = Prototype
  CV Qualifier = const

  # Begin Overloading
  # End Overloading

  # Begin MS Properties

    # Begin Declarations
/* To Do : Enter code for stub global declarations here */

    # End Declarations

  # End MS Properties

# End Stub

# Begin Stub

$ Stub based upon local stub

  Procedure = CMessage::GetTimestamp
  Method = Managed
  Overloading = Prototype
  CV Qualifier = const

  # Begin Overloading
  # End Overloading

  # Begin MS Properties

    # Begin Declarations
/* To Do : Enter code for stub global declarations here */

    # End Declarations

  # End MS Properties

# End Stub

# Begin Stub

$ Stub based upon local stub

  Procedure = CMessage::IsCheckSumValid
  Method = Managed
  Overloading = Prototype

  # Begin Overloading
  # End Overloading

  # Begin MS Properties

    # Begin Declarations
/* To Do : Enter code for stub global declarations here */

    # End Declarations

  # End MS Properties

# End Stub

# Begin Stub

$ Stub based upon local stub

  Procedure = CMessage::IsMsgHeaderValid
  Method = Managed
  Overloading = Prototype

  # Begin Overloading
  # End Overloading

  # Begin MS Properties

    # Begin Declarations
/* To Do : Enter code for stub global declarations here */

    # End Declarations

  # End MS Properties

# End Stub

# Begin Stub

$ Stub based upon local stub

  Procedure = CMessage::SetActionId
  Method = Managed
  Overloading = Prototype

  # Begin Overloading
const unsigned int
  # End Overloading

  # Begin MS Properties

    # Begin Declarations
/* To Do : Enter code for stub global declarations here */

    # End Declarations

  # End MS Properties

# End Stub

# Begin Stub

$ Stub based upon local stub

  Procedure = CMessage::SetDataLen
  Method = Managed
  Overloading = Prototype

  # Begin Overloading
const unsigned int
  # End Overloading

  # Begin MS Properties

    # Begin Declarations
/* To Do : Enter code for stub global declarations here */

    # End Declarations

  # End MS Properties

# End Stub

# Begin Stub

$ Stub based upon local stub

  Procedure = CMessage::SetDest
  Method = Managed
  Overloading = Prototype

  # Begin Overloading
const Subsystem_Type &
  # End Overloading

  # Begin MS Properties

    # Begin Declarations
/* To Do : Enter code for stub global declarations here */

    # End Declarations

  # End MS Properties

# End Stub

# Begin Stub

$ Stub based upon local stub

  Procedure = CMessage::SetMsgChecksum
  Method = Managed
  Overloading = Prototype

  # Begin Overloading
  # End Overloading

  # Begin MS Properties

    # Begin Declarations
/* To Do : Enter code for stub global declarations here */

    # End Declarations

  # End MS Properties

# End Stub

# Begin Stub

$ Stub based upon local stub

  Procedure = CMessage::SetMsgData
  Method = Managed
  Overloading = Prototype

  # Begin Overloading
const void *
const unsigned short
  # End Overloading

  # Begin MS Properties

    # Begin Declarations
/* To Do : Enter code for stub global declarations here */

    # End Declarations

  # End MS Properties

# End Stub

# Begin Stub

$ Stub based upon local stub

  Procedure = CMessage::SetMsgHeaderDefaults
  Method = Managed
  Overloading = Prototype

  # Begin Overloading
  # End Overloading

  # Begin MS Properties

    # Begin Declarations
/* To Do : Enter code for stub global declarations here */

    # End Declarations

  # End MS Properties

# End Stub

# Begin Stub

$ Stub based upon local stub

  Procedure = CMessage::SetMsgId
  Method = Managed
  Overloading = Prototype

  # Begin Overloading
const Message_ID_Type
  # End Overloading

  # Begin MS Properties

    # Begin Declarations
/* To Do : Enter code for stub global declarations here */

    # End Declarations

  # End MS Properties

# End Stub

# Begin Stub

$ Stub based upon local stub

  Procedure = CMessage::SetProtocolVersion
  Method = Managed
  Overloading = Prototype

  # Begin Overloading
const Protocol_Version_Type &
  # End Overloading

  # Begin MS Properties

    # Begin Declarations
/* To Do : Enter code for stub global declarations here */

    # End Declarations

  # End MS Properties

# End Stub

# Begin Stub

$ Stub based upon local stub

  Procedure = CMessage::SetReservedConfig
  Method = Managed
  Overloading = Prototype

  # Begin Overloading
const Reserved_Config_Type &
  # End Overloading

  # Begin MS Properties

    # Begin Declarations
/* To Do : Enter code for stub global declarations here */

    # End Declarations

  # End MS Properties

# End Stub

# Begin Stub

$ Stub based upon local stub

  Procedure = CMessage::SetSequenceNum
  Method = Managed
  Overloading = Prototype

  # Begin Overloading
const unsigned int
  # End Overloading

  # Begin MS Properties

    # Begin Declarations
/* To Do : Enter code for stub global declarations here */

    # End Declarations

  # End MS Properties

# End Stub

# Begin Stub

$ Stub based upon local stub

  Procedure = CMessage::SetSrc
  Method = Managed
  Overloading = Prototype

  # Begin Overloading
const Subsystem_Type &
  # End Overloading

  # Begin MS Properties

    # Begin Declarations
/* To Do : Enter code for stub global declarations here */

    # End Declarations

  # End MS Properties

# End Stub

# Begin Stub

$ Stub based upon local stub

  Procedure = CMessage::SetTimestamp
  Method = Managed
  Overloading = Prototype

  # Begin Overloading
const unsigned long
  # End Overloading

  # Begin MS Properties

    # Begin Declarations
/* To Do : Enter code for stub global declarations here */

    # End Declarations

  # End MS Properties

# End Stub

# Begin Stub

$ Stub based upon local stub

  Procedure = CMessage::~CMessage
  Method = Managed
  Overloading = Prototype

  # Begin Overloading
  # End Overloading

  # Begin MS Properties

    # Begin Declarations
/* To Do : Enter code for stub global declarations here */

    # End Declarations

  # End MS Properties

# End Stub

# Begin Stub

$ Stub based upon local stub

  Procedure = CMode15::CMode15
  Method = Managed
  Overloading = Prototype

  # Begin Overloading
  # End Overloading

  # Begin MS Properties

    # Begin Declarations
/* To Do : Enter code for stub global declarations here */

    # End Declarations

    # Begin Constructor Inits
CMode()
    # End Constructor Inits

  # End MS Properties

# End Stub

# Begin Stub

$ Stub based upon local stub

  Procedure = CMode15::GetModeSignalStatusType
  Method = Managed
  Overloading = Prototype

  # Begin Overloading
ChanStatusQueueStruct *
  # End Overloading

  # Begin MS Properties

    Return Value = ldra_qq_lv_11

    # Begin Declarations
/* To Do : Enter code for stub global declarations here */

    # End Declarations

    # Begin Local Declarations
static Mode_Signal_Status_Type ldra_qq_lv_11;
    # End Local Declarations

  # End MS Properties

# End Stub

# Begin Stub

$ Stub based upon local stub

  Procedure = CMode15::HandleStatus
  Method = Managed
  Overloading = Prototype

  # Begin Overloading
ChanStatusQueueStruct *
  # End Overloading

  # Begin MS Properties

    # Begin Declarations
/* To Do : Enter code for stub global declarations here */

    # End Declarations

  # End MS Properties

# End Stub

# Begin Stub

$ Stub based upon local stub

  Procedure = CMode15::~CMode15
  Method = Managed
  Overloading = Prototype

  # Begin Overloading
  # End Overloading

  # Begin MS Properties

    # Begin Declarations
/* To Do : Enter code for stub global declarations here */

    # End Declarations

  # End MS Properties

# End Stub

# Begin Stub

$ Stub based upon local stub

  Procedure = CMode23::CMode23
  Method = Managed
  Overloading = Prototype

  # Begin Overloading
  # End Overloading

  # Begin MS Properties

    # Begin Declarations
/* To Do : Enter code for stub global declarations here */

    # End Declarations

    # Begin Constructor Inits
CMode()
    # End Constructor Inits

  # End MS Properties

# End Stub

# Begin Stub

$ Stub based upon local stub

  Procedure = CMode23::GetModeSignalStatusType
  Method = Managed
  Overloading = Prototype

  # Begin Overloading
ChanStatusQueueStruct *
  # End Overloading

  # Begin MS Properties

    Return Value = ldra_qq_lv_12

    # Begin Declarations
/* To Do : Enter code for stub global declarations here */

    # End Declarations

    # Begin Local Declarations
static Mode_Signal_Status_Type ldra_qq_lv_12;
    # End Local Declarations

  # End MS Properties

# End Stub

# Begin Stub

$ Stub based upon local stub

  Procedure = CMode23::~CMode23
  Method = Managed
  Overloading = Prototype

  # Begin Overloading
  # End Overloading

  # Begin MS Properties

    # Begin Declarations
/* To Do : Enter code for stub global declarations here */

    # End Declarations

  # End MS Properties

# End Stub

# Begin Stub

$ Stub based upon local stub

  Procedure = CMode9::CMode9
  Method = Managed
  Overloading = Prototype

  # Begin Overloading
  # End Overloading

  # Begin MS Properties

    # Begin Declarations
/* To Do : Enter code for stub global declarations here */

    # End Declarations

    # Begin Constructor Inits
CMode()
    # End Constructor Inits

  # End MS Properties

# End Stub

# Begin Stub

$ Stub based upon local stub

  Procedure = CMode9::GetModeSignalStatusType
  Method = Managed
  Overloading = Prototype

  # Begin Overloading
ChanStatusQueueStruct *
  # End Overloading

  # Begin MS Properties

    Return Value = ldra_qq_lv_13

    # Begin Declarations
/* To Do : Enter code for stub global declarations here */

    # End Declarations

    # Begin Local Declarations
static Mode_Signal_Status_Type ldra_qq_lv_13;
    # End Local Declarations

  # End MS Properties

# End Stub

# Begin Stub

$ Stub based upon local stub

  Procedure = CMode9::~CMode9
  Method = Managed
  Overloading = Prototype

  # Begin Overloading
  # End Overloading

  # Begin MS Properties

    # Begin Declarations
/* To Do : Enter code for stub global declarations here */

    # End Declarations

  # End MS Properties

# End Stub

# Begin Stub

$ Stub based upon local stub

  Procedure = CMode::CMode
  Method = Managed
  Overloading = Prototype

  # Begin Overloading
  # End Overloading

  # Begin MS Properties

    # Begin Declarations
/* To Do : Enter code for stub global declarations here */

    # End Declarations

  # End MS Properties

# End Stub

# Begin Stub

$ Stub based upon local stub

  Procedure = CMode::GetModeSignalStatusType
  Method = Managed
  Overloading = Prototype

  # Begin Overloading
ChanStatusQueueStruct *
  # End Overloading

  # Begin MS Properties

    Return Value = ldra_qq_lv_14

    # Begin Declarations
/* To Do : Enter code for stub global declarations here */

    # End Declarations

    # Begin Local Declarations
static Mode_Signal_Status_Type ldra_qq_lv_14;
    # End Local Declarations

  # End MS Properties

# End Stub

# Begin Stub

$ Stub based upon local stub

  Procedure = CMode::GetNextCmd
  Method = Managed
  Overloading = Prototype

  # Begin Overloading
  # End Overloading

  # Begin MS Properties

    # Begin Declarations
/* To Do : Enter code for stub global declarations here */

    # End Declarations

  # End MS Properties

# End Stub

# Begin Stub

$ Stub based upon local stub

  Procedure = CMode::HandleMgrCmd
  Method = Managed
  Overloading = Prototype

  # Begin Overloading
ChannelCmdStruct *
  # End Overloading

  # Begin MS Properties

    # Begin Declarations
/* To Do : Enter code for stub global declarations here */

    # End Declarations

  # End MS Properties

# End Stub

# Begin Stub

$ Stub based upon local stub

  Procedure = CMode::HandleStatus
  Method = Managed
  Overloading = Prototype

  # Begin Overloading
ChanStatusQueueStruct *
  # End Overloading

  # Begin MS Properties

    # Begin Declarations
/* To Do : Enter code for stub global declarations here */

    # End Declarations

  # End MS Properties

# End Stub

# Begin Stub

$ Stub based upon local stub

  Procedure = CMode::~CMode
  Method = Managed
  Overloading = Prototype

  # Begin Overloading
  # End Overloading

  # Begin MS Properties

    # Begin Declarations
/* To Do : Enter code for stub global declarations here */

    # End Declarations

  # End MS Properties

# End Stub

# Begin Stub

$ Stub based upon local stub

  Procedure = CModeHidar::CModeHidar
  Method = Managed
  Overloading = Prototype

  # Begin Overloading
  # End Overloading

  # Begin MS Properties

    # Begin Declarations
/* To Do : Enter code for stub global declarations here */

    # End Declarations

    # Begin Constructor Inits
CMode()
    # End Constructor Inits

  # End MS Properties

# End Stub

# Begin Stub

$ Stub based upon local stub

  Procedure = CModeHidar::GetModeSignalStatusType
  Method = Managed
  Overloading = Prototype

  # Begin Overloading
ChanStatusQueueStruct *
  # End Overloading

  # Begin MS Properties

    Return Value = ldra_qq_lv_15

    # Begin Declarations
/* To Do : Enter code for stub global declarations here */

    # End Declarations

    # Begin Local Declarations
static Mode_Signal_Status_Type ldra_qq_lv_15;
    # End Local Declarations

  # End MS Properties

# End Stub

# Begin Stub

$ Stub based upon local stub

  Procedure = CModeHidar::~CModeHidar
  Method = Managed
  Overloading = Prototype

  # Begin Overloading
  # End Overloading

  # Begin MS Properties

    # Begin Declarations
/* To Do : Enter code for stub global declarations here */

    # End Declarations

  # End MS Properties

# End Stub

# Begin Stub

$ Stub based upon local stub

  Procedure = CMsgHandler:: =
  Method = Managed
  Overloading = Prototype

  # Begin Overloading
const CMsgHandler &
  # End Overloading

  # Begin MS Properties

    Return Value = *this

    # Begin Declarations
/* To Do : Enter code for stub global declarations here */

    # End Declarations

  # End MS Properties

# End Stub

# Begin Stub

$ Stub based upon local stub

  Procedure = CMsgHandler::CMsgHandler
  Method = Managed
  Overloading = Prototype

  # Begin Overloading
const CMsgHandler &
  # End Overloading

  # Begin MS Properties

    # Begin Declarations
/* To Do : Enter code for stub global declarations here */

    # End Declarations

  # End MS Properties

# End Stub

# Begin Stub

$ Stub based upon local stub

  Procedure = CMsgHandler::CMsgHandler
  Method = Managed
  Overloading = Prototype

  # Begin Overloading
  # End Overloading

  # Begin MS Properties

    # Begin Declarations
/* To Do : Enter code for stub global declarations here */

    # End Declarations

  # End MS Properties

# End Stub

# Begin Stub

$ Stub based upon local stub

  Procedure = CMsgHandler::Instance
  Method = Managed
  Overloading = Prototype

  # Begin Overloading
  # End Overloading

  # Begin MS Properties

    Return Value = &ldra_qq_lv_16

    # Begin Declarations
/* To Do : Enter code for stub global declarations here */

    # End Declarations

    # Begin Local Declarations
static CMsgHandler ldra_qq_lv_16;
    # End Local Declarations

  # End MS Properties

# End Stub

# Begin Stub

$ Stub based upon local stub

  Procedure = CMsgHandler::InvokeHandler
  Method = Managed
  Overloading = Prototype

  # Begin Overloading
CMessage *
  # End Overloading

  # Begin MS Properties

    # Begin Declarations
/* To Do : Enter code for stub global declarations here */

    # End Declarations

  # End MS Properties

# End Stub

# Begin Stub

$ Stub based upon local stub

  Procedure = CMsgHandler::RegisterMsg
  Method = Managed
  Overloading = Prototype

  # Begin Overloading
int
InterfaceHandler *
  # End Overloading

  # Begin MS Properties

    Return Value = ih

    # Begin Declarations
/* To Do : Enter code for stub global declarations here */

    # End Declarations

  # End MS Properties

# End Stub

# Begin Stub

$ Stub based upon local stub

  Procedure = CMsgHandler::SendAckNak
  Method = Managed
  Overloading = Prototype

  # Begin Overloading
Subsystem_Type
Message_ID_Type
int
Response_Status_Type
Msg_Error_Codes_Type
short
  # End Overloading

  # Begin MS Properties

    # Begin Declarations
/* To Do : Enter code for stub global declarations here */

    # End Declarations

  # End MS Properties

# End Stub

# Begin Stub

$ Stub based upon local stub

  Procedure = CMsgHandler::SendMsg
  Method = Managed
  Overloading = Prototype

  # Begin Overloading
CMessage *
  # End Overloading

  # Begin MS Properties

    # Begin Declarations
/* To Do : Enter code for stub global declarations here */

    # End Declarations

  # End MS Properties

# End Stub

# Begin Stub

$ Stub based upon local stub

  Procedure = CMsgHandler::SendMsgHelper
  Method = Managed
  Overloading = Prototype

  # Begin Overloading
CMessage *
MessageQueue
  # End Overloading

  # Begin MS Properties

    # Begin Declarations
/* To Do : Enter code for stub global declarations here */

    # End Declarations

  # End MS Properties

# End Stub

# Begin Stub

$ Stub based upon local stub

  Procedure = CMsgHandler::SendPriAckNak
  Method = Managed
  Overloading = Prototype

  # Begin Overloading
Subsystem_Type
Message_ID_Type
int
Response_Status_Type
Msg_Error_Codes_Type
short
  # End Overloading

  # Begin MS Properties

    # Begin Declarations
/* To Do : Enter code for stub global declarations here */

    # End Declarations

  # End MS Properties

# End Stub

# Begin Stub

$ Stub based upon local stub

  Procedure = CMsgHandler::SendPriMsg
  Method = Managed
  Overloading = Prototype

  # Begin Overloading
CMessage *
  # End Overloading

  # Begin MS Properties

    # Begin Declarations
/* To Do : Enter code for stub global declarations here */

    # End Declarations

  # End MS Properties

# End Stub

# Begin Stub

$ Stub based upon local stub

  Procedure = CMsgHandler::~CMsgHandler
  Method = Managed
  Overloading = Prototype

  # Begin Overloading
  # End Overloading

  # Begin MS Properties

    # Begin Declarations
/* To Do : Enter code for stub global declarations here */

    # End Declarations

  # End MS Properties

# End Stub

# Begin Stub

$ Stub based upon local stub

  Procedure = COVWriteKeyEffectivityData:: =
  Method = Managed
  Overloading = Prototype

  # Begin Overloading
const COVWriteKeyEffectivityData &
  # End Overloading

  # Begin MS Properties

    Return Value = *this

    # Begin Declarations
/* To Do : Enter code for stub global declarations here */

    # End Declarations

  # End MS Properties

# End Stub

# Begin Stub

$ Stub based upon local stub

  Procedure = COVWriteKeyEffectivityData::COVWriteKeyEffectivityData
  Method = Managed
  Overloading = Prototype

  # Begin Overloading
const COVWriteKeyEffectivityData &
  # End Overloading

  # Begin MS Properties

    # Begin Declarations
/* To Do : Enter code for stub global declarations here */

    # End Declarations

  # End MS Properties

# End Stub

# Begin Stub

$ Stub based upon local stub

  Procedure = COVWriteKeyEffectivityData::COVWriteKeyEffectivityData
  Method = Managed
  Overloading = Prototype

  # Begin Overloading
  # End Overloading

  # Begin MS Properties

    # Begin Declarations
/* To Do : Enter code for stub global declarations here */

    # End Declarations

  # End MS Properties

# End Stub

# Begin Stub

$ Stub based upon local stub

  Procedure = COVWriteKeyEffectivityData::HandleMsg
  Method = Managed
  Overloading = Prototype

  # Begin Overloading
CMessage *
  # End Overloading

  # Begin MS Properties

    # Begin Declarations
/* To Do : Enter code for stub global declarations here */

    # End Declarations

  # End MS Properties

# End Stub

# Begin Stub

$ Stub based upon local stub

  Procedure = COVWriteKeyEffectivityData::ValidateMsgParam
  Method = Managed
  Overloading = Prototype

  # Begin Overloading
const CMessage &
  # End Overloading

  # Begin MS Properties

    # Begin Declarations
/* To Do : Enter code for stub global declarations here */

    # End Declarations

  # End MS Properties

# End Stub

# Begin Stub

$ Stub based upon local stub

  Procedure = COVWriteKeyEffectivityData::~COVWriteKeyEffectivityData
  Method = Managed
  Overloading = Prototype

  # Begin Overloading
  # End Overloading

  # Begin MS Properties

    # Begin Declarations
/* To Do : Enter code for stub global declarations here */

    # End Declarations

  # End MS Properties

# End Stub

# Begin Stub

$ Stub based upon local stub

  Procedure = COfflineState:: =
  Method = Managed
  Overloading = Prototype

  # Begin Overloading
const COfflineState &
  # End Overloading

  # Begin MS Properties

    Return Value = *this

    # Begin Declarations
/* To Do : Enter code for stub global declarations here */

    # End Declarations

  # End MS Properties

# End Stub

# Begin Stub

$ Stub based upon local stub

  Procedure = COfflineState::COfflineState
  Method = Managed
  Overloading = Prototype

  # Begin Overloading
const COfflineState &
  # End Overloading

  # Begin MS Properties

    # Begin Declarations
/* To Do : Enter code for stub global declarations here */

    # End Declarations

  # End MS Properties

# End Stub

# Begin Stub

$ Stub based upon local stub

  Procedure = COfflineState::COfflineState
  Method = Managed
  Overloading = Prototype

  # Begin Overloading
  # End Overloading

  # Begin MS Properties

    # Begin Declarations
/* To Do : Enter code for stub global declarations here */

    # End Declarations

  # End MS Properties

# End Stub

# Begin Stub

$ Stub based upon local stub

  Procedure = COfflineState::ContBITUpdate
  Method = Managed
  Overloading = Prototype

  # Begin Overloading
CVlf *
  # End Overloading

  # Begin MS Properties

    # Begin Declarations
/* To Do : Enter code for stub global declarations here */

    # End Declarations

  # End MS Properties

# End Stub

# Begin Stub

$ Stub based upon local stub

  Procedure = COfflineState::getState
  Method = Managed
  Overloading = Prototype

  # Begin Overloading
  # End Overloading

  # Begin MS Properties

    # Begin Declarations
/* To Do : Enter code for stub global declarations here */

    # End Declarations

  # End MS Properties

# End Stub

# Begin Stub

$ Stub based upon local stub

  Procedure = COfflineState::~COfflineState
  Method = Managed
  Overloading = Prototype

  # Begin Overloading
  # End Overloading

  # Begin MS Properties

    # Begin Declarations
/* To Do : Enter code for stub global declarations here */

    # End Declarations

  # End MS Properties

# End Stub

# Begin Stub

$ Stub based upon local stub

  Procedure = COperationalState:: =
  Method = Managed
  Overloading = Prototype

  # Begin Overloading
const COperationalState &
  # End Overloading

  # Begin MS Properties

    Return Value = *this

    # Begin Declarations
/* To Do : Enter code for stub global declarations here */

    # End Declarations

  # End MS Properties

# End Stub

# Begin Stub

$ Stub based upon local stub

  Procedure = COperationalState::COperationalState
  Method = Managed
  Overloading = Prototype

  # Begin Overloading
const COperationalState &
  # End Overloading

  # Begin MS Properties

    # Begin Declarations
/* To Do : Enter code for stub global declarations here */

    # End Declarations

  # End MS Properties

# End Stub

# Begin Stub

$ Stub based upon local stub

  Procedure = COperationalState::COperationalState
  Method = Managed
  Overloading = Prototype

  # Begin Overloading
  # End Overloading

  # Begin MS Properties

    # Begin Declarations
/* To Do : Enter code for stub global declarations here */

    # End Declarations

  # End MS Properties

# End Stub

# Begin Stub

$ Stub based upon local stub

  Procedure = COperationalState::ChannelStateChange
  Method = Managed
  Overloading = Prototype

  # Begin Overloading
CVlf *
  # End Overloading

  # Begin MS Properties

    # Begin Declarations
/* To Do : Enter code for stub global declarations here */

    # End Declarations

  # End MS Properties

# End Stub

# Begin Stub

$ Stub based upon local stub

  Procedure = COperationalState::ContBITUpdate
  Method = Managed
  Overloading = Prototype

  # Begin Overloading
CVlf *
  # End Overloading

  # Begin MS Properties

    # Begin Declarations
/* To Do : Enter code for stub global declarations here */

    # End Declarations

  # End MS Properties

# End Stub

# Begin Stub

$ Stub based upon local stub

  Procedure = COperationalState::getState
  Method = Managed
  Overloading = Prototype

  # Begin Overloading
  # End Overloading

  # Begin MS Properties

    # Begin Declarations
/* To Do : Enter code for stub global declarations here */

    # End Declarations

  # End MS Properties

# End Stub

# Begin Stub

$ Stub based upon local stub

  Procedure = COperationalState::~COperationalState
  Method = Managed
  Overloading = Prototype

  # Begin Overloading
  # End Overloading

  # Begin MS Properties

    # Begin Declarations
/* To Do : Enter code for stub global declarations here */

    # End Declarations

  # End MS Properties

# End Stub

# Begin Stub

$ Stub based upon local stub

  Procedure = CStandbyState:: =
  Method = Managed
  Overloading = Prototype

  # Begin Overloading
const CStandbyState &
  # End Overloading

  # Begin MS Properties

    Return Value = *this

    # Begin Declarations
/* To Do : Enter code for stub global declarations here */

    # End Declarations

  # End MS Properties

# End Stub

# Begin Stub

$ Stub based upon local stub

  Procedure = CStandbyState::CStandbyState
  Method = Managed
  Overloading = Prototype

  # Begin Overloading
const CStandbyState &
  # End Overloading

  # Begin MS Properties

    # Begin Declarations
/* To Do : Enter code for stub global declarations here */

    # End Declarations

  # End MS Properties

# End Stub

# Begin Stub

$ Stub based upon local stub

  Procedure = CStandbyState::CStandbyState
  Method = Managed
  Overloading = Prototype

  # Begin Overloading
  # End Overloading

  # Begin MS Properties

    # Begin Declarations
/* To Do : Enter code for stub global declarations here */

    # End Declarations

  # End MS Properties

# End Stub

# Begin Stub

$ Stub based upon local stub

  Procedure = CStandbyState::ChannelStateChange
  Method = Managed
  Overloading = Prototype

  # Begin Overloading
CVlf *
  # End Overloading

  # Begin MS Properties

    # Begin Declarations
/* To Do : Enter code for stub global declarations here */

    # End Declarations

  # End MS Properties

# End Stub

# Begin Stub

$ Stub based upon local stub

  Procedure = CStandbyState::getState
  Method = Managed
  Overloading = Prototype

  # Begin Overloading
  # End Overloading

  # Begin MS Properties

    # Begin Declarations
/* To Do : Enter code for stub global declarations here */

    # End Declarations

  # End MS Properties

# End Stub

# Begin Stub

$ Stub based upon local stub

  Procedure = CStandbyState::~CStandbyState
  Method = Managed
  Overloading = Prototype

  # Begin Overloading
  # End Overloading

  # Begin MS Properties

    # Begin Declarations
/* To Do : Enter code for stub global declarations here */

    # End Declarations

  # End MS Properties

# End Stub

# Begin Stub

$ Stub based upon local stub

  Procedure = CTimeLoad:: =
  Method = Managed
  Overloading = Prototype

  # Begin Overloading
const CTimeLoad &
  # End Overloading

  # Begin MS Properties

    Return Value = *this

    # Begin Declarations
/* To Do : Enter code for stub global declarations here */

    # End Declarations

  # End MS Properties

# End Stub

# Begin Stub

$ Stub based upon local stub

  Procedure = CTimeLoad::CTimeLoad
  Method = Managed
  Overloading = Prototype

  # Begin Overloading
const CTimeLoad &
  # End Overloading

  # Begin MS Properties

    # Begin Declarations
/* To Do : Enter code for stub global declarations here */

    # End Declarations

  # End MS Properties

# End Stub

# Begin Stub

$ Stub based upon local stub

  Procedure = CTimeLoad::CTimeLoad
  Method = Managed
  Overloading = Prototype

  # Begin Overloading
  # End Overloading

  # Begin MS Properties

    # Begin Declarations
/* To Do : Enter code for stub global declarations here */

    # End Declarations

  # End MS Properties

# End Stub

# Begin Stub

$ Stub based upon local stub

  Procedure = CTimeLoad::GetAbsTime
  Method = Managed
  Overloading = Prototype

  # Begin Overloading
Absolute_Time_Type &
  # End Overloading

  # Begin MS Properties

    # Begin Declarations
/* To Do : Enter code for stub global declarations here */

    # End Declarations

  # End MS Properties

# End Stub

# Begin Stub

$ Stub based upon local stub

  Procedure = CTimeLoad::GetTimeStatus
  Method = Managed
  Overloading = Prototype

  # Begin Overloading
  # End Overloading

  # Begin MS Properties

    # Begin Declarations
/* To Do : Enter code for stub global declarations here */

    # End Declarations

  # End MS Properties

# End Stub

# Begin Stub

$ Stub based upon local stub

  Procedure = CTimeLoad::GetVlfTime
  Method = Managed
  Overloading = Prototype

  # Begin Overloading
  # End Overloading

  # Begin MS Properties

    Return Value = ldra_qq_lv_17

    # Begin Declarations
/* To Do : Enter code for stub global declarations here */

    # End Declarations

    # Begin Local Declarations
static VlfTime ldra_qq_lv_17;
    # End Local Declarations

  # End MS Properties

# End Stub

# Begin Stub

$ Stub based upon local stub

  Procedure = CTimeLoad::Instance
  Method = Managed
  Overloading = Prototype

  # Begin Overloading
  # End Overloading

  # Begin MS Properties

    Return Value = &ldra_qq_lv_18

    # Begin Declarations
/* To Do : Enter code for stub global declarations here */

    # End Declarations

    # Begin Local Declarations
static CTimeLoad ldra_qq_lv_18;
    # End Local Declarations

  # End MS Properties

# End Stub

# Begin Stub

$ Stub based upon local stub

  Procedure = CTimeLoad::LoadTime
  Method = Managed
  Overloading = Prototype

  # Begin Overloading
TimeLoadCmd
Load_Type
  # End Overloading

  # Begin MS Properties

    # Begin Declarations
/* To Do : Enter code for stub global declarations here */

    # End Declarations

  # End MS Properties

# End Stub

# Begin Stub

$ Stub based upon local stub

  Procedure = CTimeLoad::RestartChannelAfterTimeLoad
  Method = Managed
  Overloading = Prototype

  # Begin Overloading
unsigned int
  # End Overloading

  # Begin MS Properties

    # Begin Declarations
/* To Do : Enter code for stub global declarations here */

    # End Declarations

  # End MS Properties

# End Stub

# Begin Stub

$ Stub based upon local stub

  Procedure = CTimeLoad::RunPpsPbit
  Method = Managed
  Overloading = Prototype

  # Begin Overloading
TimeLoadCmd
  # End Overloading

  # Begin MS Properties

    # Begin Declarations
/* To Do : Enter code for stub global declarations here */

    # End Declarations

  # End MS Properties

# End Stub

# Begin Stub

$ Stub based upon local stub

  Procedure = CTimeLoad::SendTimeLoadCmd
  Method = Managed
  Overloading = Prototype

  # Begin Overloading
TimeLoadCmd
  # End Overloading

  # Begin MS Properties

    # Begin Declarations
/* To Do : Enter code for stub global declarations here */

    # End Declarations

  # End MS Properties

# End Stub

# Begin Stub

$ Stub based upon local stub

  Procedure = CTimeLoad::SetSystemClock
  Method = Managed
  Overloading = Prototype

  # Begin Overloading
  # End Overloading

  # Begin MS Properties

    # Begin Declarations
/* To Do : Enter code for stub global declarations here */

    # End Declarations

  # End MS Properties

# End Stub

# Begin Stub

$ Stub based upon local stub

  Procedure = CTimeLoad::setLoadType
  Method = Managed
  Overloading = Prototype

  # Begin Overloading
Load_Type
  # End Overloading

  # Begin MS Properties

    # Begin Declarations
/* To Do : Enter code for stub global declarations here */

    # End Declarations

  # End MS Properties

# End Stub

# Begin Stub

$ Stub based upon local stub

  Procedure = CTimeLoad::setTimeOfDayVar
  Method = Managed
  Overloading = Prototype

  # Begin Overloading
Date_Time_Type
  # End Overloading

  # Begin MS Properties

    # Begin Declarations
/* To Do : Enter code for stub global declarations here */

    # End Declarations

  # End MS Properties

# End Stub

# Begin Stub

$ Stub based upon local stub

  Procedure = CTimeLoad::~CTimeLoad
  Method = Managed
  Overloading = Prototype

  # Begin Overloading
  # End Overloading

  # Begin MS Properties

    # Begin Declarations
/* To Do : Enter code for stub global declarations here */

    # End Declarations

  # End MS Properties

# End Stub

# Begin Stub

$ Stub based upon local stub

  Procedure = CVCConfigureChannel:: =
  Method = Managed
  Overloading = Prototype

  # Begin Overloading
const CVCConfigureChannel &
  # End Overloading

  # Begin MS Properties

    Return Value = *this

    # Begin Declarations
/* To Do : Enter code for stub global declarations here */

    # End Declarations

  # End MS Properties

# End Stub

# Begin Stub

$ Stub based upon local stub

  Procedure = CVCConfigureChannel::BuildConfigChanMsg
  Method = Managed
  Overloading = Prototype

  # Begin Overloading
Channel_ID_Type
Key_Bank_Info_Type
  # End Overloading

  # Begin MS Properties

    Return Value = &ldra_qq_lv_19

    # Begin Declarations
/* To Do : Enter code for stub global declarations here */

    # End Declarations

    # Begin Local Declarations
static CMessage ldra_qq_lv_19;
    # End Local Declarations

  # End MS Properties

# End Stub

# Begin Stub

$ Stub based upon local stub

  Procedure = CVCConfigureChannel::CVCConfigureChannel
  Method = Managed
  Overloading = Prototype

  # Begin Overloading
const CVCConfigureChannel &
  # End Overloading

  # Begin MS Properties

    # Begin Declarations
/* To Do : Enter code for stub global declarations here */

    # End Declarations

  # End MS Properties

# End Stub

# Begin Stub

$ Stub based upon local stub

  Procedure = CVCConfigureChannel::CVCConfigureChannel
  Method = Managed
  Overloading = Prototype

  # Begin Overloading
  # End Overloading

  # Begin MS Properties

    # Begin Declarations
/* To Do : Enter code for stub global declarations here */

    # End Declarations

  # End MS Properties

# End Stub

# Begin Stub

$ Stub based upon local stub

  Procedure = CVCConfigureChannel::~CVCConfigureChannel
  Method = Managed
  Overloading = Prototype

  # Begin Overloading
  # End Overloading

  # Begin MS Properties

    # Begin Declarations
/* To Do : Enter code for stub global declarations here */

    # End Declarations

  # End MS Properties

# End Stub

# Begin Stub

$ Stub based upon local stub

  Procedure = CVCRunupChannel:: =
  Method = Managed
  Overloading = Prototype

  # Begin Overloading
const CVCRunupChannel &
  # End Overloading

  # Begin MS Properties

    Return Value = *this

    # Begin Declarations
/* To Do : Enter code for stub global declarations here */

    # End Declarations

  # End MS Properties

# End Stub

# Begin Stub

$ Stub based upon local stub

  Procedure = CVCRunupChannel::BuildRunupMsg
  Method = Managed
  Overloading = Prototype

  # Begin Overloading
Channel_ID_Type
  # End Overloading

  # Begin MS Properties

    Return Value = &ldra_qq_lv_20

    # Begin Declarations
/* To Do : Enter code for stub global declarations here */

    # End Declarations

    # Begin Local Declarations
static CMessage ldra_qq_lv_20;
    # End Local Declarations

  # End MS Properties

# End Stub

# Begin Stub

$ Stub based upon local stub

  Procedure = CVCRunupChannel::CVCRunupChannel
  Method = Managed
  Overloading = Prototype

  # Begin Overloading
const CVCRunupChannel &
  # End Overloading

  # Begin MS Properties

    # Begin Declarations
/* To Do : Enter code for stub global declarations here */

    # End Declarations

  # End MS Properties

# End Stub

# Begin Stub

$ Stub based upon local stub

  Procedure = CVCRunupChannel::CVCRunupChannel
  Method = Managed
  Overloading = Prototype

  # Begin Overloading
  # End Overloading

  # Begin MS Properties

    # Begin Declarations
/* To Do : Enter code for stub global declarations here */

    # End Declarations

  # End MS Properties

# End Stub

# Begin Stub

$ Stub based upon local stub

  Procedure = CVCRunupChannel::~CVCRunupChannel
  Method = Managed
  Overloading = Prototype

  # Begin Overloading
  # End Overloading

  # Begin MS Properties

    # Begin Declarations
/* To Do : Enter code for stub global declarations here */

    # End Declarations

  # End MS Properties

# End Stub

# Begin Stub

$ Stub based upon local stub

  Procedure = CVCZeroizeCryptoChannel:: =
  Method = Managed
  Overloading = Prototype

  # Begin Overloading
const CVCZeroizeCryptoChannel &
  # End Overloading

  # Begin MS Properties

    Return Value = *this

    # Begin Declarations
/* To Do : Enter code for stub global declarations here */

    # End Declarations

  # End MS Properties

# End Stub

# Begin Stub

$ Stub based upon local stub

  Procedure = CVCZeroizeCryptoChannel::BuildZeroizeChanMsg
  Method = Managed
  Overloading = Prototype

  # Begin Overloading
Channel_ID_Type
  # End Overloading

  # Begin MS Properties

    Return Value = &ldra_qq_lv_21

    # Begin Declarations
/* To Do : Enter code for stub global declarations here */

    # End Declarations

    # Begin Local Declarations
static CMessage ldra_qq_lv_21;
    # End Local Declarations

  # End MS Properties

# End Stub

# Begin Stub

$ Stub based upon local stub

  Procedure = CVCZeroizeCryptoChannel::CVCZeroizeCryptoChannel
  Method = Managed
  Overloading = Prototype

  # Begin Overloading
const CVCZeroizeCryptoChannel &
  # End Overloading

  # Begin MS Properties

    # Begin Declarations
/* To Do : Enter code for stub global declarations here */

    # End Declarations

  # End MS Properties

# End Stub

# Begin Stub

$ Stub based upon local stub

  Procedure = CVCZeroizeCryptoChannel::CVCZeroizeCryptoChannel
  Method = Managed
  Overloading = Prototype

  # Begin Overloading
  # End Overloading

  # Begin MS Properties

    # Begin Declarations
/* To Do : Enter code for stub global declarations here */

    # End Declarations

  # End MS Properties

# End Stub

# Begin Stub

$ Stub based upon local stub

  Procedure = CVCZeroizeCryptoChannel::~CVCZeroizeCryptoChannel
  Method = Managed
  Overloading = Prototype

  # Begin Overloading
  # End Overloading

  # Begin MS Properties

    # Begin Declarations
/* To Do : Enter code for stub global declarations here */

    # End Declarations

  # End MS Properties

# End Stub

# Begin Stub

$ Stub based upon local stub

  Procedure = CVOKeyDispositionStatus:: =
  Method = Managed
  Overloading = Prototype

  # Begin Overloading
const CVOKeyDispositionStatus &
  # End Overloading

  # Begin MS Properties

    Return Value = *this

    # Begin Declarations
/* To Do : Enter code for stub global declarations here */

    # End Declarations

  # End MS Properties

# End Stub

# Begin Stub

$ Stub based upon local stub

  Procedure = CVOKeyDispositionStatus::BuildDispMsg
  Method = Managed
  Overloading = Prototype

  # Begin Overloading
const Key_Disposition_Status_Msg_Type *
  # End Overloading

  # Begin MS Properties

    Return Value = &ldra_qq_lv_22

    # Begin Declarations
/* To Do : Enter code for stub global declarations here */

    # End Declarations

    # Begin Local Declarations
static CMessage ldra_qq_lv_22;
    # End Local Declarations

  # End MS Properties

# End Stub

# Begin Stub

$ Stub based upon local stub

  Procedure = CVOKeyDispositionStatus::CVOKeyDispositionStatus
  Method = Managed
  Overloading = Prototype

  # Begin Overloading
const CVOKeyDispositionStatus &
  # End Overloading

  # Begin MS Properties

    # Begin Declarations
/* To Do : Enter code for stub global declarations here */

    # End Declarations

  # End MS Properties

# End Stub

# Begin Stub

$ Stub based upon local stub

  Procedure = CVOKeyDispositionStatus::CVOKeyDispositionStatus
  Method = Managed
  Overloading = Prototype

  # Begin Overloading
  # End Overloading

  # Begin MS Properties

    # Begin Declarations
/* To Do : Enter code for stub global declarations here */

    # End Declarations

  # End MS Properties

# End Stub

# Begin Stub

$ Stub based upon local stub

  Procedure = CVOKeyDispositionStatus::~CVOKeyDispositionStatus
  Method = Managed
  Overloading = Prototype

  # Begin Overloading
  # End Overloading

  # Begin MS Properties

    # Begin Declarations
/* To Do : Enter code for stub global declarations here */

    # End Declarations

  # End MS Properties

# End Stub

# Begin Stub

$ Stub based upon local stub

  Procedure = CVlf:: =
  Method = Managed
  Overloading = Prototype

  # Begin Overloading
const CVlf &
  # End Overloading

  # Begin MS Properties

    Return Value = *this

    # Begin Declarations
/* To Do : Enter code for stub global declarations here */

    # End Declarations

  # End MS Properties

# End Stub

# Begin Stub

$ Stub based upon local stub

  Procedure = CVlf::CVlf
  Method = Managed
  Overloading = Prototype

  # Begin Overloading
const CVlf &
  # End Overloading

  # Begin MS Properties

    # Begin Declarations
/* To Do : Enter code for stub global declarations here */

    # End Declarations

    # Begin Constructor Inits
mState(dummy1.mState)
    # End Constructor Inits

  # End MS Properties

# End Stub

# Begin Stub

$ Stub based upon local stub

  Procedure = CVlf::CVlf
  Method = Managed
  Overloading = Prototype

  # Begin Overloading
  # End Overloading

  # Begin MS Properties

    # Begin Declarations
/* To Do : Enter code for stub global declarations here */
    # End Declarations

    # Begin Constructor Inits
mState((IVLFState*)(0))
    # End Constructor Inits

  # End MS Properties

# End Stub

# Begin Stub

$ Stub based upon local stub

  Procedure = CVlf::ChannelStateChange
  Method = Managed
  Overloading = Prototype

  # Begin Overloading
  # End Overloading

  # Begin MS Properties

    # Begin Declarations
/* To Do : Enter code for stub global declarations here */

    # End Declarations

  # End MS Properties

# End Stub

# Begin Stub

$ Stub based upon local stub

  Procedure = CVlf::ContBITUpdate
  Method = Managed
  Overloading = Prototype

  # Begin Overloading
  # End Overloading

  # Begin MS Properties

    # Begin Declarations
/* To Do : Enter code for stub global declarations here */

    # End Declarations

  # End MS Properties

# End Stub

# Begin Stub

$ Stub based upon local stub

  Procedure = CVlf::CryptoChannelChange
  Method = Managed
  Overloading = Prototype

  # Begin Overloading
Channel_ID_Type
  # End Overloading

  # Begin MS Properties

    # Begin Declarations
/* To Do : Enter code for stub global declarations here */

    # End Declarations

  # End MS Properties

# End Stub

# Begin Stub

$ Stub based upon local stub

  Procedure = CVlf::CryptoStatusChange
  Method = Managed
  Overloading = Prototype

  # Begin Overloading
  # End Overloading

  # Begin MS Properties

    # Begin Declarations
/* To Do : Enter code for stub global declarations here */

    # End Declarations

  # End MS Properties

# End Stub

# Begin Stub

$ Stub based upon local stub

  Procedure = CVlf::DSPCommunications
  Method = Managed
  Overloading = Prototype

  # Begin Overloading
  # End Overloading

  # Begin MS Properties

    # Begin Declarations
/* To Do : Enter code for stub global declarations here */

    # End Declarations

  # End MS Properties

# End Stub

# Begin Stub

$ Stub based upon local stub

  Procedure = CVlf::GetProdVersionData
  Method = Managed
  Overloading = Prototype

  # Begin Overloading
  # End Overloading

  # Begin MS Properties

    # Begin Declarations
/* To Do : Enter code for stub global declarations here */

    # End Declarations

  # End MS Properties

# End Stub

# Begin Stub

$ Stub based upon local stub

  Procedure = CVlf::Instance
  Method = Managed
  Overloading = Prototype

  # Begin Overloading
  # End Overloading

  # Begin MS Properties

    Return Value = &ldra_qq_lv_23

    # Begin Declarations
/* To Do : Enter code for stub global declarations here */

    # End Declarations

    # Begin Local Declarations
static CVlf ldra_qq_lv_23;
    # End Local Declarations

  # End MS Properties

# End Stub

# Begin Stub

$ Stub based upon local stub

  Procedure = CVlf::RestartChannelsAfterEventChg
  Method = Managed
  Overloading = Prototype

  # Begin Overloading
int
  # End Overloading

  # Begin MS Properties

    # Begin Declarations
/* To Do : Enter code for stub global declarations here */

    # End Declarations

  # End MS Properties

# End Stub

# Begin Stub

$ Stub based upon local stub

  Procedure = CVlf::SendDSP2VersionData
  Method = Managed
  Overloading = Prototype

  # Begin Overloading
  # End Overloading

  # Begin MS Properties

    # Begin Declarations
/* To Do : Enter code for stub global declarations here */

    # End Declarations

  # End MS Properties

# End Stub

# Begin Stub

$ Stub based upon local stub

  Procedure = CVlf::SetConfigData
  Method = Managed
  Overloading = Prototype

  # Begin Overloading
  # End Overloading

  # Begin MS Properties

    # Begin Declarations
/* To Do : Enter code for stub global declarations here */

    # End Declarations

  # End MS Properties

# End Stub

# Begin Stub

$ Stub based upon local stub

  Procedure = CVlf::UpdateRcvrStatus
  Method = Managed
  Overloading = Prototype

  # Begin Overloading
  # End Overloading

  # Begin MS Properties

    # Begin Declarations
/* To Do : Enter code for stub global declarations here */

    # End Declarations

  # End MS Properties

# End Stub

# Begin Stub

$ Stub based upon local stub

  Procedure = CVlf::getKeyTblLoadedStatus
  Method = Managed
  Overloading = Prototype
  CV Qualifier = const

  # Begin Overloading
  # End Overloading

  # Begin MS Properties

    # Begin Declarations
/* To Do : Enter code for stub global declarations here */

    # End Declarations

  # End MS Properties

# End Stub

# Begin Stub

$ Stub based upon local stub

  Procedure = CVlf::setFpgaVersion
  Method = Managed
  Overloading = Prototype

  # Begin Overloading
const char *
  # End Overloading

  # Begin MS Properties

    # Begin Declarations
/* To Do : Enter code for stub global declarations here */

    # End Declarations

  # End MS Properties

# End Stub

# Begin Stub

$ Stub based upon local stub

  Procedure = CVlf::setKeyTblLoadedStatus
  Method = Managed
  Overloading = Prototype

  # Begin Overloading
bool
  # End Overloading

  # Begin MS Properties

    # Begin Declarations
/* To Do : Enter code for stub global declarations here */

    # End Declarations

  # End MS Properties

# End Stub

# Begin Stub

$ Stub based upon local stub

  Procedure = CVlf::setState
  Method = Managed
  Overloading = Prototype

  # Begin Overloading
IVLFState *
  # End Overloading

  # Begin MS Properties

    # Begin Declarations
/* To Do : Enter code for stub global declarations here */

    # End Declarations

  # End MS Properties

# End Stub

# Begin Stub

$ Stub based upon local stub

  Procedure = CVlf::setTimeLoadedStatus
  Method = Managed
  Overloading = Prototype

  # Begin Overloading
  # End Overloading

  # Begin MS Properties

    # Begin Declarations
/* To Do : Enter code for stub global declarations here */

    # End Declarations

  # End MS Properties

# End Stub

# Begin Stub

$ Stub based upon local stub

  Procedure = CVlf::~CVlf
  Method = Managed
  Overloading = Prototype

  # Begin Overloading
  # End Overloading

  # Begin MS Properties

    # Begin Declarations
/* To Do : Enter code for stub global declarations here */

    # End Declarations

  # End MS Properties

# End Stub

# Begin Stub

$ Stub based upon local stub

  Procedure = FpgaDevice:: =
  Method = Managed
  Overloading = Prototype

  # Begin Overloading
const FpgaDevice &
  # End Overloading

  # Begin MS Properties

    Return Value = *this

    # Begin Declarations
/* To Do : Enter code for stub global declarations here */

    # End Declarations

  # End MS Properties

# End Stub

# Begin Stub

$ Stub based upon local stub

  Procedure = FpgaDevice::ClrLimitBit
  Method = Managed
  Overloading = Prototype

  # Begin Overloading
  # End Overloading

  # Begin MS Properties

    # Begin Declarations
/* To Do : Enter code for stub global declarations here */

    # End Declarations

  # End MS Properties

# End Stub

# Begin Stub

$ Stub based upon local stub

  Procedure = FpgaDevice::ClrRegAntTstEn1
  Method = Managed
  Overloading = Prototype

  # Begin Overloading
  # End Overloading

  # Begin MS Properties

    # Begin Declarations
/* To Do : Enter code for stub global declarations here */

    # End Declarations

  # End MS Properties

# End Stub

# Begin Stub

$ Stub based upon local stub

  Procedure = FpgaDevice::ClrRegAntTstEn2
  Method = Managed
  Overloading = Prototype

  # Begin Overloading
  # End Overloading

  # Begin MS Properties

    # Begin Declarations
/* To Do : Enter code for stub global declarations here */

    # End Declarations

  # End MS Properties

# End Stub

# Begin Stub

$ Stub based upon local stub

  Procedure = FpgaDevice::ClrRegDitherEn
  Method = Managed
  Overloading = Prototype

  # Begin Overloading
  # End Overloading

  # Begin MS Properties

    # Begin Declarations
/* To Do : Enter code for stub global declarations here */

    # End Declarations

  # End MS Properties

# End Stub

# Begin Stub

$ Stub based upon local stub

  Procedure = FpgaDevice::ClrRegRfaTstEn
  Method = Managed
  Overloading = Prototype

  # Begin Overloading
  # End Overloading

  # Begin MS Properties

    # Begin Declarations
/* To Do : Enter code for stub global declarations here */

    # End Declarations

  # End MS Properties

# End Stub

# Begin Stub

$ Stub based upon local stub

  Procedure = FpgaDevice::ClrRunBit
  Method = Managed
  Overloading = Prototype

  # Begin Overloading
  # End Overloading

  # Begin MS Properties

    # Begin Declarations
/* To Do : Enter code for stub global declarations here */

    # End Declarations

  # End MS Properties

# End Stub

# Begin Stub

$ Stub based upon local stub

  Procedure = FpgaDevice::ClrTestEnableBit
  Method = Managed
  Overloading = Prototype

  # Begin Overloading
  # End Overloading

  # Begin MS Properties

    # Begin Declarations
/* To Do : Enter code for stub global declarations here */

    # End Declarations

  # End MS Properties

# End Stub

# Begin Stub

$ Stub based upon local stub

  Procedure = FpgaDevice::ClrUseAnbBit
  Method = Managed
  Overloading = Prototype

  # Begin Overloading
  # End Overloading

  # Begin MS Properties

    # Begin Declarations
/* To Do : Enter code for stub global declarations here */

    # End Declarations

  # End MS Properties

# End Stub

# Begin Stub

$ Stub based upon local stub

  Procedure = FpgaDevice::ClrUseAnlBit
  Method = Managed
  Overloading = Prototype

  # Begin Overloading
  # End Overloading

  # Begin MS Properties

    # Begin Declarations
/* To Do : Enter code for stub global declarations here */

    # End Declarations

  # End MS Properties

# End Stub

# Begin Stub

$ Stub based upon local stub

  Procedure = FpgaDevice::ConfigureFpga
  Method = Managed
  Overloading = Prototype

  # Begin Overloading
  # End Overloading

  # Begin MS Properties

    Return Value = FpgaFailed

    # Begin Declarations
/* To Do : Enter code for stub global declarations here */

    # End Declarations

  # End MS Properties

# End Stub

# Begin Stub

$ Stub based upon local stub

  Procedure = FpgaDevice::FpgaDevice
  Method = Managed
  Overloading = Prototype

  # Begin Overloading
const FpgaDevice &
  # End Overloading

  # Begin MS Properties

    # Begin Declarations
/* To Do : Enter code for stub global declarations here */

    # End Declarations

    # Begin Constructor Inits
mDeviceAddress(dummy1.mDeviceAddress)
mImageAddress(dummy1.mImageAddress)
    # End Constructor Inits

  # End MS Properties

# End Stub

# Begin Stub

$ Stub based upon local stub

  Procedure = FpgaDevice::FpgaDevice
  Method = Managed
  Overloading = Prototype

  # Begin Overloading
  # End Overloading

  # Begin MS Properties

    # Begin Declarations
/* To Do : Enter code for stub global declarations here */

    # End Declarations

    # Begin Constructor Inits
mDeviceAddress((FpgaDevice::FpgaReg*)(0))
mImageAddress((FpgaDevice::ImageFormat*)(0))
    # End Constructor Inits

  # End MS Properties

# End Stub

# Begin Stub

$ Stub based upon local stub

  Procedure = FpgaDevice::GetImageConfigData
  Method = Managed
  Overloading = Prototype
  CV Qualifier = const

  # Begin Overloading
const unsigned int
  # End Overloading

  # Begin MS Properties

    # Begin Declarations
/* To Do : Enter code for stub global declarations here */

    # End Declarations

  # End MS Properties

# End Stub

# Begin Stub

$ Stub based upon local stub

  Procedure = FpgaDevice::GetImageConfigDoc
  Method = Managed
  Overloading = Prototype

  # Begin Overloading
  # End Overloading

  # Begin MS Properties

    # Begin Declarations
/* To Do : Enter code for stub global declarations here */

    # End Declarations

  # End MS Properties

# End Stub

# Begin Stub

$ Stub based upon local stub

  Procedure = FpgaDevice::GetImageConfigSize
  Method = Managed
  Overloading = Prototype
  CV Qualifier = const

  # Begin Overloading
  # End Overloading

  # Begin MS Properties

    # Begin Declarations
/* To Do : Enter code for stub global declarations here */

    # End Declarations

  # End MS Properties

# End Stub

# Begin Stub

$ Stub based upon local stub

  Procedure = FpgaDevice::GetIrqCtrlRegAddress
  Method = Managed
  Overloading = Prototype
  CV Qualifier = const

  # Begin Overloading
  # End Overloading

  # Begin MS Properties

    # Begin Declarations
/* To Do : Enter code for stub global declarations here */

    # End Declarations

  # End MS Properties

# End Stub

# Begin Stub

$ Stub based upon local stub

  Procedure = FpgaDevice::GetIrqRegAddress
  Method = Managed
  Overloading = Prototype
  CV Qualifier = const

  # Begin Overloading
  # End Overloading

  # Begin MS Properties

    # Begin Declarations
/* To Do : Enter code for stub global declarations here */

    # End Declarations

  # End MS Properties

# End Stub

# Begin Stub

$ Stub based upon local stub

  Procedure = FpgaDevice::GetLastError
  Method = Managed
  Overloading = Prototype
  CV Qualifier = const

  # Begin Overloading
  # End Overloading

  # Begin MS Properties

    Return Value = FpgaFailed

    # Begin Declarations
/* To Do : Enter code for stub global declarations here */

    # End Declarations

  # End MS Properties

# End Stub

# Begin Stub

$ Stub based upon local stub

  Procedure = FpgaDevice::GetOffSet1PpsRegAddress
  Method = Managed
  Overloading = Prototype
  CV Qualifier = const

  # Begin Overloading
  # End Overloading

  # Begin MS Properties

    # Begin Declarations
/* To Do : Enter code for stub global declarations here */

    # End Declarations

  # End MS Properties

# End Stub

# Begin Stub

$ Stub based upon local stub

  Procedure = FpgaDevice::GetOutputSample1Address
  Method = Managed
  Overloading = Prototype
  CV Qualifier = const

  # Begin Overloading
  # End Overloading

  # Begin MS Properties

    # Begin Declarations
/* To Do : Enter code for stub global declarations here */

    # End Declarations

  # End MS Properties

# End Stub

# Begin Stub

$ Stub based upon local stub

  Procedure = FpgaDevice::GetOutputSample2Address
  Method = Managed
  Overloading = Prototype
  CV Qualifier = const

  # Begin Overloading
  # End Overloading

  # Begin MS Properties

    # Begin Declarations
/* To Do : Enter code for stub global declarations here */

    # End Declarations

  # End MS Properties

# End Stub

# Begin Stub

$ Stub based upon local stub

  Procedure = FpgaDevice::GetOutputSample3Address
  Method = Managed
  Overloading = Prototype
  CV Qualifier = const

  # Begin Overloading
  # End Overloading

  # Begin MS Properties

    # Begin Declarations
/* To Do : Enter code for stub global declarations here */

    # End Declarations

  # End MS Properties

# End Stub

# Begin Stub

$ Stub based upon local stub

  Procedure = FpgaDevice::GetOutputSample4Address
  Method = Managed
  Overloading = Prototype
  CV Qualifier = const

  # Begin Overloading
  # End Overloading

  # Begin MS Properties

    # Begin Declarations
/* To Do : Enter code for stub global declarations here */

    # End Declarations

  # End MS Properties

# End Stub

# Begin Stub

$ Stub based upon local stub

  Procedure = FpgaDevice::GetOutputSample5Address
  Method = Managed
  Overloading = Prototype
  CV Qualifier = const

  # Begin Overloading
  # End Overloading

  # Begin MS Properties

    # Begin Declarations
/* To Do : Enter code for stub global declarations here */

    # End Declarations

  # End MS Properties

# End Stub

# Begin Stub

$ Stub based upon local stub

  Procedure = FpgaDevice::GetRfaStatusRegAddress
  Method = Managed
  Overloading = Prototype
  CV Qualifier = const

  # Begin Overloading
  # End Overloading

  # Begin MS Properties

    # Begin Declarations
/* To Do : Enter code for stub global declarations here */

    # End Declarations

  # End MS Properties

# End Stub

# Begin Stub

$ Stub based upon local stub

  Procedure = FpgaDevice::GetSecondCountAt1ppAddress
  Method = Managed
  Overloading = Prototype
  CV Qualifier = const

  # Begin Overloading
  # End Overloading

  # Begin MS Properties

    # Begin Declarations
/* To Do : Enter code for stub global declarations here */

    # End Declarations

  # End MS Properties

# End Stub

# Begin Stub

$ Stub based upon local stub

  Procedure = FpgaDevice::GetTODDoYRegAddress
  Method = Managed
  Overloading = Prototype
  CV Qualifier = const

  # Begin Overloading
  # End Overloading

  # Begin MS Properties

    # Begin Declarations
/* To Do : Enter code for stub global declarations here */

    # End Declarations

  # End MS Properties

# End Stub

# Begin Stub

$ Stub based upon local stub

  Procedure = FpgaDevice::GetTODHrsRegAddress
  Method = Managed
  Overloading = Prototype
  CV Qualifier = const

  # Begin Overloading
  # End Overloading

  # Begin MS Properties

    # Begin Declarations
/* To Do : Enter code for stub global declarations here */

    # End Declarations

  # End MS Properties

# End Stub

# Begin Stub

$ Stub based upon local stub

  Procedure = FpgaDevice::GetTODMinSecRegAddress
  Method = Managed
  Overloading = Prototype
  CV Qualifier = const

  # Begin Overloading
  # End Overloading

  # Begin MS Properties

    # Begin Declarations
/* To Do : Enter code for stub global declarations here */

    # End Declarations

  # End MS Properties

# End Stub

# Begin Stub

$ Stub based upon local stub

  Procedure = FpgaDevice::IsConfigured
  Method = Managed
  Overloading = Prototype
  CV Qualifier = const

  # Begin Overloading
  # End Overloading

  # Begin MS Properties

    # Begin Declarations
/* To Do : Enter code for stub global declarations here */

    # End Declarations

  # End MS Properties

# End Stub

# Begin Stub

$ Stub based upon local stub

  Procedure = FpgaDevice::IsDcx01BitSet
  Method = Managed
  Overloading = Prototype

  # Begin Overloading
  # End Overloading

  # Begin MS Properties

    # Begin Declarations
/* To Do : Enter code for stub global declarations here */

    # End Declarations

  # End MS Properties

# End Stub

# Begin Stub

$ Stub based upon local stub

  Procedure = FpgaDevice::IsExtSel1BitSet
  Method = Managed
  Overloading = Prototype

  # Begin Overloading
  # End Overloading

  # Begin MS Properties

    # Begin Declarations
/* To Do : Enter code for stub global declarations here */

    # End Declarations

  # End MS Properties

# End Stub

# Begin Stub

$ Stub based upon local stub

  Procedure = FpgaDevice::IsFx1LockBitSet
  Method = Managed
  Overloading = Prototype

  # Begin Overloading
  # End Overloading

  # Begin MS Properties

    # Begin Declarations
/* To Do : Enter code for stub global declarations here */

    # End Declarations

  # End MS Properties

# End Stub

# Begin Stub

$ Stub based upon local stub

  Procedure = FpgaDevice::IsPs1OVBitSet
  Method = Managed
  Overloading = Prototype

  # Begin Overloading
  # End Overloading

  # Begin MS Properties

    # Begin Declarations
/* To Do : Enter code for stub global declarations here */

    # End Declarations

  # End MS Properties

# End Stub

# Begin Stub

$ Stub based upon local stub

  Procedure = FpgaDevice::IsPs1UVBitSet
  Method = Managed
  Overloading = Prototype

  # Begin Overloading
  # End Overloading

  # Begin MS Properties

    # Begin Declarations
/* To Do : Enter code for stub global declarations here */

    # End Declarations

  # End MS Properties

# End Stub

# Begin Stub

$ Stub based upon local stub

  Procedure = FpgaDevice::IsPs2OVBitSet
  Method = Managed
  Overloading = Prototype

  # Begin Overloading
  # End Overloading

  # Begin MS Properties

    # Begin Declarations
/* To Do : Enter code for stub global declarations here */

    # End Declarations

  # End MS Properties

# End Stub

# Begin Stub

$ Stub based upon local stub

  Procedure = FpgaDevice::IsPs2UVBitSet
  Method = Managed
  Overloading = Prototype

  # Begin Overloading
  # End Overloading

  # Begin MS Properties

    # Begin Declarations
/* To Do : Enter code for stub global declarations here */

    # End Declarations

  # End MS Properties

# End Stub

# Begin Stub

$ Stub based upon local stub

  Procedure = FpgaDevice::PrepareFpga
  Method = Managed
  Overloading = Prototype

  # Begin Overloading
  # End Overloading

  # Begin MS Properties

    Return Value = FpgaFailed

    # Begin Declarations
/* To Do : Enter code for stub global declarations here */

    # End Declarations

  # End MS Properties

# End Stub

# Begin Stub

$ Stub based upon local stub

  Procedure = FpgaDevice::RFA1_GetOutputSample1Address
  Method = Managed
  Overloading = Prototype
  CV Qualifier = const

  # Begin Overloading
  # End Overloading

  # Begin MS Properties

    # Begin Declarations
/* To Do : Enter code for stub global declarations here */

    # End Declarations

  # End MS Properties

# End Stub

# Begin Stub

$ Stub based upon local stub

  Procedure = FpgaDevice::RFA1_GetOutputSample2Address
  Method = Managed
  Overloading = Prototype
  CV Qualifier = const

  # Begin Overloading
  # End Overloading

  # Begin MS Properties

    # Begin Declarations
/* To Do : Enter code for stub global declarations here */

    # End Declarations

  # End MS Properties

# End Stub

# Begin Stub

$ Stub based upon local stub

  Procedure = FpgaDevice::RFA1_GetOutputSample3Address
  Method = Managed
  Overloading = Prototype
  CV Qualifier = const

  # Begin Overloading
  # End Overloading

  # Begin MS Properties

    # Begin Declarations
/* To Do : Enter code for stub global declarations here */

    # End Declarations

  # End MS Properties

# End Stub

# Begin Stub

$ Stub based upon local stub

  Procedure = FpgaDevice::RFA1_GetOutputSample4Address
  Method = Managed
  Overloading = Prototype
  CV Qualifier = const

  # Begin Overloading
  # End Overloading

  # Begin MS Properties

    # Begin Declarations
/* To Do : Enter code for stub global declarations here */

    # End Declarations

  # End MS Properties

# End Stub

# Begin Stub

$ Stub based upon local stub

  Procedure = FpgaDevice::RFA1_GetOutputSample5Address
  Method = Managed
  Overloading = Prototype
  CV Qualifier = const

  # Begin Overloading
  # End Overloading

  # Begin MS Properties

    # Begin Declarations
/* To Do : Enter code for stub global declarations here */

    # End Declarations

  # End MS Properties

# End Stub

# Begin Stub

$ Stub based upon local stub

  Procedure = FpgaDevice::RFA2_GetOutputSample1Address
  Method = Managed
  Overloading = Prototype
  CV Qualifier = const

  # Begin Overloading
  # End Overloading

  # Begin MS Properties

    # Begin Declarations
/* To Do : Enter code for stub global declarations here */

    # End Declarations

  # End MS Properties

# End Stub

# Begin Stub

$ Stub based upon local stub

  Procedure = FpgaDevice::RFA2_GetOutputSample2Address
  Method = Managed
  Overloading = Prototype
  CV Qualifier = const

  # Begin Overloading
  # End Overloading

  # Begin MS Properties

    # Begin Declarations
/* To Do : Enter code for stub global declarations here */

    # End Declarations

  # End MS Properties

# End Stub

# Begin Stub

$ Stub based upon local stub

  Procedure = FpgaDevice::RFA2_GetOutputSample3Address
  Method = Managed
  Overloading = Prototype
  CV Qualifier = const

  # Begin Overloading
  # End Overloading

  # Begin MS Properties

    # Begin Declarations
/* To Do : Enter code for stub global declarations here */

    # End Declarations

  # End MS Properties

# End Stub

# Begin Stub

$ Stub based upon local stub

  Procedure = FpgaDevice::RFA2_GetOutputSample4Address
  Method = Managed
  Overloading = Prototype
  CV Qualifier = const

  # Begin Overloading
  # End Overloading

  # Begin MS Properties

    # Begin Declarations
/* To Do : Enter code for stub global declarations here */

    # End Declarations

  # End MS Properties

# End Stub

# Begin Stub

$ Stub based upon local stub

  Procedure = FpgaDevice::RFA2_GetOutputSample5Address
  Method = Managed
  Overloading = Prototype
  CV Qualifier = const

  # Begin Overloading
  # End Overloading

  # Begin MS Properties

    # Begin Declarations
/* To Do : Enter code for stub global declarations here */

    # End Declarations

  # End MS Properties

# End Stub

# Begin Stub

$ Stub based upon local stub

  Procedure = FpgaDevice::RFA3_GetOutputSample1Address
  Method = Managed
  Overloading = Prototype
  CV Qualifier = const

  # Begin Overloading
  # End Overloading

  # Begin MS Properties

    # Begin Declarations
/* To Do : Enter code for stub global declarations here */

    # End Declarations

  # End MS Properties

# End Stub

# Begin Stub

$ Stub based upon local stub

  Procedure = FpgaDevice::RFA3_GetOutputSample2Address
  Method = Managed
  Overloading = Prototype
  CV Qualifier = const

  # Begin Overloading
  # End Overloading

  # Begin MS Properties

    # Begin Declarations
/* To Do : Enter code for stub global declarations here */

    # End Declarations

  # End MS Properties

# End Stub

# Begin Stub

$ Stub based upon local stub

  Procedure = FpgaDevice::RFA3_GetOutputSample3Address
  Method = Managed
  Overloading = Prototype
  CV Qualifier = const

  # Begin Overloading
  # End Overloading

  # Begin MS Properties

    # Begin Declarations
/* To Do : Enter code for stub global declarations here */

    # End Declarations

  # End MS Properties

# End Stub

# Begin Stub

$ Stub based upon local stub

  Procedure = FpgaDevice::RFA3_GetOutputSample4Address
  Method = Managed
  Overloading = Prototype
  CV Qualifier = const

  # Begin Overloading
  # End Overloading

  # Begin MS Properties

    # Begin Declarations
/* To Do : Enter code for stub global declarations here */

    # End Declarations

  # End MS Properties

# End Stub

# Begin Stub

$ Stub based upon local stub

  Procedure = FpgaDevice::RFA3_GetOutputSample5Address
  Method = Managed
  Overloading = Prototype
  CV Qualifier = const

  # Begin Overloading
  # End Overloading

  # Begin MS Properties

    # Begin Declarations
/* To Do : Enter code for stub global declarations here */

    # End Declarations

  # End MS Properties

# End Stub

# Begin Stub

$ Stub based upon local stub

  Procedure = FpgaDevice::Reset
  Method = Managed
  Overloading = Prototype

  # Begin Overloading
  # End Overloading

  # Begin MS Properties

    Return Value = FpgaFailed

    # Begin Declarations
/* To Do : Enter code for stub global declarations here */

    # End Declarations

  # End MS Properties

# End Stub

# Begin Stub

$ Stub based upon local stub

  Procedure = FpgaDevice::SetFreqChan1InHz
  Method = Managed
  Overloading = Prototype

  # Begin Overloading
const unsigned int
  # End Overloading

  # Begin MS Properties

    Return Value = FpgaFailed

    # Begin Declarations
/* To Do : Enter code for stub global declarations here */

    # End Declarations

  # End MS Properties

# End Stub

# Begin Stub

$ Stub based upon local stub

  Procedure = FpgaDevice::SetFreqChan2InHz
  Method = Managed
  Overloading = Prototype

  # Begin Overloading
const unsigned int
  # End Overloading

  # Begin MS Properties

    Return Value = FpgaFailed

    # Begin Declarations
/* To Do : Enter code for stub global declarations here */

    # End Declarations

  # End MS Properties

# End Stub

# Begin Stub

$ Stub based upon local stub

  Procedure = FpgaDevice::SetFreqChan3InHz
  Method = Managed
  Overloading = Prototype

  # Begin Overloading
const unsigned int
  # End Overloading

  # Begin MS Properties

    Return Value = FpgaFailed

    # Begin Declarations
/* To Do : Enter code for stub global declarations here */

    # End Declarations

  # End MS Properties

# End Stub

# Begin Stub

$ Stub based upon local stub

  Procedure = FpgaDevice::SetFreqChan4InHz
  Method = Managed
  Overloading = Prototype

  # Begin Overloading
const unsigned int
  # End Overloading

  # Begin MS Properties

    Return Value = FpgaFailed

    # Begin Declarations
/* To Do : Enter code for stub global declarations here */

    # End Declarations

  # End MS Properties

# End Stub

# Begin Stub

$ Stub based upon local stub

  Procedure = FpgaDevice::SetFreqChan5InHz
  Method = Managed
  Overloading = Prototype

  # Begin Overloading
const unsigned int
  # End Overloading

  # Begin MS Properties

    Return Value = FpgaFailed

    # Begin Declarations
/* To Do : Enter code for stub global declarations here */

    # End Declarations

  # End MS Properties

# End Stub

# Begin Stub

$ Stub based upon local stub

  Procedure = FpgaDevice::SetFreqChanInHz
  Method = Managed
  Overloading = Prototype

  # Begin Overloading
unsigned int
enum FpgaDevice::FREQ_CHAN
  # End Overloading

  # Begin MS Properties

    Return Value = FpgaFailed

    # Begin Declarations
/* To Do : Enter code for stub global declarations here */

    # End Declarations

  # End MS Properties

# End Stub

# Begin Stub

$ Stub based upon local stub

  Procedure = FpgaDevice::SetLimitBit
  Method = Managed
  Overloading = Prototype

  # Begin Overloading
  # End Overloading

  # Begin MS Properties

    # Begin Declarations
/* To Do : Enter code for stub global declarations here */

    # End Declarations

  # End MS Properties

# End Stub

# Begin Stub

$ Stub based upon local stub

  Procedure = FpgaDevice::SetRegAntTstEn1
  Method = Managed
  Overloading = Prototype

  # Begin Overloading
  # End Overloading

  # Begin MS Properties

    # Begin Declarations
/* To Do : Enter code for stub global declarations here */

    # End Declarations

  # End MS Properties

# End Stub

# Begin Stub

$ Stub based upon local stub

  Procedure = FpgaDevice::SetRegAntTstEn2
  Method = Managed
  Overloading = Prototype

  # Begin Overloading
  # End Overloading

  # Begin MS Properties

    # Begin Declarations
/* To Do : Enter code for stub global declarations here */

    # End Declarations

  # End MS Properties

# End Stub

# Begin Stub

$ Stub based upon local stub

  Procedure = FpgaDevice::SetRegDitherEn
  Method = Managed
  Overloading = Prototype

  # Begin Overloading
  # End Overloading

  # Begin MS Properties

    # Begin Declarations
/* To Do : Enter code for stub global declarations here */

    # End Declarations

  # End MS Properties

# End Stub

# Begin Stub

$ Stub based upon local stub

  Procedure = FpgaDevice::SetRegRfaTstEn
  Method = Managed
  Overloading = Prototype

  # Begin Overloading
  # End Overloading

  # Begin MS Properties

    # Begin Declarations
/* To Do : Enter code for stub global declarations here */

    # End Declarations

  # End MS Properties

# End Stub

# Begin Stub

$ Stub based upon local stub

  Procedure = FpgaDevice::SetRunBit
  Method = Managed
  Overloading = Prototype

  # Begin Overloading
  # End Overloading

  # Begin MS Properties

    # Begin Declarations
/* To Do : Enter code for stub global declarations here */

    # End Declarations

  # End MS Properties

# End Stub

# Begin Stub

$ Stub based upon local stub

  Procedure = FpgaDevice::SetTestEnableBit
  Method = Managed
  Overloading = Prototype

  # Begin Overloading
  # End Overloading

  # Begin MS Properties

    # Begin Declarations
/* To Do : Enter code for stub global declarations here */

    # End Declarations

  # End MS Properties

# End Stub

# Begin Stub

$ Stub based upon local stub

  Procedure = FpgaDevice::SetUseAnbBit
  Method = Managed
  Overloading = Prototype

  # Begin Overloading
  # End Overloading

  # Begin MS Properties

    # Begin Declarations
/* To Do : Enter code for stub global declarations here */

    # End Declarations

  # End MS Properties

# End Stub

# Begin Stub

$ Stub based upon local stub

  Procedure = FpgaDevice::SetUseAnlBit
  Method = Managed
  Overloading = Prototype

  # Begin Overloading
  # End Overloading

  # Begin MS Properties

    # Begin Declarations
/* To Do : Enter code for stub global declarations here */

    # End Declarations

  # End MS Properties

# End Stub

# Begin Stub

$ Stub based upon local stub

  Procedure = FpgaDevice::XltLastError
  Method = Managed
  Overloading = Prototype

  # Begin Overloading
const FpgaDevice::ERROR
  # End Overloading

  # Begin MS Properties

    Return Value = ldra_qq_lv_4

    # Begin Declarations
/* To Do : Enter code for stub global declarations here */

    # End Declarations

    # Begin Local Declarations
static char ldra_qq_lv_4[100];
    # End Local Declarations

  # End MS Properties

# End Stub

# Begin Stub

$ Stub based upon local stub

  Procedure = FpgaDevice::~FpgaDevice
  Method = Managed
  Overloading = Prototype

  # Begin Overloading
  # End Overloading

  # Begin MS Properties

    # Begin Declarations
/* To Do : Enter code for stub global declarations here */

    # End Declarations

  # End MS Properties

# End Stub

# Begin Stub

$ Stub based upon local stub

  Procedure = IChannelState::ChangeCpChanOpStatus
  Method = Managed
  Overloading = Prototype

  # Begin Overloading
CChannel *
  # End Overloading

  # Begin MS Properties

    # Begin Declarations
/* To Do : Enter code for stub global declarations here */

    # End Declarations

  # End MS Properties

# End Stub

# Begin Stub

$ Stub based upon local stub

  Procedure = IChannelState::CryptoBIT
  Method = Managed
  Overloading = Prototype

  # Begin Overloading
CChannel *
  # End Overloading

  # Begin MS Properties

    # Begin Declarations
/* To Do : Enter code for stub global declarations here */

    # End Declarations

  # End MS Properties

# End Stub

# Begin Stub

$ Stub based upon local stub

  Procedure = IChannelState::CryptoChannelUpdate
  Method = Managed
  Overloading = Prototype

  # Begin Overloading
CChannel *
  # End Overloading

  # Begin MS Properties

    # Begin Declarations
/* To Do : Enter code for stub global declarations here */

    # End Declarations

  # End MS Properties

# End Stub

# Begin Stub

$ Stub based upon local stub

  Procedure = IChannelState::CryptoStatus
  Method = Managed
  Overloading = Prototype

  # Begin Overloading
CChannel *
  # End Overloading

  # Begin MS Properties

    # Begin Declarations
/* To Do : Enter code for stub global declarations here */

    # End Declarations

  # End MS Properties

# End Stub

# Begin Stub

$ Stub based upon local stub

  Procedure = IChannelState::LoadTime
  Method = Managed
  Overloading = Prototype

  # Begin Overloading
CChannel *
  # End Overloading

  # Begin MS Properties

    # Begin Declarations
/* To Do : Enter code for stub global declarations here */

    # End Declarations

  # End MS Properties

# End Stub

# Begin Stub

$ Stub based upon local stub

  Procedure = IChannelState::StartChannel
  Method = Managed
  Overloading = Prototype

  # Begin Overloading
CChannel *
  # End Overloading

  # Begin MS Properties

    # Begin Declarations
/* To Do : Enter code for stub global declarations here */

    # End Declarations

  # End MS Properties

# End Stub

# Begin Stub

$ Stub based upon local stub

  Procedure = IChannelState::StopChannel
  Method = Managed
  Overloading = Prototype

  # Begin Overloading
CChannel *
  # End Overloading

  # Begin MS Properties

    # Begin Declarations
/* To Do : Enter code for stub global declarations here */

    # End Declarations

  # End MS Properties

# End Stub

# Begin Stub

$ Stub based upon local stub

  Procedure = IChannelState::getChannelState
  Method = Managed
  Overloading = Prototype

  # Begin Overloading
  # End Overloading

  # Begin MS Properties

    # Begin Declarations
/* To Do : Enter code for stub global declarations here */

    # End Declarations

  # End MS Properties

# End Stub

# Begin Stub

$ Stub based upon local stub

  Procedure = IVLFState::ChannelStateChange
  Method = Managed
  Overloading = Prototype

  # Begin Overloading
CVlf *
  # End Overloading

  # Begin MS Properties

    # Begin Declarations
/* To Do : Enter code for stub global declarations here */

    # End Declarations

  # End MS Properties

# End Stub

# Begin Stub

$ Stub based upon local stub

  Procedure = IVLFState::ContBITUpdate
  Method = Managed
  Overloading = Prototype

  # Begin Overloading
CVlf *
  # End Overloading

  # Begin MS Properties

    # Begin Declarations
/* To Do : Enter code for stub global declarations here */

    # End Declarations

  # End MS Properties

# End Stub

# Begin Stub

$ Stub based upon local stub

  Procedure = IVLFState::DSPCommunications
  Method = Managed
  Overloading = Prototype

  # Begin Overloading
CVlf *
  # End Overloading

  # Begin MS Properties

    # Begin Declarations
/* To Do : Enter code for stub global declarations here */

    # End Declarations

  # End MS Properties

# End Stub

# Begin Stub

$ Stub based upon local stub

  Procedure = IVLFState::getState
  Method = Managed
  Overloading = Prototype

  # Begin Overloading
  # End Overloading

  # Begin MS Properties

    # Begin Declarations
/* To Do : Enter code for stub global declarations here */

    # End Declarations

  # End MS Properties

# End Stub

# Begin Stub

$ Stub based upon local stub

  Procedure = InterfaceHandler::HandleMsg
  Method = Managed
  Overloading = Prototype

  # Begin Overloading
CMessage *
  # End Overloading

  # Begin MS Properties

    # Begin Declarations
/* To Do : Enter code for stub global declarations here */

    # End Declarations

  # End MS Properties

# End Stub

# Begin Stub

$ Stub based upon local stub

  Procedure = InterfaceHandler::ValidateMsgParam
  Method = Managed
  Overloading = Prototype

  # Begin Overloading
const CMessage &
  # End Overloading

  # Begin MS Properties

    # Begin Declarations
/* To Do : Enter code for stub global declarations here */

    # End Declarations

  # End MS Properties

# End Stub

# Begin Stub

$ Stub based upon local stub

  Procedure = c_str
  Method = Checked

# End Stub

# Begin Stub

$ Stub based upon local stub

  Procedure = check4Null
  Method = Managed
  Overloading = Prototype

  # Begin Overloading
void *
char *
int
  # End Overloading

  # Begin MS Properties

    # Begin Declarations
/* To Do : Enter code for stub global declarations here */

    # End Declarations

  # End MS Properties

# End Stub

# Begin Stub

$ Stub based upon local stub

  Procedure = memcpy_safe
  Method = File
  Overloading = Prototype

  # Begin Overloading
TypeA *
size_t
const TypeB *
size_t
  # End Overloading

  # Begin Stub File

    Stub File = E:\CVRi1\SD&D\Software\VLF_Software\Source\Projects\KgrVpAppCommon\Common\TMemStrUtility.cc

  # End Stub File

  # Begin MS Properties

    # Begin Declarations
/* To Do : Enter code for stub global declarations here */

    # End Declarations

  # End MS Properties

# End Stub

# Begin Stub

$ Stub based upon local stub

  Procedure = memcpy_safe
  Method = File
  Overloading = Prototype

  # Begin Overloading
TypeA *
const TypeB *
size_t
  # End Overloading

  # Begin Stub File

    Stub File = E:\CVRi1\SD&D\Software\VLF_Software\Source\Projects\KgrVpAppCommon\Common\TMemStrUtility.cc

  # End Stub File

  # Begin MS Properties

    # Begin Declarations
/* To Do : Enter code for stub global declarations here */

    # End Declarations

  # End MS Properties

# End Stub

# Begin Stub

$ Stub based upon local stub

  Procedure = memset_safe
  Method = Managed
  Overloading = Prototype

  # Begin Overloading
TypeA *
TypeB
size_t
  # End Overloading

  # Begin MS Properties

    # Begin Declarations
/* To Do : Enter code for stub global declarations here */

    # End Declarations

  # End MS Properties

# End Stub

# Begin Stub

$ Stub based upon local stub

  Procedure = new
  Method = Checked

# End Stub

# Begin Stub

$ Stub based upon local stub

  Procedure = send_sa_msg
  Method = Managed
  Overloading = Prototype

  # Begin Overloading
const char *
  # End Overloading

  # Begin MS Properties

    # Begin Declarations
/* To Do : Enter code for stub global declarations here */

    # End Declarations

  # End MS Properties

# End Stub

# Begin Stub

$ Stub based upon local stub

  Procedure = sizeof
  Method = Checked

# End Stub

# Begin White Files

E:\CVRi1\SD&D\Software\VLF_Software\Source\Projects\KgrVpApp\src\MGR\CKeyEffectData.cc

# End White Files

