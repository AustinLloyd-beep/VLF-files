$ Begin Test Regression Automation Information

$ Source code names / locations:
$ ==============================
$ 
$ E:\CVRi1\SD&D\Software\VLF_Software\Source\Projects\KgrVpApp\src\MGR\main_Watchdog_Task.cc
$ 
$ Automation Example:
$ ===================
$ 
$ start /wait contbrun "E:\CVRi1\SD&D\Software\VLF_Software\Source\Projects\Vlf_Utils\LDRA\UnitTesting\KgrVpApp\src\MGR\KgrVpApp_main_Watchdog_Task__main_Watchdog_Task__seq1.tcf" /regress /quit
$ 
$ End Test Regression Automation Information

$ Begin LDRA Testbed analysis information incorporated from:
$ C:\LDRA\LDRA_Workarea\tbwrkfls\main_Watchdog_Task_354.tcf

 # Begin Testbed Set

 SINGLE_FILE = TRUE
 GENERATED_BY = Testbed 9.7.4
 HOSTNAME = winpc2005

    # Begin Source Files

    RelativeFile = .\main_Watchdog_Task.cc
    File = E:\CVRi1\SD&D\Software\VLF_Software\Source\Projects\KgrVpApp\src\MGR\main_Watchdog_Task.cc
    UNCFile = \\winpc2005\E\CVRi1\SD&D\Software\VLF_Software\Source\Projects\KgrVpApp\src\MGR\main_Watchdog_Task.cc

    # End Source Files

    # Begin Sysearch Include File Entries

    SearchPath = E:\CVRi1\SD&D\Software\VLF_Software\Source\Projects\KgrVpAppCommon\Common\
    SearchPath = E:\CVRi1\SD&D\Software\VLF_Software\Source\Projects\KgrVpAppCommon\VPCommon\
    SearchPath = E:\CVRi1\SD&D\Software\VLF_Software\Source\Projects\KgrVpAppCommon\BIT\
    SearchPath = E:\CVRi1\SD&D\Software\VLF_Software\Source\Projects\KgrVpAppCommon\MODE\Parser\
    SearchPath = E:\CVRi1\SD&D\Software\VLF_Software\Source\Projects\KgrVpApp\src\MGR\
    SearchPath = E:\CVRi1\SD&D\Software\VLF_Software\Source\Projects\KgrVpApp\src\BIT\
    SearchPath = E:\CVRi1\SD&D\Software\VLF_Software\Source\Projects\KgrVpBsp\
    SearchPath = E:\CVRi1\SD&D\Software\VLF_Software\Source\Projects\KgrVpApp\src\HwDevice\
    SearchPath = E:\CVRi1\SD&D\Software\VLF_Software\Source\ghs\int1104\VP_App1\
    SearchPath = E:\CVRi1\SD&D\Software\VLF_Software\Source\Projects\KgrVpApp\src\MGR\Messages\
    SearchPath = E:\CVRi1\SD&D\Software\VLF_Software\Source\Projects\KgrVpAppCommon\Common\Messages\
    IgnoreInclude_300 = errno.h
    IgnoreInclude_300 = INTEGRITY.h
    IgnoreInclude_300 = INTEGRITY_types.h
    IgnoreInclude_300 = boottable.h
    IgnoreInclude_300 = bsp.h
    IgnoreInclude_300 = INTEGRITY_enum_error.h

    # End Sysearch Include File Entries

    # Begin Sysppvar Preprocessor Macros

    MacroEntry = CHAN_ID 1
    MacroEntry = CHAN_ID 2
    MacroEntry = CHAN_ID 3
    MacroEntry = CHAN_ID 4
    MacroEntry = CHAN_ID 5
    MacroEntry = HARD_CODE_NETWORK_CONFIGURATION <LDRA_QQ_UNDEF_MACRO>
    MacroEntry = __cplusplus <LDRA_QQ_UNDEF_MACRO>

    # End Sysppvar Preprocessor Macros

    # Begin Options

    set_attributes = 1 1 1 1 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
    nb_mechanism = build
    nb_start_in_dir = $(SourceDir)
    nb_build_command = gbuild -cleanfirst default.gpj
    nb_compile_command = gbuild default.gpj
    nb_link_command = <Not Applicable>
    nb_ide_command = multi default.gpj
    nb_makefile_command = <Not Applicable>
    nb_makefile_name = <Not Applicable>
    nb_compile_each_file = T
    nb_build_each_file = T
    nb_makefile_in_start_in_dir = T
    nb_proj_nmake_command =  
    nb_proj_nmake_file =  
    nb_proj_msdev_command =  
    nb_proj_msdev_file =  
    nb_projfile_in_start_in_dir = T
    nb_proj_makefile_in_start_in_dir = T
    nb_remove_pch = F
    nb_substitute_source = T
    sub_unused_files = F
    nb_pipe = T
    nb_force_console = 2
    enable_pre_build = 0
    enable_post_build = 0
    make_greenhills_bld = 0
    nb_harness = cmd /c "$(TBeddir)Compiler_spec\Greenhills\Integrity_ppc\ppc_run.bat" $(Exe) history.exh
    nb_executepath = $(SolutionDir)\
    nb_execute_each_file = F
    nb_pipe_exec = F
    exhdir = $(SolutionDir)\
    modinst_exh_stem = $(SourceStem)_$(Modnum)
    using_exhstrip = F
    using_validexh = F
    single_set_exh = F
    compress_exh = T
    threaded_exh = F
    memory_address_exh = F
    compress_exh_method = bitmap_structure
    do178b_instr = T
    tbcapture_instr = F
    array_bounds_check = F
    copy_ref_instr = 0
    archive_exh = T
    force_dynsplit = F
    dyn_scan_option = 0
    dyn_scan_custom_coverage = 5 60 100 100 60 100
    dyn_scan_current_coverage = 5 60 100 100 60 100
    dyn_scan_html = T
    dyn_oview_sort = 0
    dyn_oview_options_changed = 0
    dyn_oview_file_by_file = 0
    dyn_oview_files_table = 0
    syntax_only = F
    include = T
    open_all_includes = F
    shorten = T
    tbset_data_file = tbset.dat
    workdir = $(WorkAreadir)tbwrkfls\
    y2k_text_format = 1
    y2k_column_width = 80
    ddf_text_format = 1
    ddf_column_width = 80
    iprog = inszt_$$o
    iext = $$t
    idir = $(SourceDir)
    exe_dir = $(SolutionDir)\
    exe_name = <Not Applicable>
    cinstr_data_file = <Default>
    cppinstr_data_file = <Default>
    cpenfile = <Default>
    cpppenfile = <Default>
    cvalsfile = <Default>
    cppvalsfile = <Default>
    cglbfile = <Default>
    cppglbfile = <Default>
    cppsyscallsfile = C:\LDRA\LDRA_Toolsuite\Compiler_spec\Greenhills\Integrity_ppc\ppc_syscalls.dat
    cstandards_model = NSA Rule Set
    cexternal_standard = None
    c_dialect = GREEN
    cppstandards_model = NSA Rule Set
    cppexternal_standard = None
    cpp_dialect = GREEN
    application_accessed = TBrun
    sysearch = E:\CVRi1\SD&D\Software\VLF_Software\Source\Projects\Vlf_Utils\LDRA\UnitTesting\KgrVpApp\src\MGR\sysearch.dat
    sysppvar = E:\CVRi1\SD&D\Software\VLF_Software\Source\Projects\Vlf_Utils\LDRA\UnitTesting\KgrVpApp\src\MGR\sysppvar.dat
    dynamic_run_number = 1
    history = 21
    coverage = 3
    exhwidth = 0
    logging = T
    thisdir = F
    forcedataflow = T
    dosnames = F
    scanondemand = T
    iprog_switch_os_format = F
    iprog_flush_exh = F
    preprocess_iprog = T
    instr_template_io = F
    current_compiler = GreenHills INTEGRITY PowerPC
    initial_compiler = GreenHills INTEGRITY PowerPC

    # End Options

 # End Testbed Set

$ End LDRA Testbed analysis information incorporated from:
$ C:\LDRA\LDRA_Workarea\tbwrkfls\main_Watchdog_Task_354.tcf

    # Begin Properties

    BOOL defined = AUTO
    LC bool defined = AUTO
    No Expand BOOL = TRUE
    No Expand LC bool = FALSE
    ShLayout = $(TBeddir)Compiler_spec\Greenhills\Integrity_ppc\ppc_cppshlayout.dat
    Expand Source = FALSE
    Expand Tbrunlib = FALSE
    Expand Stubs = FALSE
    Include On Top = FALSE
    Split = TRUE
    Target = C:\LDRA\LDRA_Workarea\Examples\Tlps\GreenHills\GHS_INTEGRITY_PPC_Workspace\GHS_INTEGRITY_PPC_tbrun\tbrun.top
    Target Exh File = $(Exestartdir)$(SourceStem)_$(Modnum).exh
    Supress Stdout = TRUE
    All Members = INLINE
    Enum For Enums = TRUE
    No Constants = FALSE
    Exh Directory = CUSTOM
    Exh Path = C:\LDRA\LDRA_Workarea\Examples\Tlps\GreenHills\GHS_INTEGRITY_PPC_Workspace\GHS_INTEGRITY_PPC_tbrun\
    Param Assignment = REFS
    IBox = Light Grey
    Exceptions Method = Use try / catch (...)
    Exceptions Try = __try
    Exceptions Catch = __except (1)
    Exceptions Code = 
    Exceptions End = 
    Includes UNIX Format = FALSE
    Includes Relative Path = FALSE
    Includes Drive Sub = 
    Includes Relative To = 
    Includes Relative Prefix = 
    D2U Generated Source = FALSE
    U2D Generated Output = FALSE
    Test Case Variable Storage = VERBOSE
    Del Pre Obj = TRUE
    Del Post Obj = TRUE
    Del Executable = TRUE
    Obj Extension = .obj
    Exe Extension = 
    IP Address = 
    Unixdir = 
    Unix Utilsdir = 
    Unix Username = 
    SH Common Build = TRUE
    SH Optimise Source = OPTIMISED
    TBrunlib = $(TBeddir)Cpp\ldra_port_cpptbrunlib.h
    Sequencer No Regression = FALSE
    Unit Test Force Dynamic = FALSE
    Unit Test Accume Exh = TRUE
    K and R = FALSE
    Declare ldra_qq_tbrun_output = TRUE
    SH Driver Style = AUTO
    SH Library Caller = $(Sourcedir)$(Stem)_ldra$(DriverDotext)
    SH Library Procedure = $(Stem)_test
    Timing Enabled = FALSE
    Timing Fails = FALSE
    Timing Variable Name = ldra_qq_duration
    Timing Variable Type = double
    Convert Regression Analysis = WRITE
    Unconvert Regression Analysis = COMPARE
    Dictionary = C:\LDRA\LDRA_Workarea\tbwrkfls\main_Watchdog_Task_354_tbdict\
    Local Conversions = $(Workdir)main_Watchdog_Task_354_conv_cpp.dat
    Global Conversions = $(TBeddir)Cpp\ldra_port_cpptbruntyp.dat
    TBrun coloured GUI = TRUE
    TBrun first error displayed = TRUE
    Link error based on msvcnet = FALSE
    Protection Override = BUDDY
    Processor Chip = 
    Tool Dir = 
    Tool Lib Dir = 
    Driver Params First = TRUE
    Template Makefile Enabled = TRUE
    Template Makefile Name = C:\LDRA\LDRA_Workarea\Examples\Tlps\GreenHills\GHS_INTEGRITY_PPC_Workspace\GHS_INTEGRITY_PPC_tbrun\src\tbrun_as0_TEMPLATE.gpj
    Template Makefile Target = C:\LDRA\LDRA_Workarea\Examples\Tlps\GreenHills\GHS_INTEGRITY_PPC_Workspace\GHS_INTEGRITY_PPC_tbrun\src\tbrun_as0.gpj
    SH Debug Mode = FALSE
    SH Terminate Main = FALSE
    GHS Build Command Exe = GBUILD.EXE
    GHS Project Extension = gpj
    Exception Filter = FALSE
    Port Number = 
    Generate VTable = FALSE
    SH Build Style = BUILD
    SH Sub Source = FALSE
    SH Host Program = $(Buildstartdir)src\$(ProgID)_$(Modnum)_$(Stem)_$(SeqName).$(Ext)
    SH Executable Name = C:\LDRA\LDRA_Workarea\Examples\Tlps\GreenHills\GHS_INTEGRITY_PPC_Workspace\GHS_INTEGRITY_PPC_tbrun\tbrun
    SH Build Command = cmd /c gbuild default.gpj
    SH Compile Command = <Not Applicable>
    SH Link Command = <Not Applicable>
    SH Execution Command = cmd /k "$(TBeddir)Compiler_spec\Greenhills\Integrity_ppc\ppc_run.bat" $(Exe) tbrun.top
    SH Pipe Command = AUTOMATIC
    SH Pipe Compile = AUTOMATIC
    SH Pipe Link = AUTOMATIC
    SH Pipe Execution = AUTOMATIC
    SH Output File = $(Seqworkdir)$(SeqName).$(ProgID)op
    SH Dosnames = FALSE
    SH Makefile = 
    SH Build Startin = C:\LDRA\LDRA_Workarea\Examples\Tlps\GreenHills\GHS_INTEGRITY_PPC_Workspace\GHS_INTEGRITY_PPC_tbrun\
    SH Exe Startin = C:\LDRA\LDRA_Workarea\Examples\Tlps\GreenHills\GHS_INTEGRITY_PPC_Workspace\GHS_INTEGRITY_PPC_tbrun\
    SH Enable Pre Build Steps = TRUE
    SH Enable Post Build Steps = TRUE
    SH Generate Greenhills BLD files = FALSE
    SH Greenhills BLD Add Excluded Files = FALSE
    SH Template Project File = 
    SH Generated Project File = 
    SH Generate Compiler Project File = FALSE
    SH Source Lists Add Excluded Files = FALSE
    SH Substitute Unused Source Files = FALSE
    SH Lib Build Style = BUILD
    SH Lib Sub Source = FALSE
    SH Lib Host Program = 
    SH Lib Executable Name = $(Seqworkdir)$(SeqName)_$(ProgFullID)$(ExeExtension)
    SH Lib Build Command = cl /nologo "$(Name)" -o "$(Exe)"
    SH Lib Compile Command = cl /nologo /c "$(Name)"
    SH Lib Link Command = link /NOLOGO *.obj /out:"$(Exe)"
    SH Lib Execution Command = "$(Exe)"
    SH Lib Pipe Command = AUTOMATIC
    SH Lib Pipe Compile = AUTOMATIC
    SH Lib Pipe Link = AUTOMATIC
    SH Lib Pipe Execution = AUTOMATIC
    SH Lib Output File = $(Seqworkdir)$(SeqName).$(ProgID)op
    SH Lib Dosnames = FALSE
    SH Lib Makefile = 
    SH Lib Build Startin = $(Seqworkdir)
    SH Lib Exe Startin = $(Seqworkdir)
    SH Lib Enable Pre Build Steps = TRUE
    SH Lib Enable Post Build Steps = FALSE
    SH Lib Generate Greenhills BLD files = TRUE
    SH Lib Greenhills BLD Add Excluded Files = FALSE
    SH Lib Template Project File = 
    SH Lib Generated Project File = 
    SH Lib Generate Compiler Project File = FALSE
    SH Lib Source Lists Add Excluded Files = FALSE
    SH Lib Substitute Unused Source Files = FALSE
    Sequencer Build Style = BUILD
    Sequencer Sub Source = FALSE
    Sequencer Host Program = $(Buildstartdir)src\$(ProgID)_$(Modnum)_$(Stem)_$(SeqName).$(Ext)
    Sequencer Executable Name = C:\LDRA\LDRA_Workarea\Examples\Tlps\GreenHills\GHS_INTEGRITY_PPC_Workspace\GHS_INTEGRITY_PPC_tbrun\tbrun
    Sequencer Build Command = cmd /c gbuild default.gpj
    Sequencer Compile Command = <Not Applicable>
    Sequencer Link Command = <Not Applicable>
    Sequencer Execution Command = cmd /k "$(TBeddir)Compiler_spec\Greenhills\Integrity_ppc\ppc_run.bat" $(Exe) tbrun.top
    Sequencer Pipe Command = AUTOMATIC
    Sequencer Pipe Compile = AUTOMATIC
    Sequencer Pipe Link = AUTOMATIC
    Sequencer Pipe Execution = AUTOMATIC
    Sequencer Output File = $(Seqworkdir)$(SeqName).$(ProgID)op
    Sequencer Dosnames = FALSE
    Sequencer Makefile = 
    Sequencer Build Startin = $(Seqworkdir)
    Sequencer Exe Startin = $(Seqworkdir)
    Sequencer Enable Pre Build Steps = TRUE
    Sequencer Enable Post Build Steps = TRUE
    Sequencer Generate Greenhills BLD files = FALSE
    Sequencer Greenhills BLD Add Excluded Files = FALSE
    Sequencer Template Project File = 
    Sequencer Generated Project File = 
    Sequencer Generate Compiler Project File = FALSE
    Sequencer Source Lists Add Excluded Files = FALSE
    Sequencer Substitute Unused Source Files = FALSE
    Sequencer Lib Build Style = BUILD
    Sequencer Lib Sub Source = FALSE
    Sequencer Lib Host Program = 
    Sequencer Lib Executable Name = $(Seqworkdir)$(SeqName)_$(ProgFullID)$(ExeExtension)
    Sequencer Lib Build Command = cl /nologo "$(Name)" -o "$(Exe)"
    Sequencer Lib Compile Command = cl /nologo /c "$(Name)"
    Sequencer Lib Link Command = link /NOLOGO *.obj /out:"$(Exe)"
    Sequencer Lib Execution Command = "$(Exe)"
    Sequencer Lib Pipe Command = AUTOMATIC
    Sequencer Lib Pipe Compile = AUTOMATIC
    Sequencer Lib Pipe Link = AUTOMATIC
    Sequencer Lib Pipe Execution = AUTOMATIC
    Sequencer Lib Output File = $(Seqworkdir)$(SeqName).$(ProgID)op
    Sequencer Lib Dosnames = FALSE
    Sequencer Lib Makefile = 
    Sequencer Lib Build Startin = $(Seqworkdir)
    Sequencer Lib Exe Startin = $(Seqworkdir)
    Sequencer Lib Enable Pre Build Steps = TRUE
    Sequencer Lib Enable Post Build Steps = FALSE
    Sequencer Lib Generate Greenhills BLD files = TRUE
    Sequencer Lib Greenhills BLD Add Excluded Files = FALSE
    Sequencer Lib Template Project File = 
    Sequencer Lib Generated Project File = 
    Sequencer Lib Generate Compiler Project File = FALSE
    Sequencer Lib Source Lists Add Excluded Files = FALSE
    Sequencer Lib Substitute Unused Source Files = FALSE
    Harness Build Style = BUILD
    Harness Sub Source = FALSE
    Harness Host Program = $(Buildstartdir)src\$(ProgID)_$(Modnum)_$(Stem)_$(SeqName).$(Ext)
    Harness Executable Name = C:\LDRA\LDRA_Workarea\Examples\Tlps\GreenHills\GHS_INTEGRITY_PPC_Workspace\GHS_INTEGRITY_PPC_tbrun\tbrun
    Harness Build Command = cmd /c gbuild default.gpj
    Harness Compile Command = <Not Applicable>
    Harness Link Command = <Not Applicable>
    Harness Execution Command = cmd /k "$(TBeddir)Compiler_spec\Greenhills\Integrity_ppc\ppc_run.bat" $(Exe) tbrun.top
    Harness Pipe Command = AUTOMATIC
    Harness Pipe Compile = AUTOMATIC
    Harness Pipe Link = AUTOMATIC
    Harness Pipe Execution = AUTOMATIC
    Harness Output File = $(Seqworkdir)$(SeqName).$(ProgID)op
    Harness Dosnames = FALSE
    Harness Makefile = 
    Harness Build Startin = $(Seqworkdir)
    Harness Exe Startin = $(Seqworkdir)
    Harness Enable Pre Build Steps = TRUE
    Harness Enable Post Build Steps = TRUE
    Harness Generate Greenhills BLD files = FALSE
    Harness Greenhills BLD Add Excluded Files = FALSE
    Harness Template Project File = 
    Harness Generated Project File = 
    Harness Generate Compiler Project File = FALSE
    Harness Source Lists Add Excluded Files = FALSE
    Harness Substitute Unused Source Files = FALSE
    Harness Lib Build Style = BUILD
    Harness Lib Sub Source = FALSE
    Harness Lib Host Program = 
    Harness Lib Executable Name = $(Seqworkdir)$(SeqName)_$(ProgFullID)$(ExeExtension)
    Harness Lib Build Command = cl /nologo "$(Name)" -o "$(Exe)"
    Harness Lib Compile Command = cl /nologo /c "$(Name)"
    Harness Lib Link Command = link /NOLOGO *.obj /out:"$(Exe)"
    Harness Lib Execution Command = "$(Exe)"
    Harness Lib Pipe Command = AUTOMATIC
    Harness Lib Pipe Compile = AUTOMATIC
    Harness Lib Pipe Link = AUTOMATIC
    Harness Lib Pipe Execution = AUTOMATIC
    Harness Lib Output File = $(Seqworkdir)$(SeqName).$(ProgID)op
    Harness Lib Dosnames = FALSE
    Harness Lib Makefile = 
    Harness Lib Build Startin = $(Seqworkdir)
    Harness Lib Exe Startin = $(Seqworkdir)
    Harness Lib Enable Pre Build Steps = TRUE
    Harness Lib Enable Post Build Steps = TRUE
    Harness Lib Generate Greenhills BLD files = FALSE
    Harness Lib Greenhills BLD Add Excluded Files = FALSE
    Harness Lib Template Project File = 
    Harness Lib Generated Project File = 
    Harness Lib Generate Compiler Project File = FALSE
    Harness Lib Source Lists Add Excluded Files = FALSE
    Harness Lib Substitute Unused Source Files = FALSE
    Macro Standard 1 = Set TBRUN_MACRO_STANDARD_1 in Testbed.ini
    Macro Standard 2 = Set TBRUN_MACRO_STANDARD_2 in Testbed.ini
    Macro Standard 3 = Set TBRUN_MACRO_STANDARD_3 in Testbed.ini
    Macro Standard 4 = Set TBRUN_MACRO_STANDARD_4 in Testbed.ini
    Macro Standard 5 = Set TBRUN_MACRO_STANDARD_5 in Testbed.ini
    Macro File 1 = Set TBRUN_MACRO_FILE_1 in Testbed.ini
    Macro File 2 = Set TBRUN_MACRO_FILE_2 in Testbed.ini
    Macro File 3 = Set TBRUN_MACRO_FILE_3 in Testbed.ini
    Macro File 4 = Set TBRUN_MACRO_FILE_4 in Testbed.ini
    Macro File 5 = Set TBRUN_MACRO_FILE_5 in Testbed.ini
    Macro Directory 1 = Set TBRUN_MACRO_DIRECTORY_1 in Testbed.ini
    Macro Directory 2 = Set TBRUN_MACRO_DIRECTORY_2 in Testbed.ini
    Macro Directory 3 = Set TBRUN_MACRO_DIRECTORY_3 in Testbed.ini
    Macro Directory 4 = Set TBRUN_MACRO_DIRECTORY_4 in Testbed.ini
    Macro Directory 5 = Set TBRUN_MACRO_DIRECTORY_5 in Testbed.ini

    # End Properties

    # Begin Attributes

      Sequence Name = KgrVpApp_main_Watchdog_Task__main_Watchdog_Task__seq1
      Initial Compiler = GreenHills INTEGRITY PowerPC
      Language Code = 6
      Version = 9.7.4

    # End Attributes

    # Begin Test Case

      File = E:\CVRi1\SD&D\Software\VLF_Software\Source\Projects\KgrVpApp\src\MGR\main_Watchdog_Task.cc
      Procedure = main_Watchdog_Task
      Procedure Number = 1
      Creation Date = Jul 08 2020 11:19:23

        # Begin Variable

          Name = taskNameString[0]
          Decl_type = char*
          Usage = G
          TBrun Analysis = Suspended

        # End Variable

        # Begin Variable

          Name = taskNameString[1]
          Decl_type = char*
          Usage = G
          TBrun Analysis = Suspended

        # End Variable

        # Begin Variable

          Name = taskNameString[2]
          Decl_type = char*
          Usage = G
          TBrun Analysis = Suspended

        # End Variable

        # Begin Variable

          Name = taskNameString[3]
          Decl_type = char*
          Usage = G
          TBrun Analysis = Suspended

        # End Variable

        # Begin Variable

          Name = taskNameString[4]
          Decl_type = char*
          Usage = G
          TBrun Analysis = Suspended

        # End Variable

        # Begin Variable

          Name = taskNameString[5]
          Decl_type = char*
          Usage = G
          TBrun Analysis = Suspended

        # End Variable

        # Begin Variable

          Name = taskNameString[6]
          Decl_type = char*
          Usage = G
          TBrun Analysis = Suspended

        # End Variable

        # Begin Variable

          Name = taskNameString[7]
          Decl_type = char*
          Usage = G
          TBrun Analysis = Suspended

        # End Variable

        # Begin Variable

          Name = taskNameString[8]
          Decl_type = char*
          Usage = G
          TBrun Analysis = Suspended

        # End Variable

        # Begin Variable

          Name = taskNameString[9]
          Decl_type = char*
          Usage = G
          TBrun Analysis = Suspended

        # End Variable

        # Begin Variable

          Name = taskNameString[10]
          Decl_type = char*
          Usage = G
          TBrun Analysis = Suspended

        # End Variable

        # Begin Variable

          Name = taskNameString[11]
          Decl_type = char*
          Usage = G
          TBrun Analysis = Suspended

        # End Variable

        # Begin Variable

          Name = taskNameString[12]
          Decl_type = char*
          Usage = G
          TBrun Analysis = Suspended

        # End Variable

        # Begin Variable

          Name = taskNameString[13]
          Decl_type = char*
          Usage = G
          TBrun Analysis = Suspended

        # End Variable

        # Begin Variable

          Name = taskNameString[14]
          Decl_type = char*
          Usage = G
          TBrun Analysis = Suspended

        # End Variable

        # Begin Variable

          Name = taskNameString[15]
          Decl_type = char*
          Usage = G
          TBrun Analysis = Suspended

        # End Variable

        # Begin Variable

          Name = taskNameString[0]
          Decl_type = char*
          Usage = H
          Value = "Main_Coord_SP_Task"
          Comparison = ldra_qq_string_compare

        # End Variable

        # Begin Variable

          Name = taskNameString[1]
          Decl_type = char*
          Usage = H
          Value = "Main_Eth_Rx_Task"
          Comparison = ldra_qq_string_compare

        # End Variable

        # Begin Variable

          Name = taskNameString[15]
          Decl_type = char*
          Usage = H
          Value = "Main_CBit_Task"
          Comparison = ldra_qq_string_compare

        # End Variable

        # Begin Removed Variable

          Name = taskNameString[3]
          Decl_type = char*
          Usage = H

        # End Removed Variable

        # Begin Removed Variable

          Name = taskNameString[4]
          Decl_type = char*
          Usage = H

        # End Removed Variable

        # Begin Removed Variable

          Name = taskNameString[5]
          Decl_type = char*
          Usage = H

        # End Removed Variable

        # Begin Removed Variable

          Name = taskNameString[6]
          Decl_type = char*
          Usage = H

        # End Removed Variable

        # Begin Removed Variable

          Name = taskNameString[7]
          Decl_type = char*
          Usage = H

        # End Removed Variable

        # Begin Removed Variable

          Name = taskNameString[8]
          Decl_type = char*
          Usage = H

        # End Removed Variable

        # Begin Removed Variable

          Name = taskNameString[9]
          Decl_type = char*
          Usage = H

        # End Removed Variable

        # Begin Removed Variable

          Name = taskNameString[10]
          Decl_type = char*
          Usage = H

        # End Removed Variable

        # Begin Removed Variable

          Name = taskNameString[11]
          Decl_type = char*
          Usage = H

        # End Removed Variable

        # Begin Removed Variable

          Name = taskNameString[12]
          Decl_type = char*
          Usage = H

        # End Removed Variable

        # Begin Removed Variable

          Name = taskNameString[13]
          Decl_type = char*
          Usage = H

        # End Removed Variable

        # Begin Removed Variable

          Name = taskNameString[14]
          Decl_type = char*
          Usage = H

        # End Removed Variable

        # Begin Removed Variable

          Name = taskNameString[15]
          Decl_type = char*
          Usage = H

        # End Removed Variable

      # Begin TC Stub

        Procedure = WDTC::watchdogTaskCommon
  Overloading = Prototype

  # Begin Overloading
const char * []
const Task []
const unsigned int
const char *
const IODevice
  # End Overloading

        # Begin TC Stub Input Params

          Name = tskNameString
          Type = const char * []
          Value = taskNameString

        # End TC Stub Input Params

        # Begin TC Stub Input Params

          Name = taskName
          Type = const Task []
          Value = taskName

        # End TC Stub Input Params

        # Begin TC Stub Input Params

          Name = numTasks
          Type = const unsigned int
          Value = NUM_TASKS_IN_MGR_VAS

        # End TC Stub Input Params

        # Begin TC Stub Input Params

          Name = dspId
          Type = const char *
          Value = "DSP1"
          Compare = ldra_qq_const_string_compare

        # End TC Stub Input Params

        # Begin TC Stub Input Params

          Name = watchdogDev
          Type = const IODevice
          Value = WatchdogIoDeviceObject

        # End TC Stub Input Params

      # Begin TC Stub TC Hit Count

        Setting = 3
        Specified = 1
      # End TC Stub TC Hit Count

      # End TC Stub

    # End Test Case

    # Begin Global

      File = E:\CVRi1\SD&D\Software\VLF_Software\Source\Projects\KgrVpApp\src\MGR\main_Watchdog_Task.cc
      Name = CControlVars::mInstance
      Decl_type = CControlVars*
      Value = (CControlVars*)(0)

    # End Global

  #Begin Isolated Procedure

    File = E:\CVRi1\SD&D\Software\VLF_Software\Source\Projects\KgrVpApp\src\MGR\main_Watchdog_Task.cc
    Procedure = main_Watchdog_Task
    Procedure Number = 1
    Parameter = 0

  #End Isolated Procedure

    # Begin Global Conversions
C
int
ldra_qq_signed_int_convert
C
long
ldra_qq_signed_long_convert
C
long int
ldra_qq_signed_long_convert
C
short
ldra_qq_signed_short_convert
C
short int
ldra_qq_signed_short_convert
C
signed
ldra_qq_signed_int_convert
C
signed int
ldra_qq_signed_int_convert
C
signed long
ldra_qq_signed_long_convert
C
signed long int
ldra_qq_signed_long_convert
C
signed short
ldra_qq_signed_short_convert
C
signed short int
ldra_qq_signed_short_convert
C
unsigned
ldra_qq_unsigned_int_convert
C
unsigned int
ldra_qq_unsigned_int_convert
C
unsigned long
ldra_qq_unsigned_long_convert
C
unsigned long int
ldra_qq_unsigned_long_convert
C
unsigned short
ldra_qq_unsigned_short_convert
C
unsigned short int
ldra_qq_unsigned_short_convert
C
char
ldra_qq_char_convert
C
char*
ldra_qq_char_star_convert
C
CString
ldra_qq_CString_convert
C
double
ldra_qq_double_convert
C
float
ldra_qq_float_convert
C
long double
ldra_qq_long_double_convert
C
long long
ldra_qq_long_long_convert
C
long long int
ldra_qq_long_long_convert
C
signed long long
ldra_qq_long_long_convert
C
signed long long int
ldra_qq_long_long_convert
C
string
ldra_qq_string_convert
C
std::string
ldra_qq_string_convert
C
unsigned char
ldra_qq_unsigned_char_convert
C
unsigned long long
ldra_qq_ulong_long_convert
C
unsigned long long int
ldra_qq_ulong_long_convert
U
bool
ldra_qq_bool_convert
U
BOOL
ldra_qq_BOOL_convert
G
BIT
unsigned char
G
BYTE
unsigned char
G
CHAR
char
G
DWORD
unsigned long
G
FL32
float
G
FLOAT
float
G
float32
float
G
float64
double
G
FLOAT32
float
G
UChar8Type
unsigned char
G
DataByteType
unsigned char
G
uint8
unsigned char
G
uint16
unsigned short int
G
uint32
unsigned int
G
int8
signed char
G
int16
signed short int
G
int32
signed int
G
IEEE_SPFloatType
float
G
IEEE_DPFloatType
double
G
Float32Type
float
G
Float64Type
double
G
SInt16Type
signed short int
G
SInt32Type
signed int
G
SInt8Type
signed char
G
UInt16Type
unsigned short int
G
UInt32Type
unsigned int
G
UInt8Type
unsigned char
G
INT
int
G
Int8
char
G
Int16
short
G
Int32
long
G
INT8
char
G
INT16
short
G
INT32
int
G
INT8_T
int
G
INT16_T
int
G
LONG
long
G
LPARAM
long
G
LRESULT
long
G
SCHAR
signed char
G
SHORT
short
G
SINT
signed int
G
SInt8
signed char
G
SI16
signed int
G
SI32
signed long
G
SIGNED8
signed char
G
SIGNED16
signed int
G
SIGNED32
signed long
G
SInt16
signed short
G
SInt32
signed long
G
SWORD
signed long
G
TInt8
signed char
G
TInt16
short int
G
TInt32
long int
G
TInt
signed int
G
TReal
double
G
TReal32
float
G
TReal64
double
G
TUint
unsigned int
G
TUint8
unsigned char
G
TUint16
unsigned short int
G
TUint32
unsigned long int
G
U8Int
unsigned char
G
UI16
unsigned int
G
U16Int
unsigned int
G
UI32
unsigned long
G
U32Int
unsigned long
G
UCHAR
unsigned char
G
UInt8
unsigned char
G
UInt16
unsigned short
G
UInt32
unsigned long
G
UINT
unsigned int
G
UINT8
unsigned char
G
UINT8_T
unsigned int
G
UINT16
unsigned short
G
UINT16_T
unsigned int
G
UINT32_T
unsigned long
G
ULONG
unsigned long
G
UNSIGNED8
unsigned char
G
UNSIGNED16
unsigned int
G
UNSIGNED32
unsigned long
G
USHORT
unsigned short
G
WORD
unsigned short
G
WPARAM
unsigned int
G
bit
unsigned char
G
byte
unsigned char
G
dword
unsigned long
G
int8_t
char
G
int16_t
short
G
int32_t
long
G
lparam
long
G
lresult
long
G
real
float
G
sint
signed int
G
sint8_t
signed char
G
sint16_t
signed short
G
sint32_t
signed long
G
sword
signed long
G
uchar_T
unsigned char
G
uint
unsigned int
G
uint8_t
unsigned char
G
uint16_t
unsigned short
G
uint32_t
unsigned long
G
ushort_T
unsigned short
G
ulong_T
unsigned long
G
word
unsigned short
G
wparam
unsigned int
G
RhpBoolean
bool
G
RhpCharacter
char
G
RhpInteger
int
G
RhpPositive
unsigned int
G
RhpReal
double
G
RhpUnlimitedNatural
long
    # End Global Conversions

# Begin Stub

$ Stub based upon local stub

  Procedure = CControlVars:: =
  Method = Managed
  Overloading = Prototype

  # Begin Overloading
const CControlVars &
  # End Overloading

  # Begin MS Properties

    Return Value = *this

    # Begin Declarations
/* To Do : Enter code for stub global declarations here */

    # End Declarations

  # End MS Properties

# End Stub

# Begin Stub

$ Stub based upon local stub

  Procedure = CControlVars::CControlVars
  Method = Managed
  Overloading = Prototype

  # Begin Overloading
const CControlVars &
  # End Overloading

  # Begin MS Properties

    # Begin Declarations
/* To Do : Enter code for stub global declarations here */

    # End Declarations

  # End MS Properties

# End Stub

# Begin Stub

$ Stub based upon local stub

  Procedure = CControlVars::CControlVars
  Method = Managed
  Overloading = Prototype

  # Begin Overloading
  # End Overloading

  # Begin MS Properties

    # Begin Declarations
/* To Do : Enter code for stub global declarations here */

    # End Declarations

  # End MS Properties

# End Stub

# Begin Stub

$ Stub based upon local stub

  Procedure = CControlVars::Instance
  Method = Managed
  Overloading = Prototype

  # Begin Overloading
  # End Overloading

  # Begin MS Properties

    Return Value = &ldra_qq_lv_1

    # Begin Declarations
/* To Do : Enter code for stub global declarations here */

    # End Declarations

    # Begin Local Declarations
static CControlVars ldra_qq_lv_1;
    # End Local Declarations

  # End MS Properties

# End Stub

# Begin Stub

$ Stub based upon local stub

  Procedure = CControlVars::~CControlVars
  Method = Managed
  Overloading = Prototype

  # Begin Overloading
  # End Overloading

  # Begin MS Properties

    # Begin Declarations
/* To Do : Enter code for stub global declarations here */

    # End Declarations

  # End MS Properties

# End Stub

# Begin Stub

$ Stub based upon local stub

  Procedure = TaskObjectNumber
  Method = System

  # Begin MS Properties

    # Begin Declarations
/* To Do : Enter code for stub global declarations here */

    # End Declarations

  # End MS Properties

# End Stub

# Begin Stub

$ Stub based upon local stub

  Procedure = WDTC::watchdogTaskCommon
  Method = Managed
  Overloading = Prototype

  # Begin Overloading
const char * []
const Task []
const unsigned int
const char *
const IODevice
  # End Overloading

  # Begin MS Properties

    # Begin Declarations
/* To Do : Enter code for stub global declarations here */

    # End Declarations

  # End MS Properties

# End Stub

# Begin White Files

E:\CVRi1\SD&D\Software\VLF_Software\Source\Projects\KgrVpApp\src\MGR\main_Watchdog_Task.cc

# End White Files

